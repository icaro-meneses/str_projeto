
str_projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006234  08006234  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800623c  0800623c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea0  20000080  080062c4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f20  080062c4  00022f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d19  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  00029dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017411  00000000  00000000  0002cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5c7  00000000  00000000  000443a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce5b  00000000  00000000  0004f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc7c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000dc814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005de8 	.word	0x08005de8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005de8 	.word	0x08005de8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f000 fb77 	bl	8000c8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059e:	f000 f849 	bl	8000634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a2:	f000 f8a5 	bl	80006f0 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	initRandomValues();
 80005a6:	f000 f9a7 	bl	80008f8 <initRandomValues>
	initialise_monitor_handles();
 80005aa:	f005 fb77 	bl	8005c9c <initialise_monitor_handles>
  		  (void*) NULL,
		  tskIDLE_PRIORITY + 2UL,
		  NULL);
	 */
	/* Tarefas Periódicas */
	xTaskCreate(lerTemperatura, "taskTemper",
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <main+0x70>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2282      	movs	r2, #130	; 0x82
 80005ba:	4913      	ldr	r1, [pc, #76]	; (8000608 <main+0x74>)
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x78>)
 80005be:	f001 fe1f 	bl	8002200 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 1UL,
			&taskTemperHandle);
	xTaskCreate(monitorarPresenca, "taskPresen",
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <main+0x7c>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2303      	movs	r3, #3
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <main+0x80>)
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x84>)
 80005d2:	f001 fe15 	bl	8002200 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 3UL,
			&taskPresenHandle);
	xTaskCreate(gerenciarLuzes, "taskGerLuz",
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <main+0x88>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2282      	movs	r2, #130	; 0x82
 80005e2:	490f      	ldr	r1, [pc, #60]	; (8000620 <main+0x8c>)
 80005e4:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0x90>)
 80005e6:	f001 fe0b 	bl	8002200 <xTaskCreate>
			(void*) NULL,
			tskIDLE_PRIORITY + 2UL,
			&taskGerLuzHandle);

	/* Tarefas Aperiódicas */
	xTaskCreate(ligarLuzPresenca, "taskLuzPre",
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <main+0x94>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2303      	movs	r3, #3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2282      	movs	r2, #130	; 0x82
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <main+0x98>)
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <main+0x9c>)
 80005fa:	f001 fe01 	bl	8002200 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 3UL,
			&taskLuzPreHandle);

	vTaskStartScheduler();
 80005fe:	f002 f817 	bl	8002630 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x6e>
 8000604:	2000009c 	.word	0x2000009c
 8000608:	08005e00 	.word	0x08005e00
 800060c:	08000941 	.word	0x08000941
 8000610:	200000a0 	.word	0x200000a0
 8000614:	08005e0c 	.word	0x08005e0c
 8000618:	08000981 	.word	0x08000981
 800061c:	200000a4 	.word	0x200000a4
 8000620:	08005e18 	.word	0x08005e18
 8000624:	08000a31 	.word	0x08000a31
 8000628:	200000a8 	.word	0x200000a8
 800062c:	08005e24 	.word	0x08005e24
 8000630:	08000b91 	.word	0x08000b91

08000634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fe8e 	bl	8004364 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xb4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xb4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xb4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemClock_Config+0xb8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xb8>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe05 	bl	80012b4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80006b0:	f000 f85c 	bl	800076c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f868 	bl	80017a4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80006da:	f000 f847 	bl	800076c <Error_Handler>
	}
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_GPIO_Init+0x74>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_GPIO_Init+0x74>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_GPIO_Init+0x74>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OUTA_Pin|OUTB_Pin|OUTC_Pin|OUTD_Pin
 8000720:	2200      	movs	r2, #0
 8000722:	21f8      	movs	r1, #248	; 0xf8
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <MX_GPIO_Init+0x78>)
 8000726:	f000 fd91 	bl	800124c <HAL_GPIO_WritePin>
			|OUTE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : BTNA_Pin BTNB_Pin */
	GPIO_InitStruct.Pin = BTNA_Pin|BTNB_Pin;
 800072a:	2306      	movs	r3, #6
 800072c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0x78>)
 800073c:	f000 fbea 	bl	8000f14 <HAL_GPIO_Init>

	/*Configure GPIO pins : OUTA_Pin OUTB_Pin OUTC_Pin OUTD_Pin
                           OUTE_Pin */
	GPIO_InitStruct.Pin = OUTA_Pin|OUTB_Pin|OUTC_Pin|OUTD_Pin
 8000740:	23f8      	movs	r3, #248	; 0xf8
 8000742:	607b      	str	r3, [r7, #4]
			|OUTE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x78>)
 8000756:	f000 fbdd 	bl	8000f14 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_MspInit+0x4c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f003 fd7c 	bl	80042f4 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20020000 	.word	0x20020000
 8000828:	00000400 	.word	0x00000400
 800082c:	200000ac 	.word	0x200000ac
 8000830:	20012f20 	.word	0x20012f20

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <toClockTime>:
		HAL_GPIO_TogglePin(OUTD_GPIO_Port, OUTD_Pin);
	}
}

void toClockTime(TickType_t sysTicks, char* clk_string)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	uint16_t seconds, minutes, hours;

	seconds = (sysTicks / configTICK_RATE_HZ) % 60;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <toClockTime+0x88>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	0999      	lsrs	r1, r3, #6
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <toClockTime+0x8c>)
 800086e:	fba3 2301 	umull	r2, r3, r3, r1
 8000872:	095a      	lsrs	r2, r3, #5
 8000874:	4613      	mov	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	1aca      	subs	r2, r1, r3
 800087e:	4613      	mov	r3, r2
 8000880:	81fb      	strh	r3, [r7, #14]
	minutes = (sysTicks / (configTICK_RATE_HZ * 60)) % 60;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <toClockTime+0x90>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0b99      	lsrs	r1, r3, #14
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <toClockTime+0x8c>)
 800088e:	fba3 2301 	umull	r2, r3, r3, r1
 8000892:	095a      	lsrs	r2, r3, #5
 8000894:	4613      	mov	r3, r2
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	4613      	mov	r3, r2
 80008a0:	81bb      	strh	r3, [r7, #12]
	hours = (sysTicks / (configTICK_RATE_HZ * 3600)) % 24;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <toClockTime+0x94>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0d59      	lsrs	r1, r3, #21
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <toClockTime+0x98>)
 80008ae:	fba3 2301 	umull	r2, r3, r3, r1
 80008b2:	091a      	lsrs	r2, r3, #4
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	1aca      	subs	r2, r1, r3
 80008be:	4613      	mov	r3, r2
 80008c0:	817b      	strh	r3, [r7, #10]

	snprintf(clk_string, CLOCK_WATCH_MAX_CHAR+1,"%02u: %02u: %02u", hours, minutes, seconds);
 80008c2:	8979      	ldrh	r1, [r7, #10]
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	89fa      	ldrh	r2, [r7, #14]
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	460b      	mov	r3, r1
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <toClockTime+0x9c>)
 80008d0:	210b      	movs	r1, #11
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f003 fdd2 	bl	800447c <sniprintf>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	10624dd3 	.word	0x10624dd3
 80008e4:	88888889 	.word	0x88888889
 80008e8:	45e7b273 	.word	0x45e7b273
 80008ec:	95217cb1 	.word	0x95217cb1
 80008f0:	aaaaaaab 	.word	0xaaaaaaab
 80008f4:	08005e50 	.word	0x08005e50

080008f8 <initRandomValues>:

void initRandomValues(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	time_t t_random;
	srand((unsigned) &t_random);
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f003 fd4f 	bl	80043a4 <srand>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <getRandomValue>:

int getRandomValue(int min, int max)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	int value = (rand() % (min - max + 1)) + min;
 8000918:	f003 fd72 	bl	8004400 <rand>
 800091c:	4602      	mov	r2, r0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	1acb      	subs	r3, r1, r3
 8000924:	3301      	adds	r3, #1
 8000926:	fb92 f1f3 	sdiv	r1, r2, r3
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]

	return value;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <lerTemperatura>:

/* Tarefas Periódicas */

void lerTemperatura(void* pvParameters)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	int temperValue;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000948:	f001 ffce 	bl	80028e8 <xTaskGetTickCount>
 800094c:	61f8      	str	r0, [r7, #28]
		toClockTime(timeStamp, clockWatchBuf);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	69f8      	ldr	r0, [r7, #28]
 8000956:	f7ff ff7f 	bl	8000858 <toClockTime>
		temperValue = getRandomValue(23, 28);
 800095a:	211c      	movs	r1, #28
 800095c:	2017      	movs	r0, #23
 800095e:	f7ff ffd6 	bl	800090e <getRandomValue>
 8000962:	61b8      	str	r0, [r7, #24]

		printf("[TASK Temper] [time: %s] Temperatura: %02d\n", clockWatchBuf, temperValue);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4619      	mov	r1, r3
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <lerTemperatura+0x3c>)
 800096e:	f003 fd01 	bl	8004374 <iprintf>

		vTaskDelay(2000 * (configTICK_RATE_HZ / 1000));
 8000972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000976:	f001 fdad 	bl	80024d4 <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 800097a:	e7e5      	b.n	8000948 <lerTemperatura+0x8>
 800097c:	08005e64 	.word	0x08005e64

08000980 <monitorarPresenca>:
	}
}

void monitorarPresenca(void* pvParameters)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	/* Monitoramento de Presença feito com o BTNA */
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	GPIO_PinState button_state = GPIO_PIN_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	77bb      	strb	r3, [r7, #30]
	uint8_t machine_state = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000990:	f001 ffaa 	bl	80028e8 <xTaskGetTickCount>
 8000994:	61b8      	str	r0, [r7, #24]
		toClockTime(timeStamp, clockWatchBuf);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	69b8      	ldr	r0, [r7, #24]
 800099e:	f7ff ff5b 	bl	8000858 <toClockTime>
		button_state = HAL_GPIO_ReadPin(BTNA_GPIO_Port, BTNA_Pin);
 80009a2:	2102      	movs	r1, #2
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <monitorarPresenca+0x9c>)
 80009a6:	f000 fc39 	bl	800121c <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	77bb      	strb	r3, [r7, #30]

		switch(machine_state)
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <monitorarPresenca+0x3a>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d00c      	beq.n	80009d2 <monitorarPresenca+0x52>
				machine_state = 0;
			}
			break;

		default:
			break;
 80009b8:	e02c      	b.n	8000a14 <monitorarPresenca+0x94>
			printf("[TASK Presen] [time: %s] Presença Não Detectada\n", clockWatchBuf);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4817      	ldr	r0, [pc, #92]	; (8000a20 <monitorarPresenca+0xa0>)
 80009c2:	f003 fcd7 	bl	8004374 <iprintf>
			if (button_state == GPIO_PIN_SET)
 80009c6:	7fbb      	ldrb	r3, [r7, #30]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d120      	bne.n	8000a0e <monitorarPresenca+0x8e>
				machine_state = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	77fb      	strb	r3, [r7, #31]
			break;
 80009d0:	e01d      	b.n	8000a0e <monitorarPresenca+0x8e>
			printf("[TASK Presen] [time: %s] Presença Detectada\n", clockWatchBuf);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <monitorarPresenca+0xa4>)
 80009da:	f003 fccb 	bl	8004374 <iprintf>
			xTaskNotifyGive(taskGerLuzHandle);
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <monitorarPresenca+0xa8>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2302      	movs	r3, #2
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 fc80 	bl	80032f0 <xTaskGenericNotify>
			xTaskNotifyGive(taskLuzPreHandle);
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <monitorarPresenca+0xac>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2302      	movs	r3, #2
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	f002 fc77 	bl	80032f0 <xTaskGenericNotify>
			if (button_state == GPIO_PIN_RESET)
 8000a02:	7fbb      	ldrb	r3, [r7, #30]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <monitorarPresenca+0x92>
				machine_state = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	77fb      	strb	r3, [r7, #31]
			break;
 8000a0c:	e001      	b.n	8000a12 <monitorarPresenca+0x92>
			break;
 8000a0e:	bf00      	nop
 8000a10:	e000      	b.n	8000a14 <monitorarPresenca+0x94>
			break;
 8000a12:	bf00      	nop
		}

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000a14:	20fa      	movs	r0, #250	; 0xfa
 8000a16:	f001 fd5d 	bl	80024d4 <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000a1a:	e7b9      	b.n	8000990 <monitorarPresenca+0x10>
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	08005e90 	.word	0x08005e90
 8000a24:	08005ec4 	.word	0x08005ec4
 8000a28:	200000a4 	.word	0x200000a4
 8000a2c:	200000a8 	.word	0x200000a8

08000a30 <gerenciarLuzes>:
	}
}

void gerenciarLuzes(void* pvParameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	BaseType_t notificacaoPresenca;

	TickType_t OUTATime = configTICK_RATE_HZ * 60;    // 1 minuto em ticks
 8000a38:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
	TickType_t OUTBTime = configTICK_RATE_HZ * 120;   // 2 minutos em ticks
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <gerenciarLuzes+0x130>)
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t OUTCTime = configTICK_RATE_HZ * 240;   // 4 minutos em ticks
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <gerenciarLuzes+0x134>)
 8000a44:	623b      	str	r3, [r7, #32]
	//TickType_t OUTDTime = configTICK_RATE_HZ * 480;   // 8 minutos em ticks

	//TESTE
	OUTDTime = configTICK_RATE_HZ * 480;
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <gerenciarLuzes+0x138>)
 8000a48:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <gerenciarLuzes+0x13c>)
 8000a4a:	601a      	str	r2, [r3, #0]

	TickType_t lastAltTimeA = xTaskGetTickCount();
 8000a4c:	f001 ff4c 	bl	80028e8 <xTaskGetTickCount>
 8000a50:	6378      	str	r0, [r7, #52]	; 0x34
	TickType_t lastAltTimeB = xTaskGetTickCount();
 8000a52:	f001 ff49 	bl	80028e8 <xTaskGetTickCount>
 8000a56:	6338      	str	r0, [r7, #48]	; 0x30
	TickType_t lastAltTimeC = xTaskGetTickCount();
 8000a58:	f001 ff46 	bl	80028e8 <xTaskGetTickCount>
 8000a5c:	62f8      	str	r0, [r7, #44]	; 0x2c
	//TickType_t lastAltTimeD = xTaskGetTickCount();
	lastAltTimeD = xTaskGetTickCount();
 8000a5e:	f001 ff43 	bl	80028e8 <xTaskGetTickCount>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <gerenciarLuzes+0x140>)
 8000a66:	6013      	str	r3, [r2, #0]

	//TaskStatus_t presencaTaskInfo;

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000a68:	f001 ff3e 	bl	80028e8 <xTaskGetTickCount>
 8000a6c:	61f8      	str	r0, [r7, #28]
		toClockTime(timeStamp, clockWatchBuf);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	69f8      	ldr	r0, [r7, #28]
 8000a76:	f7ff feef 	bl	8000858 <toClockTime>

		// Alternar o OUTA a cada 1 minuto
		if ((timeStamp - lastAltTimeA) >= OUTATime)
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d80c      	bhi.n	8000aa0 <gerenciarLuzes+0x70>
		{
			HAL_GPIO_TogglePin(OUTA_GPIO_Port, OUTA_Pin);
 8000a86:	2108      	movs	r1, #8
 8000a88:	483a      	ldr	r0, [pc, #232]	; (8000b74 <gerenciarLuzes+0x144>)
 8000a8a:	f000 fbf8 	bl	800127e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passou 1 minuto: Alternando LUZ A\n", clockWatchBuf);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4838      	ldr	r0, [pc, #224]	; (8000b78 <gerenciarLuzes+0x148>)
 8000a96:	f003 fc6d 	bl	8004374 <iprintf>
			lastAltTimeA = xTaskGetTickCount();
 8000a9a:	f001 ff25 	bl	80028e8 <xTaskGetTickCount>
 8000a9e:	6378      	str	r0, [r7, #52]	; 0x34
		}

		// Alternar o OUTB a cada 2 minutos
		if ((timeStamp - lastAltTimeB) >= OUTBTime)
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d80c      	bhi.n	8000ac6 <gerenciarLuzes+0x96>
		{
			HAL_GPIO_TogglePin(OUTB_GPIO_Port, OUTB_Pin);
 8000aac:	2110      	movs	r1, #16
 8000aae:	4831      	ldr	r0, [pc, #196]	; (8000b74 <gerenciarLuzes+0x144>)
 8000ab0:	f000 fbe5 	bl	800127e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passaram 2 minutos: Alternando LUZ B\n", clockWatchBuf);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4830      	ldr	r0, [pc, #192]	; (8000b7c <gerenciarLuzes+0x14c>)
 8000abc:	f003 fc5a 	bl	8004374 <iprintf>
			lastAltTimeB = xTaskGetTickCount();
 8000ac0:	f001 ff12 	bl	80028e8 <xTaskGetTickCount>
 8000ac4:	6338      	str	r0, [r7, #48]	; 0x30
		}

		// Alternar o OUTC a cada 4 minutos
		if ((timeStamp - lastAltTimeC) >= OUTCTime)
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	6a3a      	ldr	r2, [r7, #32]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d80c      	bhi.n	8000aec <gerenciarLuzes+0xbc>
		{
			HAL_GPIO_TogglePin(OUTC_GPIO_Port, OUTC_Pin);
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	4827      	ldr	r0, [pc, #156]	; (8000b74 <gerenciarLuzes+0x144>)
 8000ad6:	f000 fbd2 	bl	800127e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passaram 4 minutos: Alternando LUZ C\n", clockWatchBuf);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4827      	ldr	r0, [pc, #156]	; (8000b80 <gerenciarLuzes+0x150>)
 8000ae2:	f003 fc47 	bl	8004374 <iprintf>
			lastAltTimeC = xTaskGetTickCount();
 8000ae6:	f001 feff 	bl	80028e8 <xTaskGetTickCount>
 8000aea:	62f8      	str	r0, [r7, #44]	; 0x2c
		}

		/* Alternar o OUTD a cada 4 minutos ou se houver presença no
		 * cômodo D, ligue OUTD sem alternar, caso esteja desligado */
		notificacaoPresenca = ulTaskNotifyTake(pdTRUE, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	2000      	movs	r0, #0
 8000af2:	f002 fb95 	bl	8003220 <ulTaskGenericNotifyTake>
 8000af6:	4603      	mov	r3, r0
 8000af8:	61bb      	str	r3, [r7, #24]
		//			HAL_GPIO_WritePin(OUTD_GPIO_Port, OUTD_Pin, estadoOUTD);
		//
		//			OUTDTime = configTICK_RATE_HZ * 60;
		//		}

		if (!notificacaoPresenca && (timeStamp - lastAltTimeD) >= OUTDTime)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d12a      	bne.n	8000b56 <gerenciarLuzes+0x126>
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <gerenciarLuzes+0x140>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	1ad2      	subs	r2, r2, r3
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <gerenciarLuzes+0x138>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d322      	bcc.n	8000b56 <gerenciarLuzes+0x126>
		{
			estadoOUTD = ~estadoOUTD;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <gerenciarLuzes+0x154>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <gerenciarLuzes+0x154>)
 8000b1c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTD_GPIO_Port, OUTD_Pin, estadoOUTD);
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <gerenciarLuzes+0x154>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <gerenciarLuzes+0x144>)
 8000b2a:	f000 fb8f 	bl	800124c <HAL_GPIO_WritePin>
			printf("[TASK gerLuz] [time: %s] Passaram %lu minutos: Alternando LUZ D\n",
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <gerenciarLuzes+0x138>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <gerenciarLuzes+0x158>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	0b9a      	lsrs	r2, r3, #14
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <gerenciarLuzes+0x15c>)
 8000b42:	f003 fc17 	bl	8004374 <iprintf>
					clockWatchBuf, (OUTDTime / configTICK_RATE_HZ) / 60);
			lastAltTimeD = xTaskGetTickCount();
 8000b46:	f001 fecf 	bl	80028e8 <xTaskGetTickCount>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <gerenciarLuzes+0x140>)
 8000b4e:	6013      	str	r3, [r2, #0]

			OUTDTime = configTICK_RATE_HZ * 480;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <gerenciarLuzes+0x138>)
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <gerenciarLuzes+0x13c>)
 8000b54:	601a      	str	r2, [r3, #0]
		}

		vTaskDelay(100 * (configTICK_RATE_HZ / 1000));
 8000b56:	2064      	movs	r0, #100	; 0x64
 8000b58:	f001 fcbc 	bl	80024d4 <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000b5c:	e784      	b.n	8000a68 <gerenciarLuzes+0x38>
 8000b5e:	bf00      	nop
 8000b60:	0001d4c0 	.word	0x0001d4c0
 8000b64:	0003a980 	.word	0x0003a980
 8000b68:	200000b4 	.word	0x200000b4
 8000b6c:	00075300 	.word	0x00075300
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	40020000 	.word	0x40020000
 8000b78:	08005ef4 	.word	0x08005ef4
 8000b7c:	08005f30 	.word	0x08005f30
 8000b80:	08005f70 	.word	0x08005f70
 8000b84:	200000b8 	.word	0x200000b8
 8000b88:	45e7b273 	.word	0x45e7b273
 8000b8c:	08005fb0 	.word	0x08005fb0

08000b90 <ligarLuzPresenca>:
/* Tarefas Aperiódicas */
void ligarAlarme(void* pvParameters)
{}

void ligarLuzPresenca(void* pvParameters)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	TaskStatus_t presencaTaskInfo;

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000b98:	f001 fea6 	bl	80028e8 <xTaskGetTickCount>
 8000b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
		toClockTime(timeStamp, clockWatchBuf);
 8000b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ba6:	f7ff fe57 	bl	8000858 <toClockTime>

		notificacaoPresenca = ulTaskNotifyTake(pdTRUE, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f002 fb36 	bl	8003220 <ulTaskGenericNotifyTake>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
		vTaskGetInfo(taskPresenHandle, &presencaTaskInfo, pdTRUE, eInvalid);
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <ligarLuzPresenca+0x90>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f107 0108 	add.w	r1, r7, #8
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f002 fa60 	bl	8003088 <vTaskGetInfo>

		if(notificacaoPresenca && !estadoOUTD)
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d023      	beq.n	8000c16 <ligarLuzPresenca+0x86>
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <ligarLuzPresenca+0x94>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d11e      	bne.n	8000c16 <ligarLuzPresenca+0x86>
		{
			//Reiniciar o último registro de tempo
			lastAltTimeD = xTaskGetTickCount();
 8000bd8:	f001 fe86 	bl	80028e8 <xTaskGetTickCount>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <ligarLuzPresenca+0x98>)
 8000be0:	6013      	str	r3, [r2, #0]

			estadoOUTD = ~estadoOUTD;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <ligarLuzPresenca+0x94>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <ligarLuzPresenca+0x94>)
 8000bee:	701a      	strb	r2, [r3, #0]
			printf("[TASK luzPre] [time: %s] Notificação de [%s] -> LIGAR Luz D\n",
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <ligarLuzPresenca+0x9c>)
 8000bfa:	f003 fbbb 	bl	8004374 <iprintf>
					clockWatchBuf, presencaTaskInfo.pcTaskName);
			HAL_GPIO_WritePin(OUTD_GPIO_Port, OUTD_Pin, estadoOUTD);
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <ligarLuzPresenca+0x94>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <ligarLuzPresenca+0xa0>)
 8000c0a:	f000 fb1f 	bl	800124c <HAL_GPIO_WritePin>

			OUTDTime = configTICK_RATE_HZ * 60;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <ligarLuzPresenca+0xa4>)
 8000c10:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c14:	601a      	str	r2, [r3, #0]
		}

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000c16:	20fa      	movs	r0, #250	; 0xfa
 8000c18:	f001 fc5c 	bl	80024d4 <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000c1c:	e7bc      	b.n	8000b98 <ligarLuzPresenca+0x8>
 8000c1e:	bf00      	nop
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	200000b8 	.word	0x200000b8
 8000c28:	200000b0 	.word	0x200000b0
 8000c2c:	08006068 	.word	0x08006068
 8000c30:	40020000 	.word	0x40020000
 8000c34:	200000b4 	.word	0x200000b4

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff fde7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f003 fb4b 	bl	8004300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc93 	bl	8000594 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c7c:	08006244 	.word	0x08006244
  ldr r2, =_sbss
 8000c80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c84:	20012f20 	.word	0x20012f20

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8f9 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fd5a 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f903 	bl	8000efa <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 f8d9 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000bc 	.word	0x200000bc

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff47 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5c 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb0 	bl	8000e68 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e159      	b.n	80011e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8148 	bne.w	80011de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80a2 	beq.w	80011de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a56      	ldr	r2, [pc, #344]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b54      	ldr	r3, [pc, #336]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_GPIO_Init+0x2ec>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a49      	ldr	r2, [pc, #292]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x202>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_GPIO_Init+0x2f4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x1fe>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a47      	ldr	r2, [pc, #284]	; (800120c <HAL_GPIO_Init+0x2f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x1fa>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a46      	ldr	r2, [pc, #280]	; (8001210 <HAL_GPIO_Init+0x2fc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x1f6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a45      	ldr	r2, [pc, #276]	; (8001214 <HAL_GPIO_Init+0x300>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x1f2>
 8001102:	2304      	movs	r3, #4
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001106:	2307      	movs	r3, #7
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x204>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x204>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x2ec>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_GPIO_Init+0x304>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x304>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x304>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a24      	ldr	r2, [pc, #144]	; (8001218 <HAL_GPIO_Init+0x304>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x304>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ae:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_GPIO_Init+0x304>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x304>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_GPIO_Init+0x304>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f aea2 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001290:	887a      	ldrh	r2, [r7, #2]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43d9      	mvns	r1, r3
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	400b      	ands	r3, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e267      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d075      	beq.n	80013be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d00c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012f6:	d10b      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d05b      	beq.n	80013bc <HAL_RCC_OscConfig+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d157      	bne.n	80013bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x74>
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a75      	ldr	r2, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x98>
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6f      	ldr	r2, [pc, #444]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6c      	ldr	r2, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a65      	ldr	r2, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fce0 	bl	8000d30 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcdc 	bl	8000d30 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e207      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xc0>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fccc 	bl	8000d30 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fcc8 	bl	8000d30 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1f3      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0xe8>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fc81 	bl	8000d30 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc7d 	bl	8000d30 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1a8      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4925      	ldr	r1, [pc, #148]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc60 	bl	8000d30 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc5c 	bl	8000d30 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e187      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d016      	beq.n	80014d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fc40 	bl	8000d30 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc3c 	bl	8000d30 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e167      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x200>
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc29 	bl	8000d30 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc25 	bl	8000d30 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e150      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8097 	beq.w	8001648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbe5 	bl	8000d30 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fbe1 	bl	8000d30 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e10c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x2ea>
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x30c>
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5b      	ldr	r2, [pc, #364]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	4b55      	ldr	r3, [pc, #340]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a54      	ldr	r2, [pc, #336]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fba6 	bl	8000d30 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fba2 	bl	8000d30 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0cb      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0ee      	beq.n	80015e8 <HAL_RCC_OscConfig+0x334>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fb90 	bl	8000d30 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fb8c 	bl	8000d30 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b5      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a1 	beq.w	8001794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d05c      	beq.n	8001718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d141      	bne.n	80016ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb60 	bl	8000d30 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb5c 	bl	8000d30 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e087      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	491b      	ldr	r1, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb35 	bl	8000d30 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fb31 	bl	8000d30 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e05c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x416>
 80016e8:	e054      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb1e 	bl	8000d30 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb1a 	bl	8000d30 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x444>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e038      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000
 800172c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d028      	beq.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d121      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d11a      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d111      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff fa4c 	bl	8000d30 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff fa48 	bl	8000d30 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f9c0 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	080060c0 	.word	0x080060c0
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001974:	b090      	sub	sp, #64	; 0x40
 8001976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
 800197c:	2300      	movs	r3, #0
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d00d      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001994:	2b08      	cmp	r3, #8
 8001996:	f200 80a1 	bhi.w	8001adc <HAL_RCC_GetSysClockFreq+0x16c>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x34>
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x3a>
 80019a2:	e09b      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019a8:	e09b      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ae:	e098      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d028      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	2200      	movs	r2, #0
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	627a      	str	r2, [r7, #36]	; 0x24
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019d8:	2100      	movs	r1, #0
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019dc:	fb03 f201 	mul.w	r2, r3, r1
 80019e0:	2300      	movs	r3, #0
 80019e2:	fb00 f303 	mul.w	r3, r0, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ea:	fba0 1202 	umull	r1, r2, r0, r2
 80019ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f0:	460a      	mov	r2, r1
 80019f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80019f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f6:	4413      	add	r3, r2
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fc:	2200      	movs	r2, #0
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	61fa      	str	r2, [r7, #28]
 8001a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a0a:	f7fe fc41 	bl	8000290 <__aeabi_uldivmod>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4613      	mov	r3, r2
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a16:	e053      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	617a      	str	r2, [r7, #20]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a2a:	f04f 0b00 	mov.w	fp, #0
 8001a2e:	4652      	mov	r2, sl
 8001a30:	465b      	mov	r3, fp
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	0159      	lsls	r1, r3, #5
 8001a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a40:	0150      	lsls	r0, r2, #5
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	ebb2 080a 	subs.w	r8, r2, sl
 8001a4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a62:	ebb2 0408 	subs.w	r4, r2, r8
 8001a66:	eb63 0509 	sbc.w	r5, r3, r9
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	00eb      	lsls	r3, r5, #3
 8001a74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a78:	00e2      	lsls	r2, r4, #3
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	eb14 030a 	adds.w	r3, r4, sl
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	eb45 030b 	adc.w	r3, r5, fp
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a96:	4629      	mov	r1, r5
 8001a98:	028b      	lsls	r3, r1, #10
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	028a      	lsls	r2, r1, #10
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ab4:	f7fe fbec 	bl	8000290 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3740      	adds	r7, #64	; 0x40
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	017d7840 	.word	0x017d7840

08001afc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0208 	add.w	r2, r3, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 0208 	add.w	r2, r3, #8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f103 0208 	add.w	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b6c:	d103      	bne.n	8001b76 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e00c      	b.n	8001b90 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3308      	adds	r3, #8
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e002      	b.n	8001b84 <vListInsert+0x2e>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d2f6      	bcs.n	8001b7e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d103      	bne.n	8001bfc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	1e5a      	subs	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001c26:	2301      	movs	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c46:	bf00      	nop
 8001c48:	e7fe      	b.n	8001c48 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05d      	beq.n	8001d0c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d059      	beq.n	8001d0c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	2100      	movs	r1, #0
 8001c62:	fba3 2302 	umull	r2, r3, r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d000      	beq.n	8001c6c <xQueueGenericReset+0x50>
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d14c      	bne.n	8001d0c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001c72:	f002 f891 	bl	8003d98 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	441a      	add	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	441a      	add	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	22ff      	movs	r2, #255	; 0xff
 8001cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	22ff      	movs	r2, #255	; 0xff
 8001cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d114      	bne.n	8001cf2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01a      	beq.n	8001d06 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	3310      	adds	r3, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fff3 	bl	8002cc0 <xTaskRemoveFromEventList>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d012      	beq.n	8001d06 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <xQueueGenericReset+0x11c>)
 8001ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	e009      	b.n	8001d06 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff00 	bl	8001afc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	3324      	adds	r3, #36	; 0x24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fefb 	bl	8001afc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001d06:	f002 f877 	bl	8003df8 <vPortExitCritical>
 8001d0a:	e001      	b.n	8001d10 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <xQueueGenericReset+0x110>
        __asm volatile
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	60bb      	str	r3, [r7, #8]
    }
 8001d28:	bf00      	nop
 8001d2a:	e7fe      	b.n	8001d2a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000ed04 	.word	0xe000ed04

08001d3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	4613      	mov	r3, r2
 8001d48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d02e      	beq.n	8001db2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001d54:	2100      	movs	r1, #0
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d000      	beq.n	8001d64 <xQueueGenericCreate+0x28>
 8001d62:	2101      	movs	r1, #1
 8001d64:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d123      	bne.n	8001db2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001d72:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001d76:	d81c      	bhi.n	8001db2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3350      	adds	r3, #80	; 0x50
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 f8e8 	bl	8003f5c <pvPortMalloc>
 8001d8c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3350      	adds	r3, #80	; 0x50
 8001d9c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f814 	bl	8001dd8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001db0:	e00d      	b.n	8001dce <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <xQueueGenericCreate+0x92>
        __asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	613b      	str	r3, [r7, #16]
    }
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001dce:	69fb      	ldr	r3, [r7, #28]
    }
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e002      	b.n	8001dfa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e06:	2101      	movs	r1, #1
 8001e08:	69b8      	ldr	r0, [r7, #24]
 8001e0a:	f7ff ff07 	bl	8001c1c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <xQueueReceive+0x30>
        __asm volatile
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	623b      	str	r3, [r7, #32]
    }
 8001e4c:	bf00      	nop
 8001e4e:	e7fe      	b.n	8001e4e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <xQueueReceive+0x3e>
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <xQueueReceive+0x42>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <xQueueReceive+0x44>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <xQueueReceive+0x5e>
        __asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	61fb      	str	r3, [r7, #28]
    }
 8001e7a:	bf00      	nop
 8001e7c:	e7fe      	b.n	8001e7c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e7e:	f001 f9b1 	bl	80031e4 <xTaskGetSchedulerState>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <xQueueReceive+0x6e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <xQueueReceive+0x72>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueReceive+0x74>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <xQueueReceive+0x8e>
        __asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	61bb      	str	r3, [r7, #24]
    }
 8001eaa:	bf00      	nop
 8001eac:	e7fe      	b.n	8001eac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001eae:	f001 ff73 	bl	8003d98 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01f      	beq.n	8001efe <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ec2:	f000 f88d 	bl	8001fe0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00f      	beq.n	8001ef6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	3310      	adds	r3, #16
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fef0 	bl	8002cc0 <xTaskRemoveFromEventList>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <xQueueReceive+0x1bc>)
 8001ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001ef6:	f001 ff7f 	bl	8003df8 <vPortExitCritical>
                return pdPASS;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e069      	b.n	8001fd2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f04:	f001 ff78 	bl	8003df8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e062      	b.n	8001fd2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 ffa8 	bl	8002e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f20:	f001 ff6a 	bl	8003df8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f24:	f000 fbd6 	bl	80026d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f28:	f001 ff36 	bl	8003d98 <vPortEnterCritical>
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d103      	bne.n	8001f42 <xQueueReceive+0x122>
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4e:	d103      	bne.n	8001f58 <xQueueReceive+0x138>
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f58:	f001 ff4e 	bl	8003df8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f5c:	1d3a      	adds	r2, r7, #4
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 ff97 	bl	8002e98 <xTaskCheckForTimeOut>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d123      	bne.n	8001fb8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f72:	f000 f8ad 	bl	80020d0 <prvIsQueueEmpty>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d017      	beq.n	8001fac <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	3324      	adds	r3, #36	; 0x24
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fe31 	bl	8002bec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f8c:	f000 f84e 	bl	800202c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f90:	f000 fbae 	bl	80026f0 <xTaskResumeAll>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d189      	bne.n	8001eae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <xQueueReceive+0x1bc>)
 8001f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	e780      	b.n	8001eae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fae:	f000 f83d 	bl	800202c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fb2:	f000 fb9d 	bl	80026f0 <xTaskResumeAll>
 8001fb6:	e77a      	b.n	8001eae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fba:	f000 f837 	bl	800202c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fbe:	f000 fb97 	bl	80026f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc4:	f000 f884 	bl	80020d0 <prvIsQueueEmpty>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f43f af6f 	beq.w	8001eae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001fd0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000ed04 	.word	0xe000ed04

08001fe0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d018      	beq.n	8002024 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	441a      	add	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d303      	bcc.n	8002014 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	461a      	mov	r2, r3
 800201e:	6838      	ldr	r0, [r7, #0]
 8002020:	f002 f992 	bl	8004348 <memcpy>
    }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002034:	f001 feb0 	bl	8003d98 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800203e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002040:	e011      	b.n	8002066 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3324      	adds	r3, #36	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fe36 	bl	8002cc0 <xTaskRemoveFromEventList>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800205a:	f000 ff83 	bl	8002f64 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3b01      	subs	r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dce9      	bgt.n	8002042 <prvUnlockQueue+0x16>
 800206e:	e000      	b.n	8002072 <prvUnlockQueue+0x46>
                    break;
 8002070:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800207a:	f001 febd 	bl	8003df8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800207e:	f001 fe8b 	bl	8003d98 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002088:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800208a:	e011      	b.n	80020b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3310      	adds	r3, #16
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fe11 	bl	8002cc0 <xTaskRemoveFromEventList>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80020a4:	f000 ff5e 	bl	8002f64 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80020b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	dce9      	bgt.n	800208c <prvUnlockQueue+0x60>
 80020b8:	e000      	b.n	80020bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80020ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80020c4:	f001 fe98 	bl	8003df8 <vPortExitCritical>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020d8:	f001 fe5e 	bl	8003d98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e001      	b.n	80020ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020ee:	f001 fe83 	bl	8003df8 <vPortExitCritical>

    return xReturn;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	60fb      	str	r3, [r7, #12]
    }
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d024      	beq.n	8002176 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e01e      	b.n	8002170 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <vQueueAddToRegistry+0x98>)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d105      	bne.n	800214e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <vQueueAddToRegistry+0x98>)
 8002148:	4413      	add	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
                    break;
 800214c:	e013      	b.n	8002176 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <vQueueAddToRegistry+0x6e>
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <vQueueAddToRegistry+0x98>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <vQueueAddToRegistry+0x98>)
 8002166:	4413      	add	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b07      	cmp	r3, #7
 8002174:	d9dd      	bls.n	8002132 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200000c0 	.word	0x200000c0

08002198 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80021a8:	f001 fdf6 	bl	8003d98 <vPortEnterCritical>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b8:	d103      	bne.n	80021c2 <vQueueWaitForMessageRestricted+0x2a>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ce:	d103      	bne.n	80021d8 <vQueueWaitForMessageRestricted+0x40>
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d8:	f001 fe0e 	bl	8003df8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3324      	adds	r3, #36	; 0x24
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fd21 	bl	8002c34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff1a 	bl	800202c <prvUnlockQueue>
    }
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af04      	add	r7, sp, #16
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fea1 	bl	8003f5c <pvPortMalloc>
 800221a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d013      	beq.n	800224a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002222:	2058      	movs	r0, #88	; 0x58
 8002224:	f001 fe9a 	bl	8003f5c <pvPortMalloc>
 8002228:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002230:	2258      	movs	r2, #88	; 0x58
 8002232:	2100      	movs	r1, #0
 8002234:	69f8      	ldr	r0, [r7, #28]
 8002236:	f002 f895 	bl	8004364 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
 8002240:	e005      	b.n	800224e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f001 ff44 	bl	80040d0 <vPortFree>
 8002248:	e001      	b.n	800224e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	2300      	movs	r3, #0
 8002258:	9303      	str	r3, [sp, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f80e 	bl	800228c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002270:	69f8      	ldr	r0, [r7, #28]
 8002272:	f000 f899 	bl	80023a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	e002      	b.n	8002282 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002280:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002282:	69bb      	ldr	r3, [r7, #24]
    }
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	21a5      	movs	r1, #165	; 0xa5
 80022a6:	f002 f85d 	bl	8004364 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022b4:	3b01      	subs	r3, #1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f023 0307 	bic.w	r3, r3, #7
 80022c2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	617b      	str	r3, [r7, #20]
    }
 80022e0:	bf00      	nop
 80022e2:	e7fe      	b.n	80022e2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01e      	beq.n	8002328 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e012      	b.n	8002316 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	7819      	ldrb	r1, [r3, #0]
 80022f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	3334      	adds	r3, #52	; 0x34
 8002300:	460a      	mov	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3301      	adds	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	2b09      	cmp	r3, #9
 800231a:	d9e9      	bls.n	80022f0 <prvInitialiseNewTask+0x64>
 800231c:	e000      	b.n	8002320 <prvInitialiseNewTask+0x94>
            {
                break;
 800231e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	2b04      	cmp	r3, #4
 800232c:	d90a      	bls.n	8002344 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	613b      	str	r3, [r7, #16]
    }
 8002340:	bf00      	nop
 8002342:	e7fe      	b.n	8002342 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	2b04      	cmp	r3, #4
 8002348:	d901      	bls.n	800234e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800234a:	2304      	movs	r3, #4
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002358:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	3304      	adds	r3, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fbec 	bl	8001b3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	3318      	adds	r3, #24
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fbe7 	bl	8001b3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002372:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	f1c3 0205 	rsb	r2, r3, #5
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	69b8      	ldr	r0, [r7, #24]
 800238a:	f001 fbd7 	bl	8003b3c <pxPortInitialiseStack>
 800238e:	4602      	mov	r2, r0
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023b0:	f001 fcf2 	bl	8003d98 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <prvAddNewTaskToReadyList+0x110>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <prvAddNewTaskToReadyList+0x110>)
 80023bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <prvAddNewTaskToReadyList+0x114>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <prvAddNewTaskToReadyList+0x114>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <prvAddNewTaskToReadyList+0x110>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d110      	bne.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023d4:	f000 fdea 	bl	8002fac <prvInitialiseTaskLists>
 80023d8:	e00d      	b.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <prvAddNewTaskToReadyList+0x118>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <prvAddNewTaskToReadyList+0x114>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d802      	bhi.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023f0:	4a32      	ldr	r2, [pc, #200]	; (80024bc <prvAddNewTaskToReadyList+0x114>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <prvAddNewTaskToReadyList+0x11c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <prvAddNewTaskToReadyList+0x11c>)
 80023fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <prvAddNewTaskToReadyList+0x11c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <prvAddNewTaskToReadyList+0x120>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <prvAddNewTaskToReadyList+0x120>)
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	492b      	ldr	r1, [pc, #172]	; (80024cc <prvAddNewTaskToReadyList+0x124>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	3204      	adds	r2, #4
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <prvAddNewTaskToReadyList+0x124>)
 800245e:	441a      	add	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4918      	ldr	r1, [pc, #96]	; (80024cc <prvAddNewTaskToReadyList+0x124>)
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	4814      	ldr	r0, [pc, #80]	; (80024cc <prvAddNewTaskToReadyList+0x124>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4403      	add	r3, r0
 8002484:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002486:	f001 fcb7 	bl	8003df8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <prvAddNewTaskToReadyList+0x118>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <prvAddNewTaskToReadyList+0x114>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	429a      	cmp	r2, r3
 800249e:	d207      	bcs.n	80024b0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <prvAddNewTaskToReadyList+0x128>)
 80024a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200001d8 	.word	0x200001d8
 80024bc:	20000100 	.word	0x20000100
 80024c0:	200001e4 	.word	0x200001e4
 80024c4:	200001f4 	.word	0x200001f4
 80024c8:	200001e0 	.word	0x200001e0
 80024cc:	20000104 	.word	0x20000104
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <vTaskDelay+0x60>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <vTaskDelay+0x30>
        __asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	60bb      	str	r3, [r7, #8]
    }
 8002500:	bf00      	nop
 8002502:	e7fe      	b.n	8002502 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002504:	f000 f8e6 	bl	80026d4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002508:	2100      	movs	r1, #0
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f001 f812 	bl	8003534 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002510:	f000 f8ee 	bl	80026f0 <xTaskResumeAll>
 8002514:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <vTaskDelay+0x64>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000200 	.word	0x20000200
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <eTaskGetState+0x28>
        __asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	60fb      	str	r3, [r7, #12]
    }
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <eTaskGetState+0xe0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	429a      	cmp	r2, r3
 800256c:	d103      	bne.n	8002576 <eTaskGetState+0x3a>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002574:	e04b      	b.n	800260e <eTaskGetState+0xd2>
        }
        else
        {
            taskENTER_CRITICAL();
 8002576:	f001 fc0f 	bl	8003d98 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <eTaskGetState+0xe4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <eTaskGetState+0xe8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 800258c:	f001 fc34 	bl	8003df8 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	d003      	beq.n	80025a0 <eTaskGetState+0x64>
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d103      	bne.n	80025a8 <eTaskGetState+0x6c>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025a6:	e032      	b.n	800260e <eTaskGetState+0xd2>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <eTaskGetState+0xec>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d120      	bne.n	80025f2 <eTaskGetState+0xb6>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d118      	bne.n	80025ea <eTaskGetState+0xae>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	e00e      	b.n	80025e2 <eTaskGetState+0xa6>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	4413      	add	r3, r2
 80025ca:	3354      	adds	r3, #84	; 0x54
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d103      	bne.n	80025dc <eTaskGetState+0xa0>
                                {
                                    eReturn = eBlocked;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    break;
 80025da:	e018      	b.n	800260e <eTaskGetState+0xd2>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	3301      	adds	r3, #1
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	dded      	ble.n	80025c4 <eTaskGetState+0x88>
 80025e8:	e011      	b.n	800260e <eTaskGetState+0xd2>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80025ea:	2302      	movs	r3, #2
 80025ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025f0:	e00d      	b.n	800260e <eTaskGetState+0xd2>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <eTaskGetState+0xf0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d002      	beq.n	8002600 <eTaskGetState+0xc4>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <eTaskGetState+0xcc>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8002600:	2304      	movs	r3, #4
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002606:	e002      	b.n	800260e <eTaskGetState+0xd2>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }

        return eReturn;
 800260e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002612:	4618      	mov	r0, r3
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000100 	.word	0x20000100
 8002620:	20000190 	.word	0x20000190
 8002624:	20000194 	.word	0x20000194
 8002628:	200001c4 	.word	0x200001c4
 800262c:	200001ac 	.word	0x200001ac

08002630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <vTaskStartScheduler+0x88>)
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2300      	movs	r3, #0
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2300      	movs	r3, #0
 8002640:	2282      	movs	r2, #130	; 0x82
 8002642:	491e      	ldr	r1, [pc, #120]	; (80026bc <vTaskStartScheduler+0x8c>)
 8002644:	481e      	ldr	r0, [pc, #120]	; (80026c0 <vTaskStartScheduler+0x90>)
 8002646:	f7ff fddb 	bl	8002200 <xTaskCreate>
 800264a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002652:	f000 ffef 	bl	8003634 <xTimerCreateTimerTask>
 8002656:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d116      	bne.n	800268c <vTaskStartScheduler+0x5c>
        __asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	60bb      	str	r3, [r7, #8]
    }
 8002670:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <vTaskStartScheduler+0x94>)
 8002674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002678:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <vTaskStartScheduler+0x98>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <vTaskStartScheduler+0x9c>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002686:	f001 fae5 	bl	8003c54 <xPortStartScheduler>
 800268a:	e00e      	b.n	80026aa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002692:	d10a      	bne.n	80026aa <vTaskStartScheduler+0x7a>
        __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	607b      	str	r3, [r7, #4]
    }
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <vTaskStartScheduler+0xa0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200001fc 	.word	0x200001fc
 80026bc:	080060a8 	.word	0x080060a8
 80026c0:	08002f7d 	.word	0x08002f7d
 80026c4:	200001f8 	.word	0x200001f8
 80026c8:	200001e4 	.word	0x200001e4
 80026cc:	200001dc 	.word	0x200001dc
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <vTaskSuspendAll+0x18>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a03      	ldr	r2, [pc, #12]	; (80026ec <vTaskSuspendAll+0x18>)
 80026e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	20000200 	.word	0x20000200

080026f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026fe:	4b71      	ldr	r3, [pc, #452]	; (80028c4 <xTaskResumeAll+0x1d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <xTaskResumeAll+0x2c>
        __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	607b      	str	r3, [r7, #4]
    }
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800271c:	f001 fb3c 	bl	8003d98 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <xTaskResumeAll+0x1d4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3b01      	subs	r3, #1
 8002726:	4a67      	ldr	r2, [pc, #412]	; (80028c4 <xTaskResumeAll+0x1d4>)
 8002728:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272a:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <xTaskResumeAll+0x1d4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80c0 	bne.w	80028b4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <xTaskResumeAll+0x1d8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80bb 	beq.w	80028b4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800273e:	e08a      	b.n	8002856 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002740:	4b62      	ldr	r3, [pc, #392]	; (80028cc <xTaskResumeAll+0x1dc>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	6a12      	ldr	r2, [r2, #32]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	69d2      	ldr	r2, [r2, #28]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3318      	adds	r3, #24
 800276a:	429a      	cmp	r2, r3
 800276c:	d103      	bne.n	8002776 <xTaskResumeAll+0x86>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1e5a      	subs	r2, r3, #1
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	68d2      	ldr	r2, [r2, #12]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	6892      	ldr	r2, [r2, #8]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3304      	adds	r3, #4
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d103      	bne.n	80027b4 <xTaskResumeAll+0xc4>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <xTaskResumeAll+0x1e0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <xTaskResumeAll+0x1e0>)
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	493e      	ldr	r1, [pc, #248]	; (80028d4 <xTaskResumeAll+0x1e4>)
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3304      	adds	r3, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	3204      	adds	r2, #4
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <xTaskResumeAll+0x1e4>)
 800281a:	441a      	add	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	492b      	ldr	r1, [pc, #172]	; (80028d4 <xTaskResumeAll+0x1e4>)
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	4827      	ldr	r0, [pc, #156]	; (80028d4 <xTaskResumeAll+0x1e4>)
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4403      	add	r3, r0
 8002840:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <xTaskResumeAll+0x1e8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <xTaskResumeAll+0x1ec>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <xTaskResumeAll+0x1dc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f af70 	bne.w	8002740 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002866:	f000 fca1 	bl	80031ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <xTaskResumeAll+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002876:	f000 f847 	bl	8002908 <xTaskIncrementTick>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <xTaskResumeAll+0x1ec>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3b01      	subs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f1      	bne.n	8002876 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <xTaskResumeAll+0x1f0>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <xTaskResumeAll+0x1ec>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <xTaskResumeAll+0x1f4>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028b4:	f001 faa0 	bl	8003df8 <vPortExitCritical>

    return xAlreadyYielded;
 80028b8:	69bb      	ldr	r3, [r7, #24]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000200 	.word	0x20000200
 80028c8:	200001d8 	.word	0x200001d8
 80028cc:	20000198 	.word	0x20000198
 80028d0:	200001e0 	.word	0x200001e0
 80028d4:	20000104 	.word	0x20000104
 80028d8:	20000100 	.word	0x20000100
 80028dc:	200001ec 	.word	0x200001ec
 80028e0:	200001e8 	.word	0x200001e8
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <xTaskGetTickCount+0x1c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200001dc 	.word	0x200001dc

08002908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <xTaskIncrementTick+0x200>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80ec 	bne.w	8002af4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800291c:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <xTaskIncrementTick+0x204>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002924:	4a79      	ldr	r2, [pc, #484]	; (8002b0c <xTaskIncrementTick+0x204>)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d120      	bne.n	8002972 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002930:	4b77      	ldr	r3, [pc, #476]	; (8002b10 <xTaskIncrementTick+0x208>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <xTaskIncrementTick+0x48>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	607b      	str	r3, [r7, #4]
    }
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <xTaskIncrementTick+0x46>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <xTaskIncrementTick+0x208>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <xTaskIncrementTick+0x20c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6d      	ldr	r2, [pc, #436]	; (8002b10 <xTaskIncrementTick+0x208>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4a6d      	ldr	r2, [pc, #436]	; (8002b14 <xTaskIncrementTick+0x20c>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b6c      	ldr	r3, [pc, #432]	; (8002b18 <xTaskIncrementTick+0x210>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a6b      	ldr	r2, [pc, #428]	; (8002b18 <xTaskIncrementTick+0x210>)
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	f000 fc1d 	bl	80031ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <xTaskIncrementTick+0x214>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	429a      	cmp	r2, r3
 800297a:	f0c0 80a6 	bcc.w	8002aca <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297e:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <xTaskIncrementTick+0x208>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002988:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <xTaskIncrementTick+0x214>)
 800298a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800298e:	601a      	str	r2, [r3, #0]
                    break;
 8002990:	e09b      	b.n	8002aca <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <xTaskIncrementTick+0x208>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029a2:	6a3a      	ldr	r2, [r7, #32]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d203      	bcs.n	80029b2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029aa:	4a5c      	ldr	r2, [pc, #368]	; (8002b1c <xTaskIncrementTick+0x214>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80029b0:	e08b      	b.n	8002aca <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	68d2      	ldr	r2, [r2, #12]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	3304      	adds	r3, #4
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d103      	bne.n	80029e0 <xTaskIncrementTick+0xd8>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01e      	beq.n	8002a36 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	6a12      	ldr	r2, [r2, #32]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	69d2      	ldr	r2, [r2, #28]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3318      	adds	r3, #24
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d103      	bne.n	8002a26 <xTaskIncrementTick+0x11e>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <xTaskIncrementTick+0x218>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <xTaskIncrementTick+0x218>)
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	4935      	ldr	r1, [pc, #212]	; (8002b24 <xTaskIncrementTick+0x21c>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3304      	adds	r3, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	3204      	adds	r2, #4
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1d1a      	adds	r2, r3, #4
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <xTaskIncrementTick+0x21c>)
 8002a8c:	441a      	add	r2, r3
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4923      	ldr	r1, [pc, #140]	; (8002b24 <xTaskIncrementTick+0x21c>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1c59      	adds	r1, r3, #1
 8002aa6:	481f      	ldr	r0, [pc, #124]	; (8002b24 <xTaskIncrementTick+0x21c>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4403      	add	r3, r0
 8002ab2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <xTaskIncrementTick+0x220>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f67f af5d 	bls.w	800297e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac8:	e759      	b.n	800297e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <xTaskIncrementTick+0x220>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4914      	ldr	r1, [pc, #80]	; (8002b24 <xTaskIncrementTick+0x21c>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d901      	bls.n	8002ae6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <xTaskIncrementTick+0x224>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	e004      	b.n	8002afe <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <xTaskIncrementTick+0x228>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <xTaskIncrementTick+0x228>)
 8002afc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000200 	.word	0x20000200
 8002b0c:	200001dc 	.word	0x200001dc
 8002b10:	20000190 	.word	0x20000190
 8002b14:	20000194 	.word	0x20000194
 8002b18:	200001f0 	.word	0x200001f0
 8002b1c:	200001f8 	.word	0x200001f8
 8002b20:	200001e0 	.word	0x200001e0
 8002b24:	20000104 	.word	0x20000104
 8002b28:	20000100 	.word	0x20000100
 8002b2c:	200001ec 	.word	0x200001ec
 8002b30:	200001e8 	.word	0x200001e8

08002b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <vTaskSwitchContext+0xa4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <vTaskSwitchContext+0xa8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002b48:	e03f      	b.n	8002bca <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <vTaskSwitchContext+0xa8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <vTaskSwitchContext+0xac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	f1c3 031f 	rsb	r3, r3, #31
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	491f      	ldr	r1, [pc, #124]	; (8002be4 <vTaskSwitchContext+0xb0>)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	607b      	str	r3, [r7, #4]
    }
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vTaskSwitchContext+0x5a>
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <vTaskSwitchContext+0xb0>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d104      	bne.n	8002bc0 <vTaskSwitchContext+0x8c>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <vTaskSwitchContext+0xb4>)
 8002bc8:	6013      	str	r3, [r2, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000200 	.word	0x20000200
 8002bdc:	200001ec 	.word	0x200001ec
 8002be0:	200001e0 	.word	0x200001e0
 8002be4:	20000104 	.word	0x20000104
 8002be8:	20000100 	.word	0x20000100

08002bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	60fb      	str	r3, [r7, #12]
    }
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <vTaskPlaceOnEventList+0x44>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3318      	adds	r3, #24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe ff9b 	bl	8001b56 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c20:	2101      	movs	r1, #1
 8002c22:	6838      	ldr	r0, [r7, #0]
 8002c24:	f000 fc86 	bl	8003534 <prvAddCurrentTaskToDelayedList>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000100 	.word	0x20000100

08002c34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	613b      	str	r3, [r7, #16]
    }
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	61da      	str	r2, [r3, #28]
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	621a      	str	r2, [r3, #32]
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	3218      	adds	r2, #24
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f103 0218 	add.w	r2, r3, #24
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	f000 fc41 	bl	8003534 <prvAddCurrentTaskToDelayedList>
    }
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000100 	.word	0x20000100

08002cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	60fb      	str	r3, [r7, #12]
    }
 8002ce8:	bf00      	nop
 8002cea:	e7fe      	b.n	8002cea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	6a12      	ldr	r2, [r2, #32]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	69d2      	ldr	r2, [r2, #28]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d103      	bne.n	8002d1a <xTaskRemoveFromEventList+0x5a>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <xTaskRemoveFromEventList+0x194>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d15e      	bne.n	8002df0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	68d2      	ldr	r2, [r2, #12]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	3304      	adds	r3, #4
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d103      	bne.n	8002d60 <xTaskRemoveFromEventList+0xa0>
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2200      	movs	r2, #0
 8002d64:	615a      	str	r2, [r3, #20]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1e5a      	subs	r2, r3, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <xTaskRemoveFromEventList+0x198>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <xTaskRemoveFromEventList+0x198>)
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4935      	ldr	r1, [pc, #212]	; (8002e5c <xTaskRemoveFromEventList+0x19c>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	3304      	adds	r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	3204      	adds	r2, #4
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <xTaskRemoveFromEventList+0x19c>)
 8002dc6:	441a      	add	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4922      	ldr	r1, [pc, #136]	; (8002e5c <xTaskRemoveFromEventList+0x19c>)
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	481e      	ldr	r0, [pc, #120]	; (8002e5c <xTaskRemoveFromEventList+0x19c>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4403      	add	r3, r0
 8002dec:	6019      	str	r1, [r3, #0]
 8002dee:	e01b      	b.n	8002e28 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <xTaskRemoveFromEventList+0x1a0>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	61da      	str	r2, [r3, #28]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	621a      	str	r2, [r3, #32]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	3218      	adds	r2, #24
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f103 0218 	add.w	r2, r3, #24
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <xTaskRemoveFromEventList+0x1a0>)
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <xTaskRemoveFromEventList+0x1a0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <xTaskRemoveFromEventList+0x1a0>)
 8002e26:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <xTaskRemoveFromEventList+0x1a4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d905      	bls.n	8002e42 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <xTaskRemoveFromEventList+0x1a8>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e001      	b.n	8002e46 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	372c      	adds	r7, #44	; 0x2c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000200 	.word	0x20000200
 8002e58:	200001e0 	.word	0x200001e0
 8002e5c:	20000104 	.word	0x20000104
 8002e60:	20000198 	.word	0x20000198
 8002e64:	20000100 	.word	0x20000100
 8002e68:	200001ec 	.word	0x200001ec

08002e6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <vTaskInternalSetTimeOutState+0x24>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <vTaskInternalSetTimeOutState+0x28>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	200001f0 	.word	0x200001f0
 8002e94:	200001dc 	.word	0x200001dc

08002e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	613b      	str	r3, [r7, #16]
    }
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	60fb      	str	r3, [r7, #12]
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002eda:	f000 ff5d 	bl	8003d98 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <xTaskCheckForTimeOut+0xc4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef6:	d102      	bne.n	8002efe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	e026      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <xTaskCheckForTimeOut+0xc8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d00a      	beq.n	8002f20 <xTaskCheckForTimeOut+0x88>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d305      	bcc.n	8002f20 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e015      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d20b      	bcs.n	8002f42 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff98 	bl	8002e6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e004      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002f4c:	f000 ff54 	bl	8003df8 <vPortExitCritical>

    return xReturn;
 8002f50:	69fb      	ldr	r3, [r7, #28]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200001dc 	.word	0x200001dc
 8002f60:	200001f0 	.word	0x200001f0

08002f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <vTaskMissedYield+0x14>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	200001ec 	.word	0x200001ec

08002f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f84:	f000 f852 	bl	800302c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <prvIdleTask+0x28>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d9f9      	bls.n	8002f84 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <prvIdleTask+0x2c>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fa0:	e7f0      	b.n	8002f84 <prvIdleTask+0x8>
 8002fa2:	bf00      	nop
 8002fa4:	20000104 	.word	0x20000104
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e00c      	b.n	8002fd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <prvInitialiseTaskLists+0x60>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fd98 	bl	8001afc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d9ef      	bls.n	8002fb8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002fda:	f7fe fd8f 	bl	8001afc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8002fe0:	f7fe fd8c 	bl	8001afc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <prvInitialiseTaskLists+0x6c>)
 8002fe6:	f7fe fd89 	bl	8001afc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <prvInitialiseTaskLists+0x70>)
 8002fec:	f7fe fd86 	bl	8001afc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ff0:	480b      	ldr	r0, [pc, #44]	; (8003020 <prvInitialiseTaskLists+0x74>)
 8002ff2:	f7fe fd83 	bl	8001afc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <prvInitialiseTaskLists+0x78>)
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002ffa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <prvInitialiseTaskLists+0x7c>)
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000104 	.word	0x20000104
 8003010:	20000168 	.word	0x20000168
 8003014:	2000017c 	.word	0x2000017c
 8003018:	20000198 	.word	0x20000198
 800301c:	200001ac 	.word	0x200001ac
 8003020:	200001c4 	.word	0x200001c4
 8003024:	20000190 	.word	0x20000190
 8003028:	20000194 	.word	0x20000194

0800302c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003032:	e019      	b.n	8003068 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003034:	f000 feb0 	bl	8003d98 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <prvCheckTasksWaitingTermination+0x50>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fdbf 	bl	8001bc8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3b01      	subs	r3, #1
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 8003052:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800305c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800305e:	f000 fecb 	bl	8003df8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f892 	bl	800318c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e1      	bne.n	8003034 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200001ac 	.word	0x200001ac
 8003080:	200001d8 	.word	0x200001d8
 8003084:	200001c0 	.word	0x200001c0

08003088 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <vTaskGetInfo+0x1a>
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <vTaskGetInfo+0xc8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e000      	b.n	80030a4 <vTaskGetInfo+0x1c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2b05      	cmp	r3, #5
 80030e0:	d01a      	beq.n	8003118 <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <vTaskGetInfo+0xc8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d103      	bne.n	80030f4 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	731a      	strb	r2, [r3, #12]
 80030f2:	e018      	b.n	8003126 <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d112      	bne.n	8003126 <vTaskGetInfo+0x9e>
                    {
                        vTaskSuspendAll();
 8003100:	f7ff fae8 	bl	80026d4 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <vTaskGetInfo+0x8a>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2202      	movs	r2, #2
 8003110:	731a      	strb	r2, [r3, #12]
                            }
                        }
                        ( void ) xTaskResumeAll();
 8003112:	f7ff faed 	bl	80026f0 <xTaskResumeAll>
 8003116:	e006      	b.n	8003126 <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003118:	6978      	ldr	r0, [r7, #20]
 800311a:	f7ff fa0f 	bl	800253c <eTaskGetState>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <vTaskGetInfo+0xb8>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f80f 	bl	8003154 <prvTaskCheckFreeStackSpace>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 800313e:	e002      	b.n	8003146 <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	841a      	strh	r2, [r3, #32]
    }
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000100 	.word	0x20000100

08003154 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003160:	e005      	b.n	800316e <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3301      	adds	r3, #1
 8003166:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2ba5      	cmp	r3, #165	; 0xa5
 8003174:	d0f5      	beq.n	8003162 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	b29b      	uxth	r3, r3
    }
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4618      	mov	r0, r3
 800319a:	f000 ff99 	bl	80040d0 <vPortFree>
            vPortFree( pxTCB );
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 ff96 	bl	80040d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <prvResetNextTaskUnblockTime+0x30>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <prvResetNextTaskUnblockTime+0x34>)
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031c2:	e005      	b.n	80031d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <prvResetNextTaskUnblockTime+0x30>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <prvResetNextTaskUnblockTime+0x34>)
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000190 	.word	0x20000190
 80031e0:	200001f8 	.word	0x200001f8

080031e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <xTaskGetSchedulerState+0x34>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80031f2:	2301      	movs	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e008      	b.n	800320a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <xTaskGetSchedulerState+0x38>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003200:	2302      	movs	r3, #2
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e001      	b.n	800320a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800320a:	687b      	ldr	r3, [r7, #4]
    }
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	200001e4 	.word	0x200001e4
 800321c:	20000200 	.word	0x20000200

08003220 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	613b      	str	r3, [r7, #16]
    }
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8003248:	f000 fda6 	bl	8003d98 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	3214      	adds	r2, #20
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d115      	bne.n	8003288 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	3354      	adds	r3, #84	; 0x54
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003270:	2101      	movs	r1, #1
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f95e 	bl	8003534 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <ulTaskGenericNotifyTake+0xcc>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003288:	f000 fdb6 	bl	8003df8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800328c:	f000 fd84 	bl	8003d98 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	3214      	adds	r2, #20
 8003298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	3214      	adds	r2, #20
 80032b2:	2100      	movs	r1, #0
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80032b8:	e007      	b.n	80032ca <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	1e51      	subs	r1, r2, #1
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	3214      	adds	r2, #20
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <ulTaskGenericNotifyTake+0xc8>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	3354      	adds	r3, #84	; 0x54
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80032d8:	f000 fd8e 	bl	8003df8 <vPortExitCritical>

        return ulReturn;
 80032dc:	697b      	ldr	r3, [r7, #20]
    }
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000100 	.word	0x20000100
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80032fe:	2301      	movs	r3, #1
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <xTaskGenericNotify+0x2e>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	623b      	str	r3, [r7, #32]
    }
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xTaskGenericNotify+0x4a>
        __asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
    }
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800333e:	f000 fd2b 	bl	8003d98 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	3214      	adds	r2, #20
 800334e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4413      	add	r3, r2
 800335c:	3354      	adds	r3, #84	; 0x54
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4413      	add	r3, r2
 800336a:	3354      	adds	r3, #84	; 0x54
 800336c:	2202      	movs	r2, #2
 800336e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d83b      	bhi.n	80033ee <xTaskGenericNotify+0xfe>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <xTaskGenericNotify+0x8c>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	0800340d 	.word	0x0800340d
 8003380:	08003391 	.word	0x08003391
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033d3 	.word	0x080033d3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	3214      	adds	r2, #20
 8003396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	ea42 0103 	orr.w	r1, r2, r3
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	3214      	adds	r2, #20
 80033a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033aa:	e032      	b.n	8003412 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	3214      	adds	r2, #20
 80033b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	3214      	adds	r2, #20
 80033be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033c2:	e026      	b.n	8003412 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	3214      	adds	r2, #20
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033d0:	e01f      	b.n	8003412 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80033d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d006      	beq.n	80033e8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	3214      	adds	r2, #20
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80033e6:	e014      	b.n	8003412 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80033ec:	e011      	b.n	8003412 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <xTaskGenericNotify+0x230>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <xTaskGenericNotify+0x120>
        __asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61bb      	str	r3, [r7, #24]
    }
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xTaskGenericNotify+0x11a>
                    break;
 800340c:	bf00      	nop
 800340e:	e000      	b.n	8003412 <xTaskGenericNotify+0x122>

                    break;
 8003410:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003416:	2b01      	cmp	r3, #1
 8003418:	d17b      	bne.n	8003512 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	68d2      	ldr	r2, [r2, #12]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003430:	6892      	ldr	r2, [r2, #8]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	3304      	adds	r3, #4
 800343c:	429a      	cmp	r2, r3
 800343e:	d103      	bne.n	8003448 <xTaskGenericNotify+0x158>
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2200      	movs	r2, #0
 800344c:	615a      	str	r2, [r3, #20]
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2201      	movs	r2, #1
 800345e:	409a      	lsls	r2, r3
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <xTaskGenericNotify+0x234>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <xTaskGenericNotify+0x234>)
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	492e      	ldr	r1, [pc, #184]	; (8003528 <xTaskGenericNotify+0x238>)
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003494:	3204      	adds	r2, #4
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <xTaskGenericNotify+0x238>)
 80034ae:	441a      	add	r2, r3
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	615a      	str	r2, [r3, #20]
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	491b      	ldr	r1, [pc, #108]	; (8003528 <xTaskGenericNotify+0x238>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1c59      	adds	r1, r3, #1
 80034c8:	4817      	ldr	r0, [pc, #92]	; (8003528 <xTaskGenericNotify+0x238>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4403      	add	r3, r0
 80034d4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <xTaskGenericNotify+0x204>
        __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	617b      	str	r3, [r7, #20]
    }
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <xTaskGenericNotify+0x23c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d907      	bls.n	8003512 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <xTaskGenericNotify+0x240>)
 8003504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003512:	f000 fc71 	bl	8003df8 <vPortExitCritical>

        return xReturn;
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003518:	4618      	mov	r0, r3
 800351a:	3738      	adds	r7, #56	; 0x38
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200001dc 	.word	0x200001dc
 8003524:	200001e0 	.word	0x200001e0
 8003528:	20000104 	.word	0x20000104
 800352c:	20000100 	.word	0x20000100
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fb3c 	bl	8001bc8 <uxListRemove>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2201      	movs	r2, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <prvAddCurrentTaskToDelayedList+0xec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4013      	ands	r3, r2
 800356a:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <prvAddCurrentTaskToDelayedList+0xec>)
 800356c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003574:	d124      	bne.n	80035c0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d021      	beq.n	80035c0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <prvAddCurrentTaskToDelayedList+0xf0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	3204      	adds	r2, #4
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1d1a      	adds	r2, r3, #4
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035b0:	615a      	str	r2, [r3, #20]
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035be:	e026      	b.n	800360e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d209      	bcs.n	80035ec <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f7fe fab6 	bl	8001b56 <vListInsert>
}
 80035ea:	e010      	b.n	800360e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <prvAddCurrentTaskToDelayedList+0xf8>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe faac 	bl	8001b56 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d202      	bcs.n	800360e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <prvAddCurrentTaskToDelayedList+0xfc>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200001dc 	.word	0x200001dc
 800361c:	20000100 	.word	0x20000100
 8003620:	200001e0 	.word	0x200001e0
 8003624:	200001c4 	.word	0x200001c4
 8003628:	20000194 	.word	0x20000194
 800362c:	20000190 	.word	0x20000190
 8003630:	200001f8 	.word	0x200001f8

08003634 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800363e:	f000 fa47 	bl	8003ad0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <xTimerCreateTimerTask+0x54>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <xTimerCreateTimerTask+0x58>)
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	2302      	movs	r3, #2
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2300      	movs	r3, #0
 8003654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003658:	490d      	ldr	r1, [pc, #52]	; (8003690 <xTimerCreateTimerTask+0x5c>)
 800365a:	480e      	ldr	r0, [pc, #56]	; (8003694 <xTimerCreateTimerTask+0x60>)
 800365c:	f7fe fdd0 	bl	8002200 <xTaskCreate>
 8003660:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	603b      	str	r3, [r7, #0]
    }
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800367e:	687b      	ldr	r3, [r7, #4]
    }
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000234 	.word	0x20000234
 800368c:	20000238 	.word	0x20000238
 8003690:	080060b0 	.word	0x080060b0
 8003694:	0800373d 	.word	0x0800373d

08003698 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036a4:	e008      	b.n	80036b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	18d1      	adds	r1, r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8dd 	bl	8003884 <prvInsertTimerInActiveList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ea      	bne.n	80036a6 <prvReloadTimer+0xe>
        }
    }
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <prvProcessExpiredTimer+0x5c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fa67 	bl	8001bc8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ffc3 	bl	8003698 <prvReloadTimer>
 8003712:	e008      	b.n	8003726 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	4798      	blx	r3
    }
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000022c 	.word	0x2000022c

0800373c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f857 	bl	80037fc <prvGetNextExpireTime>
 800374e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4619      	mov	r1, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f803 	bl	8003760 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800375a:	f000 f8d5 	bl	8003908 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800375e:	e7f1      	b.n	8003744 <prvTimerTask+0x8>

08003760 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800376a:	f7fe ffb3 	bl	80026d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f866 	bl	8003844 <prvSampleTimeNow>
 8003778:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d130      	bne.n	80037e2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <prvProcessTimerOrBlockTask+0x3c>
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	429a      	cmp	r2, r3
 800378c:	d806      	bhi.n	800379c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800378e:	f7fe ffaf 	bl	80026f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffa1 	bl	80036dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800379a:	e024      	b.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <prvProcessTimerOrBlockTask+0x90>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <prvProcessTimerOrBlockTask+0x50>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <prvProcessTimerOrBlockTask+0x52>
 80037b0:	2300      	movs	r3, #0
 80037b2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <prvProcessTimerOrBlockTask+0x94>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f7fe fce9 	bl	8002198 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037c6:	f7fe ff93 	bl	80026f0 <xTaskResumeAll>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <prvProcessTimerOrBlockTask+0x98>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
    }
 80037e0:	e001      	b.n	80037e6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037e2:	f7fe ff85 	bl	80026f0 <xTaskResumeAll>
    }
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000230 	.word	0x20000230
 80037f4:	20000234 	.word	0x20000234
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <prvGetNextExpireTime+0x44>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <prvGetNextExpireTime+0x16>
 800380e:	2201      	movs	r2, #1
 8003810:	e000      	b.n	8003814 <prvGetNextExpireTime+0x18>
 8003812:	2200      	movs	r2, #0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <prvGetNextExpireTime+0x44>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e001      	b.n	8003830 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003830:	68fb      	ldr	r3, [r7, #12]
    }
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	2000022c 	.word	0x2000022c

08003844 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800384c:	f7ff f84c 	bl	80028e8 <xTaskGetTickCount>
 8003850:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvSampleTimeNow+0x3c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d205      	bcs.n	8003868 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800385c:	f000 f912 	bl	8003a84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e002      	b.n	800386e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800386e:	4a04      	ldr	r2, [pc, #16]	; (8003880 <prvSampleTimeNow+0x3c>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003874:	68fb      	ldr	r3, [r7, #12]
    }
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000023c 	.word	0x2000023c

08003884 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d812      	bhi.n	80038d0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e01b      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <prvInsertTimerInActiveList+0x7c>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe f944 	bl	8001b56 <vListInsert>
 80038ce:	e012      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d206      	bcs.n	80038e6 <prvInsertTimerInActiveList+0x62>
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e007      	b.n	80038f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <prvInsertTimerInActiveList+0x80>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f7fe f930 	bl	8001b56 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038f6:	697b      	ldr	r3, [r7, #20]
    }
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000230 	.word	0x20000230
 8003904:	2000022c 	.word	0x2000022c

08003908 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800390e:	e0a6      	b.n	8003a5e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f2c0 80a2 	blt.w	8003a5c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe f94d 	bl	8001bc8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff87 	bl	8003844 <prvSampleTimeNow>
 8003936:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	2b08      	cmp	r3, #8
 800393e:	f200 808e 	bhi.w	8003a5e <prvProcessReceivedCommands+0x156>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <prvProcessReceivedCommands+0x40>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800396d 	.word	0x0800396d
 800394c:	0800396d 	.word	0x0800396d
 8003950:	080039d5 	.word	0x080039d5
 8003954:	080039e9 	.word	0x080039e9
 8003958:	08003a33 	.word	0x08003a33
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800396d 	.word	0x0800396d
 8003964:	080039d5 	.word	0x080039d5
 8003968:	080039e9 	.word	0x080039e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	18d1      	adds	r1, r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	69f8      	ldr	r0, [r7, #28]
 800398c:	f7ff ff7a 	bl	8003884 <prvInsertTimerInActiveList>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d063      	beq.n	8003a5e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4619      	mov	r1, r3
 80039b0:	69f8      	ldr	r0, [r7, #28]
 80039b2:	f7ff fe71 	bl	8003698 <prvReloadTimer>
 80039b6:	e008      	b.n	80039ca <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	69f8      	ldr	r0, [r7, #28]
 80039d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80039d2:	e044      	b.n	8003a5e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80039e6:	e03a      	b.n	8003a5e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	617b      	str	r3, [r7, #20]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	18d1      	adds	r1, r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	69f8      	ldr	r0, [r7, #28]
 8003a2c:	f7ff ff2a 	bl	8003884 <prvInsertTimerInActiveList>
                        break;
 8003a30:	e015      	b.n	8003a5e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003a40:	69f8      	ldr	r0, [r7, #28]
 8003a42:	f000 fb45 	bl	80040d0 <vPortFree>
 8003a46:	e00a      	b.n	8003a5e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a5a:	e000      	b.n	8003a5e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <prvProcessReceivedCommands+0x178>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f107 0108 	add.w	r1, r7, #8
 8003a66:	2200      	movs	r2, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe f9d9 	bl	8001e20 <xQueueReceive>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af4d 	bne.w	8003910 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000234 	.word	0x20000234

08003a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a8a:	e009      	b.n	8003aa0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <prvSwitchTimerLists+0x44>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f7ff fe1e 	bl	80036dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <prvSwitchTimerLists+0x44>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <prvSwitchTimerLists+0x44>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <prvSwitchTimerLists+0x48>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <prvSwitchTimerLists+0x44>)
 8003ab6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <prvSwitchTimerLists+0x48>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6013      	str	r3, [r2, #0]
    }
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000022c 	.word	0x2000022c
 8003acc:	20000230 	.word	0x20000230

08003ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ad4:	f000 f960 	bl	8003d98 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <prvCheckForValidListAndQueue+0x54>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11d      	bne.n	8003b1c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ae0:	4811      	ldr	r0, [pc, #68]	; (8003b28 <prvCheckForValidListAndQueue+0x58>)
 8003ae2:	f7fe f80b 	bl	8001afc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ae6:	4811      	ldr	r0, [pc, #68]	; (8003b2c <prvCheckForValidListAndQueue+0x5c>)
 8003ae8:	f7fe f808 	bl	8001afc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <prvCheckForValidListAndQueue+0x60>)
 8003aee:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <prvCheckForValidListAndQueue+0x58>)
 8003af0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <prvCheckForValidListAndQueue+0x64>)
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <prvCheckForValidListAndQueue+0x5c>)
 8003af6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003af8:	2200      	movs	r2, #0
 8003afa:	210c      	movs	r1, #12
 8003afc:	200a      	movs	r0, #10
 8003afe:	f7fe f91d 	bl	8001d3c <xQueueGenericCreate>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <prvCheckForValidListAndQueue+0x54>)
 8003b06:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <prvCheckForValidListAndQueue+0x54>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <prvCheckForValidListAndQueue+0x54>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4908      	ldr	r1, [pc, #32]	; (8003b38 <prvCheckForValidListAndQueue+0x68>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe faf0 	bl	80020fc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b1c:	f000 f96c 	bl	8003df8 <vPortExitCritical>
    }
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000234 	.word	0x20000234
 8003b28:	20000204 	.word	0x20000204
 8003b2c:	20000218 	.word	0x20000218
 8003b30:	2000022c 	.word	0x2000022c
 8003b34:	20000230 	.word	0x20000230
 8003b38:	080060b8 	.word	0x080060b8

08003b3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3b04      	subs	r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b04      	subs	r3, #4
 8003b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <pxPortInitialiseStack+0x64>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b14      	subs	r3, #20
 8003b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b04      	subs	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f06f 0202 	mvn.w	r2, #2
 8003b8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b20      	subs	r3, #32
 8003b90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	08003ba5 	.word	0x08003ba5

08003ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvTaskExitError+0x54>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb6:	d00a      	beq.n	8003bce <prvTaskExitError+0x2a>
        __asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
    }
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <prvTaskExitError+0x28>
        __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	60bb      	str	r3, [r7, #8]
    }
 8003be0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003be2:	bf00      	nop
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0fc      	beq.n	8003be4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	20000010 	.word	0x20000010
 8003bfc:	00000000 	.word	0x00000000

08003c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <pxCurrentTCBConst2>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0a:	f380 8809 	msr	PSP, r0
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f380 8811 	msr	BASEPRI, r0
 8003c1a:	4770      	bx	lr
 8003c1c:	f3af 8000 	nop.w

08003c20 <pxCurrentTCBConst2>:
 8003c20:	20000100 	.word	0x20000100
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop

08003c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c28:	4808      	ldr	r0, [pc, #32]	; (8003c4c <prvPortStartFirstTask+0x24>)
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f380 8808 	msr	MSP, r0
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8814 	msr	CONTROL, r0
 8003c3a:	b662      	cpsie	i
 8003c3c:	b661      	cpsie	f
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	df00      	svc	0
 8003c48:	bf00      	nop
 8003c4a:	0000      	.short	0x0000
 8003c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop

08003c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <xPortStartScheduler+0x120>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <xPortStartScheduler+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10a      	bne.n	8003c7a <xPortStartScheduler+0x26>
        __asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
    }
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <xPortStartScheduler+0x120>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <xPortStartScheduler+0x128>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10a      	bne.n	8003c9a <xPortStartScheduler+0x46>
        __asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
    }
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <xPortStartScheduler+0x12c>)
 8003c9c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <xPortStartScheduler+0x130>)
 8003cc0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cc8:	e009      	b.n	8003cde <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003cca:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <xPortStartScheduler+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cd2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d0ef      	beq.n	8003cca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cea:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d00a      	beq.n	8003d0c <xPortStartScheduler+0xb8>
        __asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	60bb      	str	r3, [r7, #8]
    }
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d14:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d20:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d42:	f000 f8db 	bl	8003efc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <xPortStartScheduler+0x13c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d4c:	f000 f8fa 	bl	8003f44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <xPortStartScheduler+0x140>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <xPortStartScheduler+0x140>)
 8003d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d5c:	f7ff ff64 	bl	8003c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d60:	f7fe fee8 	bl	8002b34 <vTaskSwitchContext>
    prvTaskExitError();
 8003d64:	f7ff ff1e 	bl	8003ba4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000ed00 	.word	0xe000ed00
 8003d78:	410fc271 	.word	0x410fc271
 8003d7c:	410fc270 	.word	0x410fc270
 8003d80:	e000e400 	.word	0xe000e400
 8003d84:	20000240 	.word	0x20000240
 8003d88:	20000244 	.word	0x20000244
 8003d8c:	e000ed20 	.word	0xe000ed20
 8003d90:	20000010 	.word	0x20000010
 8003d94:	e000ef34 	.word	0xe000ef34

08003d98 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
    }
 8003db0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <vPortEnterCritical+0x58>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <vPortEnterCritical+0x58>)
 8003dba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <vPortEnterCritical+0x58>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10f      	bne.n	8003de4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <vPortEnterCritical+0x5c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	603b      	str	r3, [r7, #0]
    }
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <vPortEnterCritical+0x4a>
    }
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000010 	.word	0x20000010
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <vPortExitCritical+0x50>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <vPortExitCritical+0x24>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	607b      	str	r3, [r7, #4]
    }
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <vPortExitCritical+0x50>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <vPortExitCritical+0x50>)
 8003e24:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <vPortExitCritical+0x50>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <vPortExitCritical+0x42>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e38:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000010 	.word	0x20000010
 8003e4c:	00000000 	.word	0x00000000

08003e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e50:	f3ef 8009 	mrs	r0, PSP
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <pxCurrentTCBConst>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	f01e 0f10 	tst.w	lr, #16
 8003e60:	bf08      	it	eq
 8003e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6a:	6010      	str	r0, [r2, #0]
 8003e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e74:	f380 8811 	msr	BASEPRI, r0
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f7fe fe58 	bl	8002b34 <vTaskSwitchContext>
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f380 8811 	msr	BASEPRI, r0
 8003e8c:	bc09      	pop	{r0, r3}
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	6808      	ldr	r0, [r1, #0]
 8003e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e96:	f01e 0f10 	tst.w	lr, #16
 8003e9a:	bf08      	it	eq
 8003e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ea0:	f380 8809 	msr	PSP, r0
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	f3af 8000 	nop.w

08003eb0 <pxCurrentTCBConst>:
 8003eb0:	20000100 	.word	0x20000100
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
        __asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	607b      	str	r3, [r7, #4]
    }
 8003ed0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ed2:	f7fe fd19 	bl	8002908 <xTaskIncrementTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <SysTick_Handler+0x40>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f383 8811 	msr	BASEPRI, r3
    }
 8003eee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <vPortSetupTimerInterrupt+0x38>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <vPortSetupTimerInterrupt+0x3c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <vPortSetupTimerInterrupt+0x40>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <vPortSetupTimerInterrupt+0x44>)
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010
 8003f34:	e000e018 	.word	0xe000e018
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	10624dd3 	.word	0x10624dd3
 8003f40:	e000e014 	.word	0xe000e014

08003f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f54 <vPortEnableVFP+0x10>
 8003f48:	6801      	ldr	r1, [r0, #0]
 8003f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f4e:	6001      	str	r1, [r0, #0]
 8003f50:	4770      	bx	lr
 8003f52:	0000      	.short	0x0000
 8003f54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop

08003f5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003f68:	f7fe fbb4 	bl	80026d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <pvPortMalloc+0x160>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f74:	f000 f908 	bl	8004188 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f7e:	2208      	movs	r2, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	3308      	adds	r3, #8
 8003f8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d804      	bhi.n	8003fa0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	e001      	b.n	8003fa4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db70      	blt.n	800408c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d06d      	beq.n	800408c <pvPortMalloc+0x130>
 8003fb0:	4b43      	ldr	r3, [pc, #268]	; (80040c0 <pvPortMalloc+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d868      	bhi.n	800408c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fba:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <pvPortMalloc+0x168>)
 8003fbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <pvPortMalloc+0x168>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc4:	e004      	b.n	8003fd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d903      	bls.n	8003fe2 <pvPortMalloc+0x86>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f1      	bne.n	8003fc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <pvPortMalloc+0x160>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d04f      	beq.n	800408c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	2308      	movs	r3, #8
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	429a      	cmp	r2, r3
 800400c:	d91f      	bls.n	800404e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <pvPortMalloc+0xda>
        __asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
    }
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1ad2      	subs	r2, r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	f000 f8f9 	bl	8004240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800404e:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <pvPortMalloc+0x164>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <pvPortMalloc+0x164>)
 800405a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <pvPortMalloc+0x164>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <pvPortMalloc+0x16c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d203      	bcs.n	8004070 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <pvPortMalloc+0x164>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <pvPortMalloc+0x16c>)
 800406e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <pvPortMalloc+0x170>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	4a10      	ldr	r2, [pc, #64]	; (80040cc <pvPortMalloc+0x170>)
 800408a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800408c:	f7fe fb30 	bl	80026f0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <pvPortMalloc+0x154>
        __asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60fb      	str	r3, [r7, #12]
    }
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <pvPortMalloc+0x152>
    return pvReturn;
 80040b0:	69fb      	ldr	r3, [r7, #28]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20012e50 	.word	0x20012e50
 80040c0:	20012e54 	.word	0x20012e54
 80040c4:	20012e48 	.word	0x20012e48
 80040c8:	20012e58 	.word	0x20012e58
 80040cc:	20012e5c 	.word	0x20012e5c

080040d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d049      	beq.n	8004176 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040e2:	2308      	movs	r3, #8
 80040e4:	425b      	negs	r3, r3
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4413      	add	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <vPortFree+0x3e>
        __asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
    }
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <vPortFree+0x5c>
        __asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
    }
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0fdb      	lsrs	r3, r3, #31
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01c      	beq.n	8004176 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d118      	bne.n	8004176 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004150:	f7fe fac0 	bl	80026d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <vPortFree+0xb0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4413      	add	r3, r2
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <vPortFree+0xb0>)
 8004160:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004162:	6938      	ldr	r0, [r7, #16]
 8004164:	f000 f86c 	bl	8004240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <vPortFree+0xb4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <vPortFree+0xb4>)
 8004170:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004172:	f7fe fabd 	bl	80026f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20012e54 	.word	0x20012e54
 8004184:	20012e60 	.word	0x20012e60

08004188 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800418e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004192:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <prvHeapInit+0xa4>)
 8004196:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3307      	adds	r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0307 	bic.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <prvHeapInit+0xa4>)
 80041b8:	4413      	add	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <prvHeapInit+0xa8>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <prvHeapInit+0xa8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041d4:	2208      	movs	r2, #8
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <prvHeapInit+0xac>)
 80041e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvHeapInit+0xac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <prvHeapInit+0xac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <prvHeapInit+0xac>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <prvHeapInit+0xb0>)
 8004216:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <prvHeapInit+0xb4>)
 800421e:	6013      	str	r3, [r2, #0]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000248 	.word	0x20000248
 8004230:	20012e48 	.word	0x20012e48
 8004234:	20012e50 	.word	0x20012e50
 8004238:	20012e58 	.word	0x20012e58
 800423c:	20012e54 	.word	0x20012e54

08004240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <prvInsertBlockIntoFreeList+0xac>)
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e002      	b.n	8004254 <prvInsertBlockIntoFreeList+0x14>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d8f7      	bhi.n	800424e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d108      	bne.n	8004282 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d118      	bne.n	80042c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <prvInsertBlockIntoFreeList+0xb0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d00d      	beq.n	80042be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e008      	b.n	80042d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvInsertBlockIntoFreeList+0xb0>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e003      	b.n	80042d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d002      	beq.n	80042de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20012e48 	.word	0x20012e48
 80042f0:	20012e50 	.word	0x20012e50

080042f4 <__errno>:
 80042f4:	4b01      	ldr	r3, [pc, #4]	; (80042fc <__errno+0x8>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000014 	.word	0x20000014

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4d0d      	ldr	r5, [pc, #52]	; (8004338 <__libc_init_array+0x38>)
 8004304:	4c0d      	ldr	r4, [pc, #52]	; (800433c <__libc_init_array+0x3c>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	2600      	movs	r6, #0
 800430c:	42a6      	cmp	r6, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	4d0b      	ldr	r5, [pc, #44]	; (8004340 <__libc_init_array+0x40>)
 8004312:	4c0c      	ldr	r4, [pc, #48]	; (8004344 <__libc_init_array+0x44>)
 8004314:	f001 fd68 	bl	8005de8 <_init>
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	2600      	movs	r6, #0
 800431e:	42a6      	cmp	r6, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f855 3b04 	ldr.w	r3, [r5], #4
 8004328:	4798      	blx	r3
 800432a:	3601      	adds	r6, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004332:	4798      	blx	r3
 8004334:	3601      	adds	r6, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	0800623c 	.word	0x0800623c
 800433c:	0800623c 	.word	0x0800623c
 8004340:	0800623c 	.word	0x0800623c
 8004344:	08006240 	.word	0x08006240

08004348 <memcpy>:
 8004348:	440a      	add	r2, r1
 800434a:	4291      	cmp	r1, r2
 800434c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004350:	d100      	bne.n	8004354 <memcpy+0xc>
 8004352:	4770      	bx	lr
 8004354:	b510      	push	{r4, lr}
 8004356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435e:	4291      	cmp	r1, r2
 8004360:	d1f9      	bne.n	8004356 <memcpy+0xe>
 8004362:	bd10      	pop	{r4, pc}

08004364 <memset>:
 8004364:	4402      	add	r2, r0
 8004366:	4603      	mov	r3, r0
 8004368:	4293      	cmp	r3, r2
 800436a:	d100      	bne.n	800436e <memset+0xa>
 800436c:	4770      	bx	lr
 800436e:	f803 1b01 	strb.w	r1, [r3], #1
 8004372:	e7f9      	b.n	8004368 <memset+0x4>

08004374 <iprintf>:
 8004374:	b40f      	push	{r0, r1, r2, r3}
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <iprintf+0x2c>)
 8004378:	b513      	push	{r0, r1, r4, lr}
 800437a:	681c      	ldr	r4, [r3, #0]
 800437c:	b124      	cbz	r4, 8004388 <iprintf+0x14>
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	b913      	cbnz	r3, 8004388 <iprintf+0x14>
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f924 	bl	80045d0 <__sinit>
 8004388:	ab05      	add	r3, sp, #20
 800438a:	9a04      	ldr	r2, [sp, #16]
 800438c:	68a1      	ldr	r1, [r4, #8]
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	4620      	mov	r0, r4
 8004392:	f000 fc3d 	bl	8004c10 <_vfiprintf_r>
 8004396:	b002      	add	sp, #8
 8004398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	20000014 	.word	0x20000014

080043a4 <srand>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <srand+0x44>)
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043ac:	4604      	mov	r4, r0
 80043ae:	b9b3      	cbnz	r3, 80043de <srand+0x3a>
 80043b0:	2018      	movs	r0, #24
 80043b2:	f000 f9bf 	bl	8004734 <malloc>
 80043b6:	4602      	mov	r2, r0
 80043b8:	63a8      	str	r0, [r5, #56]	; 0x38
 80043ba:	b920      	cbnz	r0, 80043c6 <srand+0x22>
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <srand+0x48>)
 80043be:	480c      	ldr	r0, [pc, #48]	; (80043f0 <srand+0x4c>)
 80043c0:	2142      	movs	r1, #66	; 0x42
 80043c2:	f000 f88f 	bl	80044e4 <__assert_func>
 80043c6:	490b      	ldr	r1, [pc, #44]	; (80043f4 <srand+0x50>)
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <srand+0x54>)
 80043ca:	e9c0 1300 	strd	r1, r3, [r0]
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <srand+0x58>)
 80043d0:	6083      	str	r3, [r0, #8]
 80043d2:	230b      	movs	r3, #11
 80043d4:	8183      	strh	r3, [r0, #12]
 80043d6:	2100      	movs	r1, #0
 80043d8:	2001      	movs	r0, #1
 80043da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80043de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	611c      	str	r4, [r3, #16]
 80043e4:	615a      	str	r2, [r3, #20]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000014 	.word	0x20000014
 80043ec:	080060d4 	.word	0x080060d4
 80043f0:	080060eb 	.word	0x080060eb
 80043f4:	abcd330e 	.word	0xabcd330e
 80043f8:	e66d1234 	.word	0xe66d1234
 80043fc:	0005deec 	.word	0x0005deec

08004400 <rand>:
 8004400:	4b16      	ldr	r3, [pc, #88]	; (800445c <rand+0x5c>)
 8004402:	b510      	push	{r4, lr}
 8004404:	681c      	ldr	r4, [r3, #0]
 8004406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004408:	b9b3      	cbnz	r3, 8004438 <rand+0x38>
 800440a:	2018      	movs	r0, #24
 800440c:	f000 f992 	bl	8004734 <malloc>
 8004410:	63a0      	str	r0, [r4, #56]	; 0x38
 8004412:	b928      	cbnz	r0, 8004420 <rand+0x20>
 8004414:	4602      	mov	r2, r0
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <rand+0x60>)
 8004418:	4812      	ldr	r0, [pc, #72]	; (8004464 <rand+0x64>)
 800441a:	214e      	movs	r1, #78	; 0x4e
 800441c:	f000 f862 	bl	80044e4 <__assert_func>
 8004420:	4a11      	ldr	r2, [pc, #68]	; (8004468 <rand+0x68>)
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <rand+0x6c>)
 8004424:	e9c0 2300 	strd	r2, r3, [r0]
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <rand+0x70>)
 800442a:	6083      	str	r3, [r0, #8]
 800442c:	230b      	movs	r3, #11
 800442e:	8183      	strh	r3, [r0, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	2300      	movs	r3, #0
 8004434:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004438:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <rand+0x74>)
 800443c:	6920      	ldr	r0, [r4, #16]
 800443e:	6963      	ldr	r3, [r4, #20]
 8004440:	490d      	ldr	r1, [pc, #52]	; (8004478 <rand+0x78>)
 8004442:	4342      	muls	r2, r0
 8004444:	fb01 2203 	mla	r2, r1, r3, r2
 8004448:	fba0 0101 	umull	r0, r1, r0, r1
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	eb42 0001 	adc.w	r0, r2, r1
 8004452:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004456:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800445a:	bd10      	pop	{r4, pc}
 800445c:	20000014 	.word	0x20000014
 8004460:	080060d4 	.word	0x080060d4
 8004464:	080060eb 	.word	0x080060eb
 8004468:	abcd330e 	.word	0xabcd330e
 800446c:	e66d1234 	.word	0xe66d1234
 8004470:	0005deec 	.word	0x0005deec
 8004474:	5851f42d 	.word	0x5851f42d
 8004478:	4c957f2d 	.word	0x4c957f2d

0800447c <sniprintf>:
 800447c:	b40c      	push	{r2, r3}
 800447e:	b530      	push	{r4, r5, lr}
 8004480:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <sniprintf+0x64>)
 8004482:	1e0c      	subs	r4, r1, #0
 8004484:	681d      	ldr	r5, [r3, #0]
 8004486:	b09d      	sub	sp, #116	; 0x74
 8004488:	da08      	bge.n	800449c <sniprintf+0x20>
 800448a:	238b      	movs	r3, #139	; 0x8b
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004492:	b01d      	add	sp, #116	; 0x74
 8004494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004498:	b002      	add	sp, #8
 800449a:	4770      	bx	lr
 800449c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80044a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044a4:	bf14      	ite	ne
 80044a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80044aa:	4623      	moveq	r3, r4
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	9307      	str	r3, [sp, #28]
 80044b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b4:	9002      	str	r0, [sp, #8]
 80044b6:	9006      	str	r0, [sp, #24]
 80044b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044be:	ab21      	add	r3, sp, #132	; 0x84
 80044c0:	a902      	add	r1, sp, #8
 80044c2:	4628      	mov	r0, r5
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	f000 fa79 	bl	80049bc <_svfiprintf_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	bfbc      	itt	lt
 80044ce:	238b      	movlt	r3, #139	; 0x8b
 80044d0:	602b      	strlt	r3, [r5, #0]
 80044d2:	2c00      	cmp	r4, #0
 80044d4:	d0dd      	beq.n	8004492 <sniprintf+0x16>
 80044d6:	9b02      	ldr	r3, [sp, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e7d9      	b.n	8004492 <sniprintf+0x16>
 80044de:	bf00      	nop
 80044e0:	20000014 	.word	0x20000014

080044e4 <__assert_func>:
 80044e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044e6:	4614      	mov	r4, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <__assert_func+0x2c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4605      	mov	r5, r0
 80044f0:	68d8      	ldr	r0, [r3, #12]
 80044f2:	b14c      	cbz	r4, 8004508 <__assert_func+0x24>
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <__assert_func+0x30>)
 80044f6:	9100      	str	r1, [sp, #0]
 80044f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044fc:	4906      	ldr	r1, [pc, #24]	; (8004518 <__assert_func+0x34>)
 80044fe:	462b      	mov	r3, r5
 8004500:	f000 f8e4 	bl	80046cc <fiprintf>
 8004504:	f000 ff6e 	bl	80053e4 <abort>
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__assert_func+0x38>)
 800450a:	461c      	mov	r4, r3
 800450c:	e7f3      	b.n	80044f6 <__assert_func+0x12>
 800450e:	bf00      	nop
 8004510:	20000014 	.word	0x20000014
 8004514:	08006146 	.word	0x08006146
 8004518:	08006153 	.word	0x08006153
 800451c:	08006181 	.word	0x08006181

08004520 <std>:
 8004520:	2300      	movs	r3, #0
 8004522:	b510      	push	{r4, lr}
 8004524:	4604      	mov	r4, r0
 8004526:	e9c0 3300 	strd	r3, r3, [r0]
 800452a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800452e:	6083      	str	r3, [r0, #8]
 8004530:	8181      	strh	r1, [r0, #12]
 8004532:	6643      	str	r3, [r0, #100]	; 0x64
 8004534:	81c2      	strh	r2, [r0, #14]
 8004536:	6183      	str	r3, [r0, #24]
 8004538:	4619      	mov	r1, r3
 800453a:	2208      	movs	r2, #8
 800453c:	305c      	adds	r0, #92	; 0x5c
 800453e:	f7ff ff11 	bl	8004364 <memset>
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <std+0x38>)
 8004544:	6263      	str	r3, [r4, #36]	; 0x24
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <std+0x3c>)
 8004548:	62a3      	str	r3, [r4, #40]	; 0x28
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <std+0x40>)
 800454c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <std+0x44>)
 8004550:	6224      	str	r4, [r4, #32]
 8004552:	6323      	str	r3, [r4, #48]	; 0x30
 8004554:	bd10      	pop	{r4, pc}
 8004556:	bf00      	nop
 8004558:	080051b9 	.word	0x080051b9
 800455c:	080051db 	.word	0x080051db
 8004560:	08005213 	.word	0x08005213
 8004564:	08005237 	.word	0x08005237

08004568 <_cleanup_r>:
 8004568:	4901      	ldr	r1, [pc, #4]	; (8004570 <_cleanup_r+0x8>)
 800456a:	f000 b8c1 	b.w	80046f0 <_fwalk_reent>
 800456e:	bf00      	nop
 8004570:	08005521 	.word	0x08005521

08004574 <__sfmoreglue>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	2268      	movs	r2, #104	; 0x68
 8004578:	1e4d      	subs	r5, r1, #1
 800457a:	4355      	muls	r5, r2
 800457c:	460e      	mov	r6, r1
 800457e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004582:	f000 f94b 	bl	800481c <_malloc_r>
 8004586:	4604      	mov	r4, r0
 8004588:	b140      	cbz	r0, 800459c <__sfmoreglue+0x28>
 800458a:	2100      	movs	r1, #0
 800458c:	e9c0 1600 	strd	r1, r6, [r0]
 8004590:	300c      	adds	r0, #12
 8004592:	60a0      	str	r0, [r4, #8]
 8004594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004598:	f7ff fee4 	bl	8004364 <memset>
 800459c:	4620      	mov	r0, r4
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <__sfp_lock_acquire>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__sfp_lock_acquire+0x8>)
 80045a2:	f000 b8c5 	b.w	8004730 <__retarget_lock_acquire_recursive>
 80045a6:	bf00      	nop
 80045a8:	20012e65 	.word	0x20012e65

080045ac <__sfp_lock_release>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__sfp_lock_release+0x8>)
 80045ae:	f000 b8c0 	b.w	8004732 <__retarget_lock_release_recursive>
 80045b2:	bf00      	nop
 80045b4:	20012e65 	.word	0x20012e65

080045b8 <__sinit_lock_acquire>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__sinit_lock_acquire+0x8>)
 80045ba:	f000 b8b9 	b.w	8004730 <__retarget_lock_acquire_recursive>
 80045be:	bf00      	nop
 80045c0:	20012e66 	.word	0x20012e66

080045c4 <__sinit_lock_release>:
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__sinit_lock_release+0x8>)
 80045c6:	f000 b8b4 	b.w	8004732 <__retarget_lock_release_recursive>
 80045ca:	bf00      	nop
 80045cc:	20012e66 	.word	0x20012e66

080045d0 <__sinit>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	f7ff fff0 	bl	80045b8 <__sinit_lock_acquire>
 80045d8:	69a3      	ldr	r3, [r4, #24]
 80045da:	b11b      	cbz	r3, 80045e4 <__sinit+0x14>
 80045dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e0:	f7ff bff0 	b.w	80045c4 <__sinit_lock_release>
 80045e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045e8:	6523      	str	r3, [r4, #80]	; 0x50
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <__sinit+0x68>)
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <__sinit+0x6c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	bf04      	itt	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	61a3      	streq	r3, [r4, #24]
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f820 	bl	8004640 <__sfp>
 8004600:	6060      	str	r0, [r4, #4]
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f81c 	bl	8004640 <__sfp>
 8004608:	60a0      	str	r0, [r4, #8]
 800460a:	4620      	mov	r0, r4
 800460c:	f000 f818 	bl	8004640 <__sfp>
 8004610:	2200      	movs	r2, #0
 8004612:	60e0      	str	r0, [r4, #12]
 8004614:	2104      	movs	r1, #4
 8004616:	6860      	ldr	r0, [r4, #4]
 8004618:	f7ff ff82 	bl	8004520 <std>
 800461c:	68a0      	ldr	r0, [r4, #8]
 800461e:	2201      	movs	r2, #1
 8004620:	2109      	movs	r1, #9
 8004622:	f7ff ff7d 	bl	8004520 <std>
 8004626:	68e0      	ldr	r0, [r4, #12]
 8004628:	2202      	movs	r2, #2
 800462a:	2112      	movs	r1, #18
 800462c:	f7ff ff78 	bl	8004520 <std>
 8004630:	2301      	movs	r3, #1
 8004632:	61a3      	str	r3, [r4, #24]
 8004634:	e7d2      	b.n	80045dc <__sinit+0xc>
 8004636:	bf00      	nop
 8004638:	080060d0 	.word	0x080060d0
 800463c:	08004569 	.word	0x08004569

08004640 <__sfp>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	4607      	mov	r7, r0
 8004644:	f7ff ffac 	bl	80045a0 <__sfp_lock_acquire>
 8004648:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <__sfp+0x84>)
 800464a:	681e      	ldr	r6, [r3, #0]
 800464c:	69b3      	ldr	r3, [r6, #24]
 800464e:	b913      	cbnz	r3, 8004656 <__sfp+0x16>
 8004650:	4630      	mov	r0, r6
 8004652:	f7ff ffbd 	bl	80045d0 <__sinit>
 8004656:	3648      	adds	r6, #72	; 0x48
 8004658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800465c:	3b01      	subs	r3, #1
 800465e:	d503      	bpl.n	8004668 <__sfp+0x28>
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	b30b      	cbz	r3, 80046a8 <__sfp+0x68>
 8004664:	6836      	ldr	r6, [r6, #0]
 8004666:	e7f7      	b.n	8004658 <__sfp+0x18>
 8004668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800466c:	b9d5      	cbnz	r5, 80046a4 <__sfp+0x64>
 800466e:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <__sfp+0x88>)
 8004670:	60e3      	str	r3, [r4, #12]
 8004672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004676:	6665      	str	r5, [r4, #100]	; 0x64
 8004678:	f000 f859 	bl	800472e <__retarget_lock_init_recursive>
 800467c:	f7ff ff96 	bl	80045ac <__sfp_lock_release>
 8004680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004688:	6025      	str	r5, [r4, #0]
 800468a:	61a5      	str	r5, [r4, #24]
 800468c:	2208      	movs	r2, #8
 800468e:	4629      	mov	r1, r5
 8004690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004694:	f7ff fe66 	bl	8004364 <memset>
 8004698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800469c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046a0:	4620      	mov	r0, r4
 80046a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046a4:	3468      	adds	r4, #104	; 0x68
 80046a6:	e7d9      	b.n	800465c <__sfp+0x1c>
 80046a8:	2104      	movs	r1, #4
 80046aa:	4638      	mov	r0, r7
 80046ac:	f7ff ff62 	bl	8004574 <__sfmoreglue>
 80046b0:	4604      	mov	r4, r0
 80046b2:	6030      	str	r0, [r6, #0]
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d1d5      	bne.n	8004664 <__sfp+0x24>
 80046b8:	f7ff ff78 	bl	80045ac <__sfp_lock_release>
 80046bc:	230c      	movs	r3, #12
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	e7ee      	b.n	80046a0 <__sfp+0x60>
 80046c2:	bf00      	nop
 80046c4:	080060d0 	.word	0x080060d0
 80046c8:	ffff0001 	.word	0xffff0001

080046cc <fiprintf>:
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	b503      	push	{r0, r1, lr}
 80046d0:	4601      	mov	r1, r0
 80046d2:	ab03      	add	r3, sp, #12
 80046d4:	4805      	ldr	r0, [pc, #20]	; (80046ec <fiprintf+0x20>)
 80046d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	f000 fa97 	bl	8004c10 <_vfiprintf_r>
 80046e2:	b002      	add	sp, #8
 80046e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e8:	b003      	add	sp, #12
 80046ea:	4770      	bx	lr
 80046ec:	20000014 	.word	0x20000014

080046f0 <_fwalk_reent>:
 80046f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f4:	4606      	mov	r6, r0
 80046f6:	4688      	mov	r8, r1
 80046f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046fc:	2700      	movs	r7, #0
 80046fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004702:	f1b9 0901 	subs.w	r9, r9, #1
 8004706:	d505      	bpl.n	8004714 <_fwalk_reent+0x24>
 8004708:	6824      	ldr	r4, [r4, #0]
 800470a:	2c00      	cmp	r4, #0
 800470c:	d1f7      	bne.n	80046fe <_fwalk_reent+0xe>
 800470e:	4638      	mov	r0, r7
 8004710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004714:	89ab      	ldrh	r3, [r5, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d907      	bls.n	800472a <_fwalk_reent+0x3a>
 800471a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800471e:	3301      	adds	r3, #1
 8004720:	d003      	beq.n	800472a <_fwalk_reent+0x3a>
 8004722:	4629      	mov	r1, r5
 8004724:	4630      	mov	r0, r6
 8004726:	47c0      	blx	r8
 8004728:	4307      	orrs	r7, r0
 800472a:	3568      	adds	r5, #104	; 0x68
 800472c:	e7e9      	b.n	8004702 <_fwalk_reent+0x12>

0800472e <__retarget_lock_init_recursive>:
 800472e:	4770      	bx	lr

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <malloc>:
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <malloc+0xc>)
 8004736:	4601      	mov	r1, r0
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	f000 b86f 	b.w	800481c <_malloc_r>
 800473e:	bf00      	nop
 8004740:	20000014 	.word	0x20000014

08004744 <_free_r>:
 8004744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004746:	2900      	cmp	r1, #0
 8004748:	d044      	beq.n	80047d4 <_free_r+0x90>
 800474a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474e:	9001      	str	r0, [sp, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f1a1 0404 	sub.w	r4, r1, #4
 8004756:	bfb8      	it	lt
 8004758:	18e4      	addlt	r4, r4, r3
 800475a:	f000 ffaf 	bl	80056bc <__malloc_lock>
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <_free_r+0x94>)
 8004760:	9801      	ldr	r0, [sp, #4]
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	b933      	cbnz	r3, 8004774 <_free_r+0x30>
 8004766:	6063      	str	r3, [r4, #4]
 8004768:	6014      	str	r4, [r2, #0]
 800476a:	b003      	add	sp, #12
 800476c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004770:	f000 bfaa 	b.w	80056c8 <__malloc_unlock>
 8004774:	42a3      	cmp	r3, r4
 8004776:	d908      	bls.n	800478a <_free_r+0x46>
 8004778:	6825      	ldr	r5, [r4, #0]
 800477a:	1961      	adds	r1, r4, r5
 800477c:	428b      	cmp	r3, r1
 800477e:	bf01      	itttt	eq
 8004780:	6819      	ldreq	r1, [r3, #0]
 8004782:	685b      	ldreq	r3, [r3, #4]
 8004784:	1949      	addeq	r1, r1, r5
 8004786:	6021      	streq	r1, [r4, #0]
 8004788:	e7ed      	b.n	8004766 <_free_r+0x22>
 800478a:	461a      	mov	r2, r3
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	b10b      	cbz	r3, 8004794 <_free_r+0x50>
 8004790:	42a3      	cmp	r3, r4
 8004792:	d9fa      	bls.n	800478a <_free_r+0x46>
 8004794:	6811      	ldr	r1, [r2, #0]
 8004796:	1855      	adds	r5, r2, r1
 8004798:	42a5      	cmp	r5, r4
 800479a:	d10b      	bne.n	80047b4 <_free_r+0x70>
 800479c:	6824      	ldr	r4, [r4, #0]
 800479e:	4421      	add	r1, r4
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	d1e0      	bne.n	800476a <_free_r+0x26>
 80047a8:	681c      	ldr	r4, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	6053      	str	r3, [r2, #4]
 80047ae:	4421      	add	r1, r4
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	e7da      	b.n	800476a <_free_r+0x26>
 80047b4:	d902      	bls.n	80047bc <_free_r+0x78>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6003      	str	r3, [r0, #0]
 80047ba:	e7d6      	b.n	800476a <_free_r+0x26>
 80047bc:	6825      	ldr	r5, [r4, #0]
 80047be:	1961      	adds	r1, r4, r5
 80047c0:	428b      	cmp	r3, r1
 80047c2:	bf04      	itt	eq
 80047c4:	6819      	ldreq	r1, [r3, #0]
 80047c6:	685b      	ldreq	r3, [r3, #4]
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	bf04      	itt	eq
 80047cc:	1949      	addeq	r1, r1, r5
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	6054      	str	r4, [r2, #4]
 80047d2:	e7ca      	b.n	800476a <_free_r+0x26>
 80047d4:	b003      	add	sp, #12
 80047d6:	bd30      	pop	{r4, r5, pc}
 80047d8:	20012e68 	.word	0x20012e68

080047dc <sbrk_aligned>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4e0e      	ldr	r6, [pc, #56]	; (8004818 <sbrk_aligned+0x3c>)
 80047e0:	460c      	mov	r4, r1
 80047e2:	6831      	ldr	r1, [r6, #0]
 80047e4:	4605      	mov	r5, r0
 80047e6:	b911      	cbnz	r1, 80047ee <sbrk_aligned+0x12>
 80047e8:	f000 fcd6 	bl	8005198 <_sbrk_r>
 80047ec:	6030      	str	r0, [r6, #0]
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 fcd1 	bl	8005198 <_sbrk_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d00a      	beq.n	8004810 <sbrk_aligned+0x34>
 80047fa:	1cc4      	adds	r4, r0, #3
 80047fc:	f024 0403 	bic.w	r4, r4, #3
 8004800:	42a0      	cmp	r0, r4
 8004802:	d007      	beq.n	8004814 <sbrk_aligned+0x38>
 8004804:	1a21      	subs	r1, r4, r0
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fcc6 	bl	8005198 <_sbrk_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d101      	bne.n	8004814 <sbrk_aligned+0x38>
 8004810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004814:	4620      	mov	r0, r4
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	20012e6c 	.word	0x20012e6c

0800481c <_malloc_r>:
 800481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004820:	1ccd      	adds	r5, r1, #3
 8004822:	f025 0503 	bic.w	r5, r5, #3
 8004826:	3508      	adds	r5, #8
 8004828:	2d0c      	cmp	r5, #12
 800482a:	bf38      	it	cc
 800482c:	250c      	movcc	r5, #12
 800482e:	2d00      	cmp	r5, #0
 8004830:	4607      	mov	r7, r0
 8004832:	db01      	blt.n	8004838 <_malloc_r+0x1c>
 8004834:	42a9      	cmp	r1, r5
 8004836:	d905      	bls.n	8004844 <_malloc_r+0x28>
 8004838:	230c      	movs	r3, #12
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	2600      	movs	r6, #0
 800483e:	4630      	mov	r0, r6
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	4e2e      	ldr	r6, [pc, #184]	; (8004900 <_malloc_r+0xe4>)
 8004846:	f000 ff39 	bl	80056bc <__malloc_lock>
 800484a:	6833      	ldr	r3, [r6, #0]
 800484c:	461c      	mov	r4, r3
 800484e:	bb34      	cbnz	r4, 800489e <_malloc_r+0x82>
 8004850:	4629      	mov	r1, r5
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff ffc2 	bl	80047dc <sbrk_aligned>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	4604      	mov	r4, r0
 800485c:	d14d      	bne.n	80048fa <_malloc_r+0xde>
 800485e:	6834      	ldr	r4, [r6, #0]
 8004860:	4626      	mov	r6, r4
 8004862:	2e00      	cmp	r6, #0
 8004864:	d140      	bne.n	80048e8 <_malloc_r+0xcc>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4631      	mov	r1, r6
 800486a:	4638      	mov	r0, r7
 800486c:	eb04 0803 	add.w	r8, r4, r3
 8004870:	f000 fc92 	bl	8005198 <_sbrk_r>
 8004874:	4580      	cmp	r8, r0
 8004876:	d13a      	bne.n	80048ee <_malloc_r+0xd2>
 8004878:	6821      	ldr	r1, [r4, #0]
 800487a:	3503      	adds	r5, #3
 800487c:	1a6d      	subs	r5, r5, r1
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	4629      	mov	r1, r5
 800488c:	4638      	mov	r0, r7
 800488e:	f7ff ffa5 	bl	80047dc <sbrk_aligned>
 8004892:	3001      	adds	r0, #1
 8004894:	d02b      	beq.n	80048ee <_malloc_r+0xd2>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	442b      	add	r3, r5
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	e00e      	b.n	80048bc <_malloc_r+0xa0>
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	1b52      	subs	r2, r2, r5
 80048a2:	d41e      	bmi.n	80048e2 <_malloc_r+0xc6>
 80048a4:	2a0b      	cmp	r2, #11
 80048a6:	d916      	bls.n	80048d6 <_malloc_r+0xba>
 80048a8:	1961      	adds	r1, r4, r5
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	6025      	str	r5, [r4, #0]
 80048ae:	bf18      	it	ne
 80048b0:	6059      	strne	r1, [r3, #4]
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	bf08      	it	eq
 80048b6:	6031      	streq	r1, [r6, #0]
 80048b8:	5162      	str	r2, [r4, r5]
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	4638      	mov	r0, r7
 80048be:	f104 060b 	add.w	r6, r4, #11
 80048c2:	f000 ff01 	bl	80056c8 <__malloc_unlock>
 80048c6:	f026 0607 	bic.w	r6, r6, #7
 80048ca:	1d23      	adds	r3, r4, #4
 80048cc:	1af2      	subs	r2, r6, r3
 80048ce:	d0b6      	beq.n	800483e <_malloc_r+0x22>
 80048d0:	1b9b      	subs	r3, r3, r6
 80048d2:	50a3      	str	r3, [r4, r2]
 80048d4:	e7b3      	b.n	800483e <_malloc_r+0x22>
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	42a3      	cmp	r3, r4
 80048da:	bf0c      	ite	eq
 80048dc:	6032      	streq	r2, [r6, #0]
 80048de:	605a      	strne	r2, [r3, #4]
 80048e0:	e7ec      	b.n	80048bc <_malloc_r+0xa0>
 80048e2:	4623      	mov	r3, r4
 80048e4:	6864      	ldr	r4, [r4, #4]
 80048e6:	e7b2      	b.n	800484e <_malloc_r+0x32>
 80048e8:	4634      	mov	r4, r6
 80048ea:	6876      	ldr	r6, [r6, #4]
 80048ec:	e7b9      	b.n	8004862 <_malloc_r+0x46>
 80048ee:	230c      	movs	r3, #12
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4638      	mov	r0, r7
 80048f4:	f000 fee8 	bl	80056c8 <__malloc_unlock>
 80048f8:	e7a1      	b.n	800483e <_malloc_r+0x22>
 80048fa:	6025      	str	r5, [r4, #0]
 80048fc:	e7de      	b.n	80048bc <_malloc_r+0xa0>
 80048fe:	bf00      	nop
 8004900:	20012e68 	.word	0x20012e68

08004904 <__ssputs_r>:
 8004904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	688e      	ldr	r6, [r1, #8]
 800490a:	429e      	cmp	r6, r3
 800490c:	4682      	mov	sl, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4690      	mov	r8, r2
 8004912:	461f      	mov	r7, r3
 8004914:	d838      	bhi.n	8004988 <__ssputs_r+0x84>
 8004916:	898a      	ldrh	r2, [r1, #12]
 8004918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800491c:	d032      	beq.n	8004984 <__ssputs_r+0x80>
 800491e:	6825      	ldr	r5, [r4, #0]
 8004920:	6909      	ldr	r1, [r1, #16]
 8004922:	eba5 0901 	sub.w	r9, r5, r1
 8004926:	6965      	ldr	r5, [r4, #20]
 8004928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800492c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004930:	3301      	adds	r3, #1
 8004932:	444b      	add	r3, r9
 8004934:	106d      	asrs	r5, r5, #1
 8004936:	429d      	cmp	r5, r3
 8004938:	bf38      	it	cc
 800493a:	461d      	movcc	r5, r3
 800493c:	0553      	lsls	r3, r2, #21
 800493e:	d531      	bpl.n	80049a4 <__ssputs_r+0xa0>
 8004940:	4629      	mov	r1, r5
 8004942:	f7ff ff6b 	bl	800481c <_malloc_r>
 8004946:	4606      	mov	r6, r0
 8004948:	b950      	cbnz	r0, 8004960 <__ssputs_r+0x5c>
 800494a:	230c      	movs	r3, #12
 800494c:	f8ca 3000 	str.w	r3, [sl]
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004956:	81a3      	strh	r3, [r4, #12]
 8004958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004960:	6921      	ldr	r1, [r4, #16]
 8004962:	464a      	mov	r2, r9
 8004964:	f7ff fcf0 	bl	8004348 <memcpy>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800496e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	6126      	str	r6, [r4, #16]
 8004976:	6165      	str	r5, [r4, #20]
 8004978:	444e      	add	r6, r9
 800497a:	eba5 0509 	sub.w	r5, r5, r9
 800497e:	6026      	str	r6, [r4, #0]
 8004980:	60a5      	str	r5, [r4, #8]
 8004982:	463e      	mov	r6, r7
 8004984:	42be      	cmp	r6, r7
 8004986:	d900      	bls.n	800498a <__ssputs_r+0x86>
 8004988:	463e      	mov	r6, r7
 800498a:	6820      	ldr	r0, [r4, #0]
 800498c:	4632      	mov	r2, r6
 800498e:	4641      	mov	r1, r8
 8004990:	f000 fe7a 	bl	8005688 <memmove>
 8004994:	68a3      	ldr	r3, [r4, #8]
 8004996:	1b9b      	subs	r3, r3, r6
 8004998:	60a3      	str	r3, [r4, #8]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	4433      	add	r3, r6
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	2000      	movs	r0, #0
 80049a2:	e7db      	b.n	800495c <__ssputs_r+0x58>
 80049a4:	462a      	mov	r2, r5
 80049a6:	f000 fe95 	bl	80056d4 <_realloc_r>
 80049aa:	4606      	mov	r6, r0
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d1e1      	bne.n	8004974 <__ssputs_r+0x70>
 80049b0:	6921      	ldr	r1, [r4, #16]
 80049b2:	4650      	mov	r0, sl
 80049b4:	f7ff fec6 	bl	8004744 <_free_r>
 80049b8:	e7c7      	b.n	800494a <__ssputs_r+0x46>
	...

080049bc <_svfiprintf_r>:
 80049bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c0:	4698      	mov	r8, r3
 80049c2:	898b      	ldrh	r3, [r1, #12]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	b09d      	sub	sp, #116	; 0x74
 80049c8:	4607      	mov	r7, r0
 80049ca:	460d      	mov	r5, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	d50e      	bpl.n	80049ee <_svfiprintf_r+0x32>
 80049d0:	690b      	ldr	r3, [r1, #16]
 80049d2:	b963      	cbnz	r3, 80049ee <_svfiprintf_r+0x32>
 80049d4:	2140      	movs	r1, #64	; 0x40
 80049d6:	f7ff ff21 	bl	800481c <_malloc_r>
 80049da:	6028      	str	r0, [r5, #0]
 80049dc:	6128      	str	r0, [r5, #16]
 80049de:	b920      	cbnz	r0, 80049ea <_svfiprintf_r+0x2e>
 80049e0:	230c      	movs	r3, #12
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e8:	e0d1      	b.n	8004b8e <_svfiprintf_r+0x1d2>
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	616b      	str	r3, [r5, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9309      	str	r3, [sp, #36]	; 0x24
 80049f2:	2320      	movs	r3, #32
 80049f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049fc:	2330      	movs	r3, #48	; 0x30
 80049fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ba8 <_svfiprintf_r+0x1ec>
 8004a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a06:	f04f 0901 	mov.w	r9, #1
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	469a      	mov	sl, r3
 8004a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a12:	b10a      	cbz	r2, 8004a18 <_svfiprintf_r+0x5c>
 8004a14:	2a25      	cmp	r2, #37	; 0x25
 8004a16:	d1f9      	bne.n	8004a0c <_svfiprintf_r+0x50>
 8004a18:	ebba 0b04 	subs.w	fp, sl, r4
 8004a1c:	d00b      	beq.n	8004a36 <_svfiprintf_r+0x7a>
 8004a1e:	465b      	mov	r3, fp
 8004a20:	4622      	mov	r2, r4
 8004a22:	4629      	mov	r1, r5
 8004a24:	4638      	mov	r0, r7
 8004a26:	f7ff ff6d 	bl	8004904 <__ssputs_r>
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f000 80aa 	beq.w	8004b84 <_svfiprintf_r+0x1c8>
 8004a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a32:	445a      	add	r2, fp
 8004a34:	9209      	str	r2, [sp, #36]	; 0x24
 8004a36:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a2 	beq.w	8004b84 <_svfiprintf_r+0x1c8>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a4a:	f10a 0a01 	add.w	sl, sl, #1
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a56:	931a      	str	r3, [sp, #104]	; 0x68
 8004a58:	4654      	mov	r4, sl
 8004a5a:	2205      	movs	r2, #5
 8004a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a60:	4851      	ldr	r0, [pc, #324]	; (8004ba8 <_svfiprintf_r+0x1ec>)
 8004a62:	f7fb fbbd 	bl	80001e0 <memchr>
 8004a66:	9a04      	ldr	r2, [sp, #16]
 8004a68:	b9d8      	cbnz	r0, 8004aa2 <_svfiprintf_r+0xe6>
 8004a6a:	06d0      	lsls	r0, r2, #27
 8004a6c:	bf44      	itt	mi
 8004a6e:	2320      	movmi	r3, #32
 8004a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a74:	0711      	lsls	r1, r2, #28
 8004a76:	bf44      	itt	mi
 8004a78:	232b      	movmi	r3, #43	; 0x2b
 8004a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a82:	2b2a      	cmp	r3, #42	; 0x2a
 8004a84:	d015      	beq.n	8004ab2 <_svfiprintf_r+0xf6>
 8004a86:	9a07      	ldr	r2, [sp, #28]
 8004a88:	4654      	mov	r4, sl
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f04f 0c0a 	mov.w	ip, #10
 8004a90:	4621      	mov	r1, r4
 8004a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a96:	3b30      	subs	r3, #48	; 0x30
 8004a98:	2b09      	cmp	r3, #9
 8004a9a:	d94e      	bls.n	8004b3a <_svfiprintf_r+0x17e>
 8004a9c:	b1b0      	cbz	r0, 8004acc <_svfiprintf_r+0x110>
 8004a9e:	9207      	str	r2, [sp, #28]
 8004aa0:	e014      	b.n	8004acc <_svfiprintf_r+0x110>
 8004aa2:	eba0 0308 	sub.w	r3, r0, r8
 8004aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	46a2      	mov	sl, r4
 8004ab0:	e7d2      	b.n	8004a58 <_svfiprintf_r+0x9c>
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	1d19      	adds	r1, r3, #4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	9103      	str	r1, [sp, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfbb      	ittet	lt
 8004abe:	425b      	neglt	r3, r3
 8004ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ac4:	9307      	strge	r3, [sp, #28]
 8004ac6:	9307      	strlt	r3, [sp, #28]
 8004ac8:	bfb8      	it	lt
 8004aca:	9204      	strlt	r2, [sp, #16]
 8004acc:	7823      	ldrb	r3, [r4, #0]
 8004ace:	2b2e      	cmp	r3, #46	; 0x2e
 8004ad0:	d10c      	bne.n	8004aec <_svfiprintf_r+0x130>
 8004ad2:	7863      	ldrb	r3, [r4, #1]
 8004ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad6:	d135      	bne.n	8004b44 <_svfiprintf_r+0x188>
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bfb8      	it	lt
 8004ae4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ae8:	3402      	adds	r4, #2
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bb8 <_svfiprintf_r+0x1fc>
 8004af0:	7821      	ldrb	r1, [r4, #0]
 8004af2:	2203      	movs	r2, #3
 8004af4:	4650      	mov	r0, sl
 8004af6:	f7fb fb73 	bl	80001e0 <memchr>
 8004afa:	b140      	cbz	r0, 8004b0e <_svfiprintf_r+0x152>
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	eba0 000a 	sub.w	r0, r0, sl
 8004b02:	fa03 f000 	lsl.w	r0, r3, r0
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	4303      	orrs	r3, r0
 8004b0a:	3401      	adds	r4, #1
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b12:	4826      	ldr	r0, [pc, #152]	; (8004bac <_svfiprintf_r+0x1f0>)
 8004b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b18:	2206      	movs	r2, #6
 8004b1a:	f7fb fb61 	bl	80001e0 <memchr>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d038      	beq.n	8004b94 <_svfiprintf_r+0x1d8>
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <_svfiprintf_r+0x1f4>)
 8004b24:	bb1b      	cbnz	r3, 8004b6e <_svfiprintf_r+0x1b2>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	3307      	adds	r3, #7
 8004b2a:	f023 0307 	bic.w	r3, r3, #7
 8004b2e:	3308      	adds	r3, #8
 8004b30:	9303      	str	r3, [sp, #12]
 8004b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b34:	4433      	add	r3, r6
 8004b36:	9309      	str	r3, [sp, #36]	; 0x24
 8004b38:	e767      	b.n	8004a0a <_svfiprintf_r+0x4e>
 8004b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b3e:	460c      	mov	r4, r1
 8004b40:	2001      	movs	r0, #1
 8004b42:	e7a5      	b.n	8004a90 <_svfiprintf_r+0xd4>
 8004b44:	2300      	movs	r3, #0
 8004b46:	3401      	adds	r4, #1
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f04f 0c0a 	mov.w	ip, #10
 8004b50:	4620      	mov	r0, r4
 8004b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b56:	3a30      	subs	r2, #48	; 0x30
 8004b58:	2a09      	cmp	r2, #9
 8004b5a:	d903      	bls.n	8004b64 <_svfiprintf_r+0x1a8>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0c5      	beq.n	8004aec <_svfiprintf_r+0x130>
 8004b60:	9105      	str	r1, [sp, #20]
 8004b62:	e7c3      	b.n	8004aec <_svfiprintf_r+0x130>
 8004b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b68:	4604      	mov	r4, r0
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e7f0      	b.n	8004b50 <_svfiprintf_r+0x194>
 8004b6e:	ab03      	add	r3, sp, #12
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	462a      	mov	r2, r5
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <_svfiprintf_r+0x1f8>)
 8004b76:	a904      	add	r1, sp, #16
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f3af 8000 	nop.w
 8004b7e:	1c42      	adds	r2, r0, #1
 8004b80:	4606      	mov	r6, r0
 8004b82:	d1d6      	bne.n	8004b32 <_svfiprintf_r+0x176>
 8004b84:	89ab      	ldrh	r3, [r5, #12]
 8004b86:	065b      	lsls	r3, r3, #25
 8004b88:	f53f af2c 	bmi.w	80049e4 <_svfiprintf_r+0x28>
 8004b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b8e:	b01d      	add	sp, #116	; 0x74
 8004b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	462a      	mov	r2, r5
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <_svfiprintf_r+0x1f8>)
 8004b9c:	a904      	add	r1, sp, #16
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f000 f9d4 	bl	8004f4c <_printf_i>
 8004ba4:	e7eb      	b.n	8004b7e <_svfiprintf_r+0x1c2>
 8004ba6:	bf00      	nop
 8004ba8:	080061e4 	.word	0x080061e4
 8004bac:	080061ee 	.word	0x080061ee
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	08004905 	.word	0x08004905
 8004bb8:	080061ea 	.word	0x080061ea

08004bbc <__sfputc_r>:
 8004bbc:	6893      	ldr	r3, [r2, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	b410      	push	{r4}
 8004bc4:	6093      	str	r3, [r2, #8]
 8004bc6:	da08      	bge.n	8004bda <__sfputc_r+0x1e>
 8004bc8:	6994      	ldr	r4, [r2, #24]
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	db01      	blt.n	8004bd2 <__sfputc_r+0x16>
 8004bce:	290a      	cmp	r1, #10
 8004bd0:	d103      	bne.n	8004bda <__sfputc_r+0x1e>
 8004bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd6:	f000 bb33 	b.w	8005240 <__swbuf_r>
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	1c58      	adds	r0, r3, #1
 8004bde:	6010      	str	r0, [r2, #0]
 8004be0:	7019      	strb	r1, [r3, #0]
 8004be2:	4608      	mov	r0, r1
 8004be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <__sfputs_r>:
 8004bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bec:	4606      	mov	r6, r0
 8004bee:	460f      	mov	r7, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	18d5      	adds	r5, r2, r3
 8004bf4:	42ac      	cmp	r4, r5
 8004bf6:	d101      	bne.n	8004bfc <__sfputs_r+0x12>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e007      	b.n	8004c0c <__sfputs_r+0x22>
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	463a      	mov	r2, r7
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff ffda 	bl	8004bbc <__sfputc_r>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d1f3      	bne.n	8004bf4 <__sfputs_r+0xa>
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c10 <_vfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	460d      	mov	r5, r1
 8004c16:	b09d      	sub	sp, #116	; 0x74
 8004c18:	4614      	mov	r4, r2
 8004c1a:	4698      	mov	r8, r3
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	b118      	cbz	r0, 8004c28 <_vfiprintf_r+0x18>
 8004c20:	6983      	ldr	r3, [r0, #24]
 8004c22:	b90b      	cbnz	r3, 8004c28 <_vfiprintf_r+0x18>
 8004c24:	f7ff fcd4 	bl	80045d0 <__sinit>
 8004c28:	4b89      	ldr	r3, [pc, #548]	; (8004e50 <_vfiprintf_r+0x240>)
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	d11b      	bne.n	8004c66 <_vfiprintf_r+0x56>
 8004c2e:	6875      	ldr	r5, [r6, #4]
 8004c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c32:	07d9      	lsls	r1, r3, #31
 8004c34:	d405      	bmi.n	8004c42 <_vfiprintf_r+0x32>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	059a      	lsls	r2, r3, #22
 8004c3a:	d402      	bmi.n	8004c42 <_vfiprintf_r+0x32>
 8004c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c3e:	f7ff fd77 	bl	8004730 <__retarget_lock_acquire_recursive>
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	d501      	bpl.n	8004c4c <_vfiprintf_r+0x3c>
 8004c48:	692b      	ldr	r3, [r5, #16]
 8004c4a:	b9eb      	cbnz	r3, 8004c88 <_vfiprintf_r+0x78>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 fb5a 	bl	8005308 <__swsetup_r>
 8004c54:	b1c0      	cbz	r0, 8004c88 <_vfiprintf_r+0x78>
 8004c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c58:	07dc      	lsls	r4, r3, #31
 8004c5a:	d50e      	bpl.n	8004c7a <_vfiprintf_r+0x6a>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c60:	b01d      	add	sp, #116	; 0x74
 8004c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c66:	4b7b      	ldr	r3, [pc, #492]	; (8004e54 <_vfiprintf_r+0x244>)
 8004c68:	429d      	cmp	r5, r3
 8004c6a:	d101      	bne.n	8004c70 <_vfiprintf_r+0x60>
 8004c6c:	68b5      	ldr	r5, [r6, #8]
 8004c6e:	e7df      	b.n	8004c30 <_vfiprintf_r+0x20>
 8004c70:	4b79      	ldr	r3, [pc, #484]	; (8004e58 <_vfiprintf_r+0x248>)
 8004c72:	429d      	cmp	r5, r3
 8004c74:	bf08      	it	eq
 8004c76:	68f5      	ldreq	r5, [r6, #12]
 8004c78:	e7da      	b.n	8004c30 <_vfiprintf_r+0x20>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	0598      	lsls	r0, r3, #22
 8004c7e:	d4ed      	bmi.n	8004c5c <_vfiprintf_r+0x4c>
 8004c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c82:	f7ff fd56 	bl	8004732 <__retarget_lock_release_recursive>
 8004c86:	e7e9      	b.n	8004c5c <_vfiprintf_r+0x4c>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c96:	2330      	movs	r3, #48	; 0x30
 8004c98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e5c <_vfiprintf_r+0x24c>
 8004c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ca0:	f04f 0901 	mov.w	r9, #1
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	469a      	mov	sl, r3
 8004ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cac:	b10a      	cbz	r2, 8004cb2 <_vfiprintf_r+0xa2>
 8004cae:	2a25      	cmp	r2, #37	; 0x25
 8004cb0:	d1f9      	bne.n	8004ca6 <_vfiprintf_r+0x96>
 8004cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb6:	d00b      	beq.n	8004cd0 <_vfiprintf_r+0xc0>
 8004cb8:	465b      	mov	r3, fp
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ff93 	bl	8004bea <__sfputs_r>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f000 80aa 	beq.w	8004e1e <_vfiprintf_r+0x20e>
 8004cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ccc:	445a      	add	r2, fp
 8004cce:	9209      	str	r2, [sp, #36]	; 0x24
 8004cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a2 	beq.w	8004e1e <_vfiprintf_r+0x20e>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce4:	f10a 0a01 	add.w	sl, sl, #1
 8004ce8:	9304      	str	r3, [sp, #16]
 8004cea:	9307      	str	r3, [sp, #28]
 8004cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf2:	4654      	mov	r4, sl
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfa:	4858      	ldr	r0, [pc, #352]	; (8004e5c <_vfiprintf_r+0x24c>)
 8004cfc:	f7fb fa70 	bl	80001e0 <memchr>
 8004d00:	9a04      	ldr	r2, [sp, #16]
 8004d02:	b9d8      	cbnz	r0, 8004d3c <_vfiprintf_r+0x12c>
 8004d04:	06d1      	lsls	r1, r2, #27
 8004d06:	bf44      	itt	mi
 8004d08:	2320      	movmi	r3, #32
 8004d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d0e:	0713      	lsls	r3, r2, #28
 8004d10:	bf44      	itt	mi
 8004d12:	232b      	movmi	r3, #43	; 0x2b
 8004d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d18:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1e:	d015      	beq.n	8004d4c <_vfiprintf_r+0x13c>
 8004d20:	9a07      	ldr	r2, [sp, #28]
 8004d22:	4654      	mov	r4, sl
 8004d24:	2000      	movs	r0, #0
 8004d26:	f04f 0c0a 	mov.w	ip, #10
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d30:	3b30      	subs	r3, #48	; 0x30
 8004d32:	2b09      	cmp	r3, #9
 8004d34:	d94e      	bls.n	8004dd4 <_vfiprintf_r+0x1c4>
 8004d36:	b1b0      	cbz	r0, 8004d66 <_vfiprintf_r+0x156>
 8004d38:	9207      	str	r2, [sp, #28]
 8004d3a:	e014      	b.n	8004d66 <_vfiprintf_r+0x156>
 8004d3c:	eba0 0308 	sub.w	r3, r0, r8
 8004d40:	fa09 f303 	lsl.w	r3, r9, r3
 8004d44:	4313      	orrs	r3, r2
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	46a2      	mov	sl, r4
 8004d4a:	e7d2      	b.n	8004cf2 <_vfiprintf_r+0xe2>
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	1d19      	adds	r1, r3, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	9103      	str	r1, [sp, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bfbb      	ittet	lt
 8004d58:	425b      	neglt	r3, r3
 8004d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d5e:	9307      	strge	r3, [sp, #28]
 8004d60:	9307      	strlt	r3, [sp, #28]
 8004d62:	bfb8      	it	lt
 8004d64:	9204      	strlt	r2, [sp, #16]
 8004d66:	7823      	ldrb	r3, [r4, #0]
 8004d68:	2b2e      	cmp	r3, #46	; 0x2e
 8004d6a:	d10c      	bne.n	8004d86 <_vfiprintf_r+0x176>
 8004d6c:	7863      	ldrb	r3, [r4, #1]
 8004d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d70:	d135      	bne.n	8004dde <_vfiprintf_r+0x1ce>
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	1d1a      	adds	r2, r3, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	9203      	str	r2, [sp, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfb8      	it	lt
 8004d7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d82:	3402      	adds	r4, #2
 8004d84:	9305      	str	r3, [sp, #20]
 8004d86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e6c <_vfiprintf_r+0x25c>
 8004d8a:	7821      	ldrb	r1, [r4, #0]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	4650      	mov	r0, sl
 8004d90:	f7fb fa26 	bl	80001e0 <memchr>
 8004d94:	b140      	cbz	r0, 8004da8 <_vfiprintf_r+0x198>
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	eba0 000a 	sub.w	r0, r0, sl
 8004d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8004da0:	9b04      	ldr	r3, [sp, #16]
 8004da2:	4303      	orrs	r3, r0
 8004da4:	3401      	adds	r4, #1
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dac:	482c      	ldr	r0, [pc, #176]	; (8004e60 <_vfiprintf_r+0x250>)
 8004dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004db2:	2206      	movs	r2, #6
 8004db4:	f7fb fa14 	bl	80001e0 <memchr>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d03f      	beq.n	8004e3c <_vfiprintf_r+0x22c>
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <_vfiprintf_r+0x254>)
 8004dbe:	bb1b      	cbnz	r3, 8004e08 <_vfiprintf_r+0x1f8>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	3308      	adds	r3, #8
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dce:	443b      	add	r3, r7
 8004dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd2:	e767      	b.n	8004ca4 <_vfiprintf_r+0x94>
 8004dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dd8:	460c      	mov	r4, r1
 8004dda:	2001      	movs	r0, #1
 8004ddc:	e7a5      	b.n	8004d2a <_vfiprintf_r+0x11a>
 8004dde:	2300      	movs	r3, #0
 8004de0:	3401      	adds	r4, #1
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	4619      	mov	r1, r3
 8004de6:	f04f 0c0a 	mov.w	ip, #10
 8004dea:	4620      	mov	r0, r4
 8004dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df0:	3a30      	subs	r2, #48	; 0x30
 8004df2:	2a09      	cmp	r2, #9
 8004df4:	d903      	bls.n	8004dfe <_vfiprintf_r+0x1ee>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0c5      	beq.n	8004d86 <_vfiprintf_r+0x176>
 8004dfa:	9105      	str	r1, [sp, #20]
 8004dfc:	e7c3      	b.n	8004d86 <_vfiprintf_r+0x176>
 8004dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e02:	4604      	mov	r4, r0
 8004e04:	2301      	movs	r3, #1
 8004e06:	e7f0      	b.n	8004dea <_vfiprintf_r+0x1da>
 8004e08:	ab03      	add	r3, sp, #12
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <_vfiprintf_r+0x258>)
 8004e10:	a904      	add	r1, sp, #16
 8004e12:	4630      	mov	r0, r6
 8004e14:	f3af 8000 	nop.w
 8004e18:	4607      	mov	r7, r0
 8004e1a:	1c78      	adds	r0, r7, #1
 8004e1c:	d1d6      	bne.n	8004dcc <_vfiprintf_r+0x1bc>
 8004e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e20:	07d9      	lsls	r1, r3, #31
 8004e22:	d405      	bmi.n	8004e30 <_vfiprintf_r+0x220>
 8004e24:	89ab      	ldrh	r3, [r5, #12]
 8004e26:	059a      	lsls	r2, r3, #22
 8004e28:	d402      	bmi.n	8004e30 <_vfiprintf_r+0x220>
 8004e2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e2c:	f7ff fc81 	bl	8004732 <__retarget_lock_release_recursive>
 8004e30:	89ab      	ldrh	r3, [r5, #12]
 8004e32:	065b      	lsls	r3, r3, #25
 8004e34:	f53f af12 	bmi.w	8004c5c <_vfiprintf_r+0x4c>
 8004e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3a:	e711      	b.n	8004c60 <_vfiprintf_r+0x50>
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	462a      	mov	r2, r5
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <_vfiprintf_r+0x258>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 f880 	bl	8004f4c <_printf_i>
 8004e4c:	e7e4      	b.n	8004e18 <_vfiprintf_r+0x208>
 8004e4e:	bf00      	nop
 8004e50:	080061a4 	.word	0x080061a4
 8004e54:	080061c4 	.word	0x080061c4
 8004e58:	08006184 	.word	0x08006184
 8004e5c:	080061e4 	.word	0x080061e4
 8004e60:	080061ee 	.word	0x080061ee
 8004e64:	00000000 	.word	0x00000000
 8004e68:	08004beb 	.word	0x08004beb
 8004e6c:	080061ea 	.word	0x080061ea

08004e70 <_printf_common>:
 8004e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	4616      	mov	r6, r2
 8004e76:	4699      	mov	r9, r3
 8004e78:	688a      	ldr	r2, [r1, #8]
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bfb8      	it	lt
 8004e84:	4613      	movlt	r3, r2
 8004e86:	6033      	str	r3, [r6, #0]
 8004e88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	b10a      	cbz	r2, 8004e96 <_printf_common+0x26>
 8004e92:	3301      	adds	r3, #1
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	0699      	lsls	r1, r3, #26
 8004e9a:	bf42      	ittt	mi
 8004e9c:	6833      	ldrmi	r3, [r6, #0]
 8004e9e:	3302      	addmi	r3, #2
 8004ea0:	6033      	strmi	r3, [r6, #0]
 8004ea2:	6825      	ldr	r5, [r4, #0]
 8004ea4:	f015 0506 	ands.w	r5, r5, #6
 8004ea8:	d106      	bne.n	8004eb8 <_printf_common+0x48>
 8004eaa:	f104 0a19 	add.w	sl, r4, #25
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	6832      	ldr	r2, [r6, #0]
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	42ab      	cmp	r3, r5
 8004eb6:	dc26      	bgt.n	8004f06 <_printf_common+0x96>
 8004eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ebc:	1e13      	subs	r3, r2, #0
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	bf18      	it	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	0692      	lsls	r2, r2, #26
 8004ec6:	d42b      	bmi.n	8004f20 <_printf_common+0xb0>
 8004ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d01e      	beq.n	8004f14 <_printf_common+0xa4>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	68e5      	ldr	r5, [r4, #12]
 8004eda:	6832      	ldr	r2, [r6, #0]
 8004edc:	f003 0306 	and.w	r3, r3, #6
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	bf08      	it	eq
 8004ee4:	1aad      	subeq	r5, r5, r2
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	bf0c      	ite	eq
 8004eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef0:	2500      	movne	r5, #0
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	bfc4      	itt	gt
 8004ef6:	1a9b      	subgt	r3, r3, r2
 8004ef8:	18ed      	addgt	r5, r5, r3
 8004efa:	2600      	movs	r6, #0
 8004efc:	341a      	adds	r4, #26
 8004efe:	42b5      	cmp	r5, r6
 8004f00:	d11a      	bne.n	8004f38 <_printf_common+0xc8>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e008      	b.n	8004f18 <_printf_common+0xa8>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	47c0      	blx	r8
 8004f10:	3001      	adds	r0, #1
 8004f12:	d103      	bne.n	8004f1c <_printf_common+0xac>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	e7c6      	b.n	8004eae <_printf_common+0x3e>
 8004f20:	18e1      	adds	r1, r4, r3
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	2030      	movs	r0, #48	; 0x30
 8004f26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f2a:	4422      	add	r2, r4
 8004f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f34:	3302      	adds	r3, #2
 8004f36:	e7c7      	b.n	8004ec8 <_printf_common+0x58>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c0      	blx	r8
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0e6      	beq.n	8004f14 <_printf_common+0xa4>
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7d9      	b.n	8004efe <_printf_common+0x8e>
	...

08004f4c <_printf_i>:
 8004f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	7e0f      	ldrb	r7, [r1, #24]
 8004f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f54:	2f78      	cmp	r7, #120	; 0x78
 8004f56:	4691      	mov	r9, r2
 8004f58:	4680      	mov	r8, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	469a      	mov	sl, r3
 8004f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f62:	d807      	bhi.n	8004f74 <_printf_i+0x28>
 8004f64:	2f62      	cmp	r7, #98	; 0x62
 8004f66:	d80a      	bhi.n	8004f7e <_printf_i+0x32>
 8004f68:	2f00      	cmp	r7, #0
 8004f6a:	f000 80d8 	beq.w	800511e <_printf_i+0x1d2>
 8004f6e:	2f58      	cmp	r7, #88	; 0x58
 8004f70:	f000 80a3 	beq.w	80050ba <_printf_i+0x16e>
 8004f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f7c:	e03a      	b.n	8004ff4 <_printf_i+0xa8>
 8004f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f82:	2b15      	cmp	r3, #21
 8004f84:	d8f6      	bhi.n	8004f74 <_printf_i+0x28>
 8004f86:	a101      	add	r1, pc, #4	; (adr r1, 8004f8c <_printf_i+0x40>)
 8004f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004ff9 	.word	0x08004ff9
 8004f94:	08004f75 	.word	0x08004f75
 8004f98:	08004f75 	.word	0x08004f75
 8004f9c:	08004f75 	.word	0x08004f75
 8004fa0:	08004f75 	.word	0x08004f75
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f75 	.word	0x08004f75
 8004fac:	08004f75 	.word	0x08004f75
 8004fb0:	08004f75 	.word	0x08004f75
 8004fb4:	08004f75 	.word	0x08004f75
 8004fb8:	08005105 	.word	0x08005105
 8004fbc:	08005029 	.word	0x08005029
 8004fc0:	080050e7 	.word	0x080050e7
 8004fc4:	08004f75 	.word	0x08004f75
 8004fc8:	08004f75 	.word	0x08004f75
 8004fcc:	08005127 	.word	0x08005127
 8004fd0:	08004f75 	.word	0x08004f75
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004f75 	.word	0x08004f75
 8004fdc:	08004f75 	.word	0x08004f75
 8004fe0:	080050ef 	.word	0x080050ef
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	1d1a      	adds	r2, r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	602a      	str	r2, [r5, #0]
 8004fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0a3      	b.n	8005140 <_printf_i+0x1f4>
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	6829      	ldr	r1, [r5, #0]
 8004ffc:	0606      	lsls	r6, r0, #24
 8004ffe:	f101 0304 	add.w	r3, r1, #4
 8005002:	d50a      	bpl.n	800501a <_printf_i+0xce>
 8005004:	680e      	ldr	r6, [r1, #0]
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	2e00      	cmp	r6, #0
 800500a:	da03      	bge.n	8005014 <_printf_i+0xc8>
 800500c:	232d      	movs	r3, #45	; 0x2d
 800500e:	4276      	negs	r6, r6
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	485e      	ldr	r0, [pc, #376]	; (8005190 <_printf_i+0x244>)
 8005016:	230a      	movs	r3, #10
 8005018:	e019      	b.n	800504e <_printf_i+0x102>
 800501a:	680e      	ldr	r6, [r1, #0]
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005022:	bf18      	it	ne
 8005024:	b236      	sxthne	r6, r6
 8005026:	e7ef      	b.n	8005008 <_printf_i+0xbc>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	6029      	str	r1, [r5, #0]
 8005030:	0601      	lsls	r1, r0, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xec>
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xf2>
 8005038:	0646      	lsls	r6, r0, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe8>
 800503c:	881e      	ldrh	r6, [r3, #0]
 800503e:	4854      	ldr	r0, [pc, #336]	; (8005190 <_printf_i+0x244>)
 8005040:	2f6f      	cmp	r7, #111	; 0x6f
 8005042:	bf0c      	ite	eq
 8005044:	2308      	moveq	r3, #8
 8005046:	230a      	movne	r3, #10
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6865      	ldr	r5, [r4, #4]
 8005050:	60a5      	str	r5, [r4, #8]
 8005052:	2d00      	cmp	r5, #0
 8005054:	bfa2      	ittt	ge
 8005056:	6821      	ldrge	r1, [r4, #0]
 8005058:	f021 0104 	bicge.w	r1, r1, #4
 800505c:	6021      	strge	r1, [r4, #0]
 800505e:	b90e      	cbnz	r6, 8005064 <_printf_i+0x118>
 8005060:	2d00      	cmp	r5, #0
 8005062:	d04d      	beq.n	8005100 <_printf_i+0x1b4>
 8005064:	4615      	mov	r5, r2
 8005066:	fbb6 f1f3 	udiv	r1, r6, r3
 800506a:	fb03 6711 	mls	r7, r3, r1, r6
 800506e:	5dc7      	ldrb	r7, [r0, r7]
 8005070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005074:	4637      	mov	r7, r6
 8005076:	42bb      	cmp	r3, r7
 8005078:	460e      	mov	r6, r1
 800507a:	d9f4      	bls.n	8005066 <_printf_i+0x11a>
 800507c:	2b08      	cmp	r3, #8
 800507e:	d10b      	bne.n	8005098 <_printf_i+0x14c>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07de      	lsls	r6, r3, #31
 8005084:	d508      	bpl.n	8005098 <_printf_i+0x14c>
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	6861      	ldr	r1, [r4, #4]
 800508a:	4299      	cmp	r1, r3
 800508c:	bfde      	ittt	le
 800508e:	2330      	movle	r3, #48	; 0x30
 8005090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005094:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005098:	1b52      	subs	r2, r2, r5
 800509a:	6122      	str	r2, [r4, #16]
 800509c:	f8cd a000 	str.w	sl, [sp]
 80050a0:	464b      	mov	r3, r9
 80050a2:	aa03      	add	r2, sp, #12
 80050a4:	4621      	mov	r1, r4
 80050a6:	4640      	mov	r0, r8
 80050a8:	f7ff fee2 	bl	8004e70 <_printf_common>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d14c      	bne.n	800514a <_printf_i+0x1fe>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b4:	b004      	add	sp, #16
 80050b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ba:	4835      	ldr	r0, [pc, #212]	; (8005190 <_printf_i+0x244>)
 80050bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050c0:	6829      	ldr	r1, [r5, #0]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050c8:	6029      	str	r1, [r5, #0]
 80050ca:	061d      	lsls	r5, r3, #24
 80050cc:	d514      	bpl.n	80050f8 <_printf_i+0x1ac>
 80050ce:	07df      	lsls	r7, r3, #31
 80050d0:	bf44      	itt	mi
 80050d2:	f043 0320 	orrmi.w	r3, r3, #32
 80050d6:	6023      	strmi	r3, [r4, #0]
 80050d8:	b91e      	cbnz	r6, 80050e2 <_printf_i+0x196>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f023 0320 	bic.w	r3, r3, #32
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	2310      	movs	r3, #16
 80050e4:	e7b0      	b.n	8005048 <_printf_i+0xfc>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	f043 0320 	orr.w	r3, r3, #32
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	2378      	movs	r3, #120	; 0x78
 80050f0:	4828      	ldr	r0, [pc, #160]	; (8005194 <_printf_i+0x248>)
 80050f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f6:	e7e3      	b.n	80050c0 <_printf_i+0x174>
 80050f8:	0659      	lsls	r1, r3, #25
 80050fa:	bf48      	it	mi
 80050fc:	b2b6      	uxthmi	r6, r6
 80050fe:	e7e6      	b.n	80050ce <_printf_i+0x182>
 8005100:	4615      	mov	r5, r2
 8005102:	e7bb      	b.n	800507c <_printf_i+0x130>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	6826      	ldr	r6, [r4, #0]
 8005108:	6961      	ldr	r1, [r4, #20]
 800510a:	1d18      	adds	r0, r3, #4
 800510c:	6028      	str	r0, [r5, #0]
 800510e:	0635      	lsls	r5, r6, #24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	d501      	bpl.n	8005118 <_printf_i+0x1cc>
 8005114:	6019      	str	r1, [r3, #0]
 8005116:	e002      	b.n	800511e <_printf_i+0x1d2>
 8005118:	0670      	lsls	r0, r6, #25
 800511a:	d5fb      	bpl.n	8005114 <_printf_i+0x1c8>
 800511c:	8019      	strh	r1, [r3, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	4615      	mov	r5, r2
 8005124:	e7ba      	b.n	800509c <_printf_i+0x150>
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	681d      	ldr	r5, [r3, #0]
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	2100      	movs	r1, #0
 8005132:	4628      	mov	r0, r5
 8005134:	f7fb f854 	bl	80001e0 <memchr>
 8005138:	b108      	cbz	r0, 800513e <_printf_i+0x1f2>
 800513a:	1b40      	subs	r0, r0, r5
 800513c:	6060      	str	r0, [r4, #4]
 800513e:	6863      	ldr	r3, [r4, #4]
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	2300      	movs	r3, #0
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005148:	e7a8      	b.n	800509c <_printf_i+0x150>
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	462a      	mov	r2, r5
 800514e:	4649      	mov	r1, r9
 8005150:	4640      	mov	r0, r8
 8005152:	47d0      	blx	sl
 8005154:	3001      	adds	r0, #1
 8005156:	d0ab      	beq.n	80050b0 <_printf_i+0x164>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	079b      	lsls	r3, r3, #30
 800515c:	d413      	bmi.n	8005186 <_printf_i+0x23a>
 800515e:	68e0      	ldr	r0, [r4, #12]
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	4298      	cmp	r0, r3
 8005164:	bfb8      	it	lt
 8005166:	4618      	movlt	r0, r3
 8005168:	e7a4      	b.n	80050b4 <_printf_i+0x168>
 800516a:	2301      	movs	r3, #1
 800516c:	4632      	mov	r2, r6
 800516e:	4649      	mov	r1, r9
 8005170:	4640      	mov	r0, r8
 8005172:	47d0      	blx	sl
 8005174:	3001      	adds	r0, #1
 8005176:	d09b      	beq.n	80050b0 <_printf_i+0x164>
 8005178:	3501      	adds	r5, #1
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	9903      	ldr	r1, [sp, #12]
 800517e:	1a5b      	subs	r3, r3, r1
 8005180:	42ab      	cmp	r3, r5
 8005182:	dcf2      	bgt.n	800516a <_printf_i+0x21e>
 8005184:	e7eb      	b.n	800515e <_printf_i+0x212>
 8005186:	2500      	movs	r5, #0
 8005188:	f104 0619 	add.w	r6, r4, #25
 800518c:	e7f5      	b.n	800517a <_printf_i+0x22e>
 800518e:	bf00      	nop
 8005190:	080061f5 	.word	0x080061f5
 8005194:	08006206 	.word	0x08006206

08005198 <_sbrk_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d06      	ldr	r5, [pc, #24]	; (80051b4 <_sbrk_r+0x1c>)
 800519c:	2300      	movs	r3, #0
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fb fb10 	bl	80007c8 <_sbrk>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_sbrk_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_sbrk_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20012e70 	.word	0x20012e70

080051b8 <__sread>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	460c      	mov	r4, r1
 80051bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c0:	f000 fab8 	bl	8005734 <_read_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	bfab      	itete	ge
 80051c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ca:	89a3      	ldrhlt	r3, [r4, #12]
 80051cc:	181b      	addge	r3, r3, r0
 80051ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051d2:	bfac      	ite	ge
 80051d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80051d6:	81a3      	strhlt	r3, [r4, #12]
 80051d8:	bd10      	pop	{r4, pc}

080051da <__swrite>:
 80051da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051de:	461f      	mov	r7, r3
 80051e0:	898b      	ldrh	r3, [r1, #12]
 80051e2:	05db      	lsls	r3, r3, #23
 80051e4:	4605      	mov	r5, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	4616      	mov	r6, r2
 80051ea:	d505      	bpl.n	80051f8 <__swrite+0x1e>
 80051ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f0:	2302      	movs	r3, #2
 80051f2:	2200      	movs	r2, #0
 80051f4:	f000 f9d0 	bl	8005598 <_lseek_r>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	4632      	mov	r2, r6
 8005206:	463b      	mov	r3, r7
 8005208:	4628      	mov	r0, r5
 800520a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	f000 b869 	b.w	80052e4 <_write_r>

08005212 <__sseek>:
 8005212:	b510      	push	{r4, lr}
 8005214:	460c      	mov	r4, r1
 8005216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521a:	f000 f9bd 	bl	8005598 <_lseek_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	bf15      	itete	ne
 8005224:	6560      	strne	r0, [r4, #84]	; 0x54
 8005226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800522a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800522e:	81a3      	strheq	r3, [r4, #12]
 8005230:	bf18      	it	ne
 8005232:	81a3      	strhne	r3, [r4, #12]
 8005234:	bd10      	pop	{r4, pc}

08005236 <__sclose>:
 8005236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523a:	f000 b8db 	b.w	80053f4 <_close_r>
	...

08005240 <__swbuf_r>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	460e      	mov	r6, r1
 8005244:	4614      	mov	r4, r2
 8005246:	4605      	mov	r5, r0
 8005248:	b118      	cbz	r0, 8005252 <__swbuf_r+0x12>
 800524a:	6983      	ldr	r3, [r0, #24]
 800524c:	b90b      	cbnz	r3, 8005252 <__swbuf_r+0x12>
 800524e:	f7ff f9bf 	bl	80045d0 <__sinit>
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <__swbuf_r+0x98>)
 8005254:	429c      	cmp	r4, r3
 8005256:	d12b      	bne.n	80052b0 <__swbuf_r+0x70>
 8005258:	686c      	ldr	r4, [r5, #4]
 800525a:	69a3      	ldr	r3, [r4, #24]
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	071a      	lsls	r2, r3, #28
 8005262:	d52f      	bpl.n	80052c4 <__swbuf_r+0x84>
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	b36b      	cbz	r3, 80052c4 <__swbuf_r+0x84>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	1ac0      	subs	r0, r0, r3
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	b2f6      	uxtb	r6, r6
 8005272:	4283      	cmp	r3, r0
 8005274:	4637      	mov	r7, r6
 8005276:	dc04      	bgt.n	8005282 <__swbuf_r+0x42>
 8005278:	4621      	mov	r1, r4
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f950 	bl	8005520 <_fflush_r>
 8005280:	bb30      	cbnz	r0, 80052d0 <__swbuf_r+0x90>
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60a3      	str	r3, [r4, #8]
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	6022      	str	r2, [r4, #0]
 800528e:	701e      	strb	r6, [r3, #0]
 8005290:	6963      	ldr	r3, [r4, #20]
 8005292:	3001      	adds	r0, #1
 8005294:	4283      	cmp	r3, r0
 8005296:	d004      	beq.n	80052a2 <__swbuf_r+0x62>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	07db      	lsls	r3, r3, #31
 800529c:	d506      	bpl.n	80052ac <__swbuf_r+0x6c>
 800529e:	2e0a      	cmp	r6, #10
 80052a0:	d104      	bne.n	80052ac <__swbuf_r+0x6c>
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 f93b 	bl	8005520 <_fflush_r>
 80052aa:	b988      	cbnz	r0, 80052d0 <__swbuf_r+0x90>
 80052ac:	4638      	mov	r0, r7
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <__swbuf_r+0x9c>)
 80052b2:	429c      	cmp	r4, r3
 80052b4:	d101      	bne.n	80052ba <__swbuf_r+0x7a>
 80052b6:	68ac      	ldr	r4, [r5, #8]
 80052b8:	e7cf      	b.n	800525a <__swbuf_r+0x1a>
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <__swbuf_r+0xa0>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	bf08      	it	eq
 80052c0:	68ec      	ldreq	r4, [r5, #12]
 80052c2:	e7ca      	b.n	800525a <__swbuf_r+0x1a>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f81e 	bl	8005308 <__swsetup_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0cb      	beq.n	8005268 <__swbuf_r+0x28>
 80052d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052d4:	e7ea      	b.n	80052ac <__swbuf_r+0x6c>
 80052d6:	bf00      	nop
 80052d8:	080061a4 	.word	0x080061a4
 80052dc:	080061c4 	.word	0x080061c4
 80052e0:	08006184 	.word	0x08006184

080052e4 <_write_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	; (8005304 <_write_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fb45 	bl	8005982 <_write>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_write_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_write_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	20012e70 	.word	0x20012e70

08005308 <__swsetup_r>:
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <__swsetup_r+0xcc>)
 800530a:	b570      	push	{r4, r5, r6, lr}
 800530c:	681d      	ldr	r5, [r3, #0]
 800530e:	4606      	mov	r6, r0
 8005310:	460c      	mov	r4, r1
 8005312:	b125      	cbz	r5, 800531e <__swsetup_r+0x16>
 8005314:	69ab      	ldr	r3, [r5, #24]
 8005316:	b913      	cbnz	r3, 800531e <__swsetup_r+0x16>
 8005318:	4628      	mov	r0, r5
 800531a:	f7ff f959 	bl	80045d0 <__sinit>
 800531e:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <__swsetup_r+0xd0>)
 8005320:	429c      	cmp	r4, r3
 8005322:	d10f      	bne.n	8005344 <__swsetup_r+0x3c>
 8005324:	686c      	ldr	r4, [r5, #4]
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800532c:	0719      	lsls	r1, r3, #28
 800532e:	d42c      	bmi.n	800538a <__swsetup_r+0x82>
 8005330:	06dd      	lsls	r5, r3, #27
 8005332:	d411      	bmi.n	8005358 <__swsetup_r+0x50>
 8005334:	2309      	movs	r3, #9
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005342:	e03e      	b.n	80053c2 <__swsetup_r+0xba>
 8005344:	4b25      	ldr	r3, [pc, #148]	; (80053dc <__swsetup_r+0xd4>)
 8005346:	429c      	cmp	r4, r3
 8005348:	d101      	bne.n	800534e <__swsetup_r+0x46>
 800534a:	68ac      	ldr	r4, [r5, #8]
 800534c:	e7eb      	b.n	8005326 <__swsetup_r+0x1e>
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <__swsetup_r+0xd8>)
 8005350:	429c      	cmp	r4, r3
 8005352:	bf08      	it	eq
 8005354:	68ec      	ldreq	r4, [r5, #12]
 8005356:	e7e6      	b.n	8005326 <__swsetup_r+0x1e>
 8005358:	0758      	lsls	r0, r3, #29
 800535a:	d512      	bpl.n	8005382 <__swsetup_r+0x7a>
 800535c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800535e:	b141      	cbz	r1, 8005372 <__swsetup_r+0x6a>
 8005360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005364:	4299      	cmp	r1, r3
 8005366:	d002      	beq.n	800536e <__swsetup_r+0x66>
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff f9eb 	bl	8004744 <_free_r>
 800536e:	2300      	movs	r3, #0
 8005370:	6363      	str	r3, [r4, #52]	; 0x34
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	b94b      	cbnz	r3, 80053a2 <__swsetup_r+0x9a>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d003      	beq.n	80053a2 <__swsetup_r+0x9a>
 800539a:	4621      	mov	r1, r4
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f933 	bl	8005608 <__smakebuf_r>
 80053a2:	89a0      	ldrh	r0, [r4, #12]
 80053a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a8:	f010 0301 	ands.w	r3, r0, #1
 80053ac:	d00a      	beq.n	80053c4 <__swsetup_r+0xbc>
 80053ae:	2300      	movs	r3, #0
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	6963      	ldr	r3, [r4, #20]
 80053b4:	425b      	negs	r3, r3
 80053b6:	61a3      	str	r3, [r4, #24]
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	b943      	cbnz	r3, 80053ce <__swsetup_r+0xc6>
 80053bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053c0:	d1ba      	bne.n	8005338 <__swsetup_r+0x30>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	0781      	lsls	r1, r0, #30
 80053c6:	bf58      	it	pl
 80053c8:	6963      	ldrpl	r3, [r4, #20]
 80053ca:	60a3      	str	r3, [r4, #8]
 80053cc:	e7f4      	b.n	80053b8 <__swsetup_r+0xb0>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e7f7      	b.n	80053c2 <__swsetup_r+0xba>
 80053d2:	bf00      	nop
 80053d4:	20000014 	.word	0x20000014
 80053d8:	080061a4 	.word	0x080061a4
 80053dc:	080061c4 	.word	0x080061c4
 80053e0:	08006184 	.word	0x08006184

080053e4 <abort>:
 80053e4:	b508      	push	{r3, lr}
 80053e6:	2006      	movs	r0, #6
 80053e8:	f000 f9de 	bl	80057a8 <raise>
 80053ec:	2001      	movs	r0, #1
 80053ee:	f000 fcd1 	bl	8005d94 <_exit>
	...

080053f4 <_close_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	; (8005410 <_close_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f000 faf0 	bl	80059e4 <_close>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_close_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_close_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20012e70 	.word	0x20012e70

08005414 <__sflush_r>:
 8005414:	898a      	ldrh	r2, [r1, #12]
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	4605      	mov	r5, r0
 800541c:	0710      	lsls	r0, r2, #28
 800541e:	460c      	mov	r4, r1
 8005420:	d458      	bmi.n	80054d4 <__sflush_r+0xc0>
 8005422:	684b      	ldr	r3, [r1, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dc05      	bgt.n	8005434 <__sflush_r+0x20>
 8005428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	dc02      	bgt.n	8005434 <__sflush_r+0x20>
 800542e:	2000      	movs	r0, #0
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005436:	2e00      	cmp	r6, #0
 8005438:	d0f9      	beq.n	800542e <__sflush_r+0x1a>
 800543a:	2300      	movs	r3, #0
 800543c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005440:	682f      	ldr	r7, [r5, #0]
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	d032      	beq.n	80054ac <__sflush_r+0x98>
 8005446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	075a      	lsls	r2, r3, #29
 800544c:	d505      	bpl.n	800545a <__sflush_r+0x46>
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	1ac0      	subs	r0, r0, r3
 8005452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005454:	b10b      	cbz	r3, 800545a <__sflush_r+0x46>
 8005456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005458:	1ac0      	subs	r0, r0, r3
 800545a:	2300      	movs	r3, #0
 800545c:	4602      	mov	r2, r0
 800545e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005460:	6a21      	ldr	r1, [r4, #32]
 8005462:	4628      	mov	r0, r5
 8005464:	47b0      	blx	r6
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	d106      	bne.n	800547a <__sflush_r+0x66>
 800546c:	6829      	ldr	r1, [r5, #0]
 800546e:	291d      	cmp	r1, #29
 8005470:	d82c      	bhi.n	80054cc <__sflush_r+0xb8>
 8005472:	4a2a      	ldr	r2, [pc, #168]	; (800551c <__sflush_r+0x108>)
 8005474:	40ca      	lsrs	r2, r1
 8005476:	07d6      	lsls	r6, r2, #31
 8005478:	d528      	bpl.n	80054cc <__sflush_r+0xb8>
 800547a:	2200      	movs	r2, #0
 800547c:	6062      	str	r2, [r4, #4]
 800547e:	04d9      	lsls	r1, r3, #19
 8005480:	6922      	ldr	r2, [r4, #16]
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	d504      	bpl.n	8005490 <__sflush_r+0x7c>
 8005486:	1c42      	adds	r2, r0, #1
 8005488:	d101      	bne.n	800548e <__sflush_r+0x7a>
 800548a:	682b      	ldr	r3, [r5, #0]
 800548c:	b903      	cbnz	r3, 8005490 <__sflush_r+0x7c>
 800548e:	6560      	str	r0, [r4, #84]	; 0x54
 8005490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005492:	602f      	str	r7, [r5, #0]
 8005494:	2900      	cmp	r1, #0
 8005496:	d0ca      	beq.n	800542e <__sflush_r+0x1a>
 8005498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800549c:	4299      	cmp	r1, r3
 800549e:	d002      	beq.n	80054a6 <__sflush_r+0x92>
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7ff f94f 	bl	8004744 <_free_r>
 80054a6:	2000      	movs	r0, #0
 80054a8:	6360      	str	r0, [r4, #52]	; 0x34
 80054aa:	e7c1      	b.n	8005430 <__sflush_r+0x1c>
 80054ac:	6a21      	ldr	r1, [r4, #32]
 80054ae:	2301      	movs	r3, #1
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b0      	blx	r6
 80054b4:	1c41      	adds	r1, r0, #1
 80054b6:	d1c7      	bne.n	8005448 <__sflush_r+0x34>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0c4      	beq.n	8005448 <__sflush_r+0x34>
 80054be:	2b1d      	cmp	r3, #29
 80054c0:	d001      	beq.n	80054c6 <__sflush_r+0xb2>
 80054c2:	2b16      	cmp	r3, #22
 80054c4:	d101      	bne.n	80054ca <__sflush_r+0xb6>
 80054c6:	602f      	str	r7, [r5, #0]
 80054c8:	e7b1      	b.n	800542e <__sflush_r+0x1a>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d0:	81a3      	strh	r3, [r4, #12]
 80054d2:	e7ad      	b.n	8005430 <__sflush_r+0x1c>
 80054d4:	690f      	ldr	r7, [r1, #16]
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	d0a9      	beq.n	800542e <__sflush_r+0x1a>
 80054da:	0793      	lsls	r3, r2, #30
 80054dc:	680e      	ldr	r6, [r1, #0]
 80054de:	bf08      	it	eq
 80054e0:	694b      	ldreq	r3, [r1, #20]
 80054e2:	600f      	str	r7, [r1, #0]
 80054e4:	bf18      	it	ne
 80054e6:	2300      	movne	r3, #0
 80054e8:	eba6 0807 	sub.w	r8, r6, r7
 80054ec:	608b      	str	r3, [r1, #8]
 80054ee:	f1b8 0f00 	cmp.w	r8, #0
 80054f2:	dd9c      	ble.n	800542e <__sflush_r+0x1a>
 80054f4:	6a21      	ldr	r1, [r4, #32]
 80054f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f8:	4643      	mov	r3, r8
 80054fa:	463a      	mov	r2, r7
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b0      	blx	r6
 8005500:	2800      	cmp	r0, #0
 8005502:	dc06      	bgt.n	8005512 <__sflush_r+0xfe>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005510:	e78e      	b.n	8005430 <__sflush_r+0x1c>
 8005512:	4407      	add	r7, r0
 8005514:	eba8 0800 	sub.w	r8, r8, r0
 8005518:	e7e9      	b.n	80054ee <__sflush_r+0xda>
 800551a:	bf00      	nop
 800551c:	20400001 	.word	0x20400001

08005520 <_fflush_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	690b      	ldr	r3, [r1, #16]
 8005524:	4605      	mov	r5, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b913      	cbnz	r3, 8005530 <_fflush_r+0x10>
 800552a:	2500      	movs	r5, #0
 800552c:	4628      	mov	r0, r5
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	b118      	cbz	r0, 800553a <_fflush_r+0x1a>
 8005532:	6983      	ldr	r3, [r0, #24]
 8005534:	b90b      	cbnz	r3, 800553a <_fflush_r+0x1a>
 8005536:	f7ff f84b 	bl	80045d0 <__sinit>
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <_fflush_r+0x6c>)
 800553c:	429c      	cmp	r4, r3
 800553e:	d11b      	bne.n	8005578 <_fflush_r+0x58>
 8005540:	686c      	ldr	r4, [r5, #4]
 8005542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ef      	beq.n	800552a <_fflush_r+0xa>
 800554a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800554c:	07d0      	lsls	r0, r2, #31
 800554e:	d404      	bmi.n	800555a <_fflush_r+0x3a>
 8005550:	0599      	lsls	r1, r3, #22
 8005552:	d402      	bmi.n	800555a <_fflush_r+0x3a>
 8005554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005556:	f7ff f8eb 	bl	8004730 <__retarget_lock_acquire_recursive>
 800555a:	4628      	mov	r0, r5
 800555c:	4621      	mov	r1, r4
 800555e:	f7ff ff59 	bl	8005414 <__sflush_r>
 8005562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005564:	07da      	lsls	r2, r3, #31
 8005566:	4605      	mov	r5, r0
 8005568:	d4e0      	bmi.n	800552c <_fflush_r+0xc>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	059b      	lsls	r3, r3, #22
 800556e:	d4dd      	bmi.n	800552c <_fflush_r+0xc>
 8005570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005572:	f7ff f8de 	bl	8004732 <__retarget_lock_release_recursive>
 8005576:	e7d9      	b.n	800552c <_fflush_r+0xc>
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <_fflush_r+0x70>)
 800557a:	429c      	cmp	r4, r3
 800557c:	d101      	bne.n	8005582 <_fflush_r+0x62>
 800557e:	68ac      	ldr	r4, [r5, #8]
 8005580:	e7df      	b.n	8005542 <_fflush_r+0x22>
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <_fflush_r+0x74>)
 8005584:	429c      	cmp	r4, r3
 8005586:	bf08      	it	eq
 8005588:	68ec      	ldreq	r4, [r5, #12]
 800558a:	e7da      	b.n	8005542 <_fflush_r+0x22>
 800558c:	080061a4 	.word	0x080061a4
 8005590:	080061c4 	.word	0x080061c4
 8005594:	08006184 	.word	0x08006184

08005598 <_lseek_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_lseek_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f9d9 	bl	800595e <_lseek>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_lseek_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_lseek_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20012e70 	.word	0x20012e70

080055bc <__swhatbuf_r>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	460e      	mov	r6, r1
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	b096      	sub	sp, #88	; 0x58
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	da08      	bge.n	80055e0 <__swhatbuf_r+0x24>
 80055ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	061a      	lsls	r2, r3, #24
 80055d8:	d410      	bmi.n	80055fc <__swhatbuf_r+0x40>
 80055da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055de:	e00e      	b.n	80055fe <__swhatbuf_r+0x42>
 80055e0:	466a      	mov	r2, sp
 80055e2:	f000 f8fd 	bl	80057e0 <_fstat_r>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	dbf1      	blt.n	80055ce <__swhatbuf_r+0x12>
 80055ea:	9a01      	ldr	r2, [sp, #4]
 80055ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055f4:	425a      	negs	r2, r3
 80055f6:	415a      	adcs	r2, r3
 80055f8:	602a      	str	r2, [r5, #0]
 80055fa:	e7ee      	b.n	80055da <__swhatbuf_r+0x1e>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	2000      	movs	r0, #0
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	b016      	add	sp, #88	; 0x58
 8005604:	bd70      	pop	{r4, r5, r6, pc}
	...

08005608 <__smakebuf_r>:
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800560c:	079d      	lsls	r5, r3, #30
 800560e:	4606      	mov	r6, r0
 8005610:	460c      	mov	r4, r1
 8005612:	d507      	bpl.n	8005624 <__smakebuf_r+0x1c>
 8005614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	2301      	movs	r3, #1
 800561e:	6163      	str	r3, [r4, #20]
 8005620:	b002      	add	sp, #8
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	ab01      	add	r3, sp, #4
 8005626:	466a      	mov	r2, sp
 8005628:	f7ff ffc8 	bl	80055bc <__swhatbuf_r>
 800562c:	9900      	ldr	r1, [sp, #0]
 800562e:	4605      	mov	r5, r0
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff f8f3 	bl	800481c <_malloc_r>
 8005636:	b948      	cbnz	r0, 800564c <__smakebuf_r+0x44>
 8005638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563c:	059a      	lsls	r2, r3, #22
 800563e:	d4ef      	bmi.n	8005620 <__smakebuf_r+0x18>
 8005640:	f023 0303 	bic.w	r3, r3, #3
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	e7e3      	b.n	8005614 <__smakebuf_r+0xc>
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <__smakebuf_r+0x7c>)
 800564e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	6020      	str	r0, [r4, #0]
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	6163      	str	r3, [r4, #20]
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	6120      	str	r0, [r4, #16]
 8005662:	b15b      	cbz	r3, 800567c <__smakebuf_r+0x74>
 8005664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f8cb 	bl	8005804 <_isatty_r>
 800566e:	b128      	cbz	r0, 800567c <__smakebuf_r+0x74>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f023 0303 	bic.w	r3, r3, #3
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	81a3      	strh	r3, [r4, #12]
 800567c:	89a0      	ldrh	r0, [r4, #12]
 800567e:	4305      	orrs	r5, r0
 8005680:	81a5      	strh	r5, [r4, #12]
 8005682:	e7cd      	b.n	8005620 <__smakebuf_r+0x18>
 8005684:	08004569 	.word	0x08004569

08005688 <memmove>:
 8005688:	4288      	cmp	r0, r1
 800568a:	b510      	push	{r4, lr}
 800568c:	eb01 0402 	add.w	r4, r1, r2
 8005690:	d902      	bls.n	8005698 <memmove+0x10>
 8005692:	4284      	cmp	r4, r0
 8005694:	4623      	mov	r3, r4
 8005696:	d807      	bhi.n	80056a8 <memmove+0x20>
 8005698:	1e43      	subs	r3, r0, #1
 800569a:	42a1      	cmp	r1, r4
 800569c:	d008      	beq.n	80056b0 <memmove+0x28>
 800569e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056a6:	e7f8      	b.n	800569a <memmove+0x12>
 80056a8:	4402      	add	r2, r0
 80056aa:	4601      	mov	r1, r0
 80056ac:	428a      	cmp	r2, r1
 80056ae:	d100      	bne.n	80056b2 <memmove+0x2a>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ba:	e7f7      	b.n	80056ac <memmove+0x24>

080056bc <__malloc_lock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__malloc_lock+0x8>)
 80056be:	f7ff b837 	b.w	8004730 <__retarget_lock_acquire_recursive>
 80056c2:	bf00      	nop
 80056c4:	20012e64 	.word	0x20012e64

080056c8 <__malloc_unlock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_unlock+0x8>)
 80056ca:	f7ff b832 	b.w	8004732 <__retarget_lock_release_recursive>
 80056ce:	bf00      	nop
 80056d0:	20012e64 	.word	0x20012e64

080056d4 <_realloc_r>:
 80056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4680      	mov	r8, r0
 80056da:	4614      	mov	r4, r2
 80056dc:	460e      	mov	r6, r1
 80056de:	b921      	cbnz	r1, 80056ea <_realloc_r+0x16>
 80056e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	4611      	mov	r1, r2
 80056e6:	f7ff b899 	b.w	800481c <_malloc_r>
 80056ea:	b92a      	cbnz	r2, 80056f8 <_realloc_r+0x24>
 80056ec:	f7ff f82a 	bl	8004744 <_free_r>
 80056f0:	4625      	mov	r5, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	f000 f894 	bl	8005824 <_malloc_usable_size_r>
 80056fc:	4284      	cmp	r4, r0
 80056fe:	4607      	mov	r7, r0
 8005700:	d802      	bhi.n	8005708 <_realloc_r+0x34>
 8005702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005706:	d812      	bhi.n	800572e <_realloc_r+0x5a>
 8005708:	4621      	mov	r1, r4
 800570a:	4640      	mov	r0, r8
 800570c:	f7ff f886 	bl	800481c <_malloc_r>
 8005710:	4605      	mov	r5, r0
 8005712:	2800      	cmp	r0, #0
 8005714:	d0ed      	beq.n	80056f2 <_realloc_r+0x1e>
 8005716:	42bc      	cmp	r4, r7
 8005718:	4622      	mov	r2, r4
 800571a:	4631      	mov	r1, r6
 800571c:	bf28      	it	cs
 800571e:	463a      	movcs	r2, r7
 8005720:	f7fe fe12 	bl	8004348 <memcpy>
 8005724:	4631      	mov	r1, r6
 8005726:	4640      	mov	r0, r8
 8005728:	f7ff f80c 	bl	8004744 <_free_r>
 800572c:	e7e1      	b.n	80056f2 <_realloc_r+0x1e>
 800572e:	4635      	mov	r5, r6
 8005730:	e7df      	b.n	80056f2 <_realloc_r+0x1e>
	...

08005734 <_read_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_read_r+0x20>)
 8005738:	4604      	mov	r4, r0
 800573a:	4608      	mov	r0, r1
 800573c:	4611      	mov	r1, r2
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f000 f8b3 	bl	80058ae <_read>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_read_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_read_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20012e70 	.word	0x20012e70

08005758 <_raise_r>:
 8005758:	291f      	cmp	r1, #31
 800575a:	b538      	push	{r3, r4, r5, lr}
 800575c:	4604      	mov	r4, r0
 800575e:	460d      	mov	r5, r1
 8005760:	d904      	bls.n	800576c <_raise_r+0x14>
 8005762:	2316      	movs	r3, #22
 8005764:	6003      	str	r3, [r0, #0]
 8005766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800576e:	b112      	cbz	r2, 8005776 <_raise_r+0x1e>
 8005770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005774:	b94b      	cbnz	r3, 800578a <_raise_r+0x32>
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f830 	bl	80057dc <_getpid_r>
 800577c:	462a      	mov	r2, r5
 800577e:	4601      	mov	r1, r0
 8005780:	4620      	mov	r0, r4
 8005782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005786:	f000 b817 	b.w	80057b8 <_kill_r>
 800578a:	2b01      	cmp	r3, #1
 800578c:	d00a      	beq.n	80057a4 <_raise_r+0x4c>
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	d103      	bne.n	800579a <_raise_r+0x42>
 8005792:	2316      	movs	r3, #22
 8005794:	6003      	str	r3, [r0, #0]
 8005796:	2001      	movs	r0, #1
 8005798:	e7e7      	b.n	800576a <_raise_r+0x12>
 800579a:	2400      	movs	r4, #0
 800579c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057a0:	4628      	mov	r0, r5
 80057a2:	4798      	blx	r3
 80057a4:	2000      	movs	r0, #0
 80057a6:	e7e0      	b.n	800576a <_raise_r+0x12>

080057a8 <raise>:
 80057a8:	4b02      	ldr	r3, [pc, #8]	; (80057b4 <raise+0xc>)
 80057aa:	4601      	mov	r1, r0
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f7ff bfd3 	b.w	8005758 <_raise_r>
 80057b2:	bf00      	nop
 80057b4:	20000014 	.word	0x20000014

080057b8 <_kill_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_kill_r+0x20>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	f000 fb03 	bl	8005dd0 <_kill>
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	d102      	bne.n	80057d4 <_kill_r+0x1c>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	b103      	cbz	r3, 80057d4 <_kill_r+0x1c>
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	bd38      	pop	{r3, r4, r5, pc}
 80057d6:	bf00      	nop
 80057d8:	20012e70 	.word	0x20012e70

080057dc <_getpid_r>:
 80057dc:	f000 b928 	b.w	8005a30 <_getpid>

080057e0 <_fstat_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	; (8005800 <_fstat_r+0x20>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	f000 f942 	bl	8005a76 <_fstat>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d102      	bne.n	80057fc <_fstat_r+0x1c>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	b103      	cbz	r3, 80057fc <_fstat_r+0x1c>
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	bf00      	nop
 8005800:	20012e70 	.word	0x20012e70

08005804 <_isatty_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_isatty_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f000 faa4 	bl	8005d5c <_isatty>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_isatty_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_isatty_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20012e70 	.word	0x20012e70

08005824 <_malloc_usable_size_r>:
 8005824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005828:	1f18      	subs	r0, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	bfbc      	itt	lt
 800582e:	580b      	ldrlt	r3, [r1, r0]
 8005830:	18c0      	addlt	r0, r0, r3
 8005832:	4770      	bx	lr

08005834 <findslot>:
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <findslot+0x2c>)
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	b118      	cbz	r0, 8005846 <findslot+0x12>
 800583e:	6983      	ldr	r3, [r0, #24]
 8005840:	b90b      	cbnz	r3, 8005846 <findslot+0x12>
 8005842:	f7fe fec5 	bl	80045d0 <__sinit>
 8005846:	2c13      	cmp	r4, #19
 8005848:	d807      	bhi.n	800585a <findslot+0x26>
 800584a:	4806      	ldr	r0, [pc, #24]	; (8005864 <findslot+0x30>)
 800584c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005850:	3201      	adds	r2, #1
 8005852:	d002      	beq.n	800585a <findslot+0x26>
 8005854:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005858:	bd10      	pop	{r4, pc}
 800585a:	2000      	movs	r0, #0
 800585c:	e7fc      	b.n	8005858 <findslot+0x24>
 800585e:	bf00      	nop
 8005860:	20000014 	.word	0x20000014
 8005864:	20012e80 	.word	0x20012e80

08005868 <error>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	f7fe fd42 	bl	80042f4 <__errno>
 8005870:	2613      	movs	r6, #19
 8005872:	4605      	mov	r5, r0
 8005874:	2700      	movs	r7, #0
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	beab      	bkpt	0x00ab
 800587c:	4606      	mov	r6, r0
 800587e:	602e      	str	r6, [r5, #0]
 8005880:	4620      	mov	r0, r4
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005884 <checkerror>:
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d101      	bne.n	800588c <checkerror+0x8>
 8005888:	f7ff bfee 	b.w	8005868 <error>
 800588c:	4770      	bx	lr

0800588e <_swiread>:
 800588e:	b530      	push	{r4, r5, lr}
 8005890:	b085      	sub	sp, #20
 8005892:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005896:	9203      	str	r2, [sp, #12]
 8005898:	2406      	movs	r4, #6
 800589a:	ad01      	add	r5, sp, #4
 800589c:	4620      	mov	r0, r4
 800589e:	4629      	mov	r1, r5
 80058a0:	beab      	bkpt	0x00ab
 80058a2:	4604      	mov	r4, r0
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7ff ffed 	bl	8005884 <checkerror>
 80058aa:	b005      	add	sp, #20
 80058ac:	bd30      	pop	{r4, r5, pc}

080058ae <_read>:
 80058ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b0:	4615      	mov	r5, r2
 80058b2:	9101      	str	r1, [sp, #4]
 80058b4:	f7ff ffbe 	bl	8005834 <findslot>
 80058b8:	9901      	ldr	r1, [sp, #4]
 80058ba:	4604      	mov	r4, r0
 80058bc:	b938      	cbnz	r0, 80058ce <_read+0x20>
 80058be:	f7fe fd19 	bl	80042f4 <__errno>
 80058c2:	2309      	movs	r3, #9
 80058c4:	6003      	str	r3, [r0, #0]
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ca:	b003      	add	sp, #12
 80058cc:	bd30      	pop	{r4, r5, pc}
 80058ce:	6800      	ldr	r0, [r0, #0]
 80058d0:	462a      	mov	r2, r5
 80058d2:	f7ff ffdc 	bl	800588e <_swiread>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d0f7      	beq.n	80058ca <_read+0x1c>
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	1a2a      	subs	r2, r5, r0
 80058de:	4413      	add	r3, r2
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	4610      	mov	r0, r2
 80058e4:	e7f1      	b.n	80058ca <_read+0x1c>

080058e6 <_swilseek>:
 80058e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	4616      	mov	r6, r2
 80058ec:	f7ff ffa2 	bl	8005834 <findslot>
 80058f0:	4605      	mov	r5, r0
 80058f2:	b940      	cbnz	r0, 8005906 <_swilseek+0x20>
 80058f4:	f7fe fcfe 	bl	80042f4 <__errno>
 80058f8:	2309      	movs	r3, #9
 80058fa:	6003      	str	r3, [r0, #0]
 80058fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005900:	4620      	mov	r0, r4
 8005902:	b003      	add	sp, #12
 8005904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005906:	2e02      	cmp	r6, #2
 8005908:	d903      	bls.n	8005912 <_swilseek+0x2c>
 800590a:	f7fe fcf3 	bl	80042f4 <__errno>
 800590e:	2316      	movs	r3, #22
 8005910:	e7f3      	b.n	80058fa <_swilseek+0x14>
 8005912:	2e01      	cmp	r6, #1
 8005914:	d112      	bne.n	800593c <_swilseek+0x56>
 8005916:	6843      	ldr	r3, [r0, #4]
 8005918:	18e4      	adds	r4, r4, r3
 800591a:	d4f6      	bmi.n	800590a <_swilseek+0x24>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	260a      	movs	r6, #10
 8005920:	e9cd 3400 	strd	r3, r4, [sp]
 8005924:	466f      	mov	r7, sp
 8005926:	4630      	mov	r0, r6
 8005928:	4639      	mov	r1, r7
 800592a:	beab      	bkpt	0x00ab
 800592c:	4606      	mov	r6, r0
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff ffa8 	bl	8005884 <checkerror>
 8005934:	2800      	cmp	r0, #0
 8005936:	dbe1      	blt.n	80058fc <_swilseek+0x16>
 8005938:	606c      	str	r4, [r5, #4]
 800593a:	e7e1      	b.n	8005900 <_swilseek+0x1a>
 800593c:	2e02      	cmp	r6, #2
 800593e:	d1ed      	bne.n	800591c <_swilseek+0x36>
 8005940:	6803      	ldr	r3, [r0, #0]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	260c      	movs	r6, #12
 8005946:	466f      	mov	r7, sp
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	beab      	bkpt	0x00ab
 800594e:	4606      	mov	r6, r0
 8005950:	4630      	mov	r0, r6
 8005952:	f7ff ff97 	bl	8005884 <checkerror>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d0d0      	beq.n	80058fc <_swilseek+0x16>
 800595a:	4404      	add	r4, r0
 800595c:	e7de      	b.n	800591c <_swilseek+0x36>

0800595e <_lseek>:
 800595e:	f7ff bfc2 	b.w	80058e6 <_swilseek>

08005962 <_swiwrite>:
 8005962:	b530      	push	{r4, r5, lr}
 8005964:	b085      	sub	sp, #20
 8005966:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800596a:	9203      	str	r2, [sp, #12]
 800596c:	2405      	movs	r4, #5
 800596e:	ad01      	add	r5, sp, #4
 8005970:	4620      	mov	r0, r4
 8005972:	4629      	mov	r1, r5
 8005974:	beab      	bkpt	0x00ab
 8005976:	4604      	mov	r4, r0
 8005978:	4620      	mov	r0, r4
 800597a:	f7ff ff83 	bl	8005884 <checkerror>
 800597e:	b005      	add	sp, #20
 8005980:	bd30      	pop	{r4, r5, pc}

08005982 <_write>:
 8005982:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005984:	4615      	mov	r5, r2
 8005986:	9101      	str	r1, [sp, #4]
 8005988:	f7ff ff54 	bl	8005834 <findslot>
 800598c:	9901      	ldr	r1, [sp, #4]
 800598e:	4604      	mov	r4, r0
 8005990:	b930      	cbnz	r0, 80059a0 <_write+0x1e>
 8005992:	f7fe fcaf 	bl	80042f4 <__errno>
 8005996:	2309      	movs	r3, #9
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800599e:	e012      	b.n	80059c6 <_write+0x44>
 80059a0:	6800      	ldr	r0, [r0, #0]
 80059a2:	462a      	mov	r2, r5
 80059a4:	f7ff ffdd 	bl	8005962 <_swiwrite>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	dbf6      	blt.n	800599a <_write+0x18>
 80059ac:	6862      	ldr	r2, [r4, #4]
 80059ae:	1a2b      	subs	r3, r5, r0
 80059b0:	441a      	add	r2, r3
 80059b2:	42a8      	cmp	r0, r5
 80059b4:	6062      	str	r2, [r4, #4]
 80059b6:	d105      	bne.n	80059c4 <_write+0x42>
 80059b8:	2000      	movs	r0, #0
 80059ba:	b003      	add	sp, #12
 80059bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c0:	f7ff bf52 	b.w	8005868 <error>
 80059c4:	4618      	mov	r0, r3
 80059c6:	b003      	add	sp, #12
 80059c8:	bd30      	pop	{r4, r5, pc}

080059ca <_swiclose>:
 80059ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059cc:	2402      	movs	r4, #2
 80059ce:	9001      	str	r0, [sp, #4]
 80059d0:	ad01      	add	r5, sp, #4
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	beab      	bkpt	0x00ab
 80059d8:	4604      	mov	r4, r0
 80059da:	4620      	mov	r0, r4
 80059dc:	f7ff ff52 	bl	8005884 <checkerror>
 80059e0:	b003      	add	sp, #12
 80059e2:	bd30      	pop	{r4, r5, pc}

080059e4 <_close>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4605      	mov	r5, r0
 80059e8:	f7ff ff24 	bl	8005834 <findslot>
 80059ec:	4604      	mov	r4, r0
 80059ee:	b930      	cbnz	r0, 80059fe <_close+0x1a>
 80059f0:	f7fe fc80 	bl	80042f4 <__errno>
 80059f4:	2309      	movs	r3, #9
 80059f6:	6003      	str	r3, [r0, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	3d01      	subs	r5, #1
 8005a00:	2d01      	cmp	r5, #1
 8005a02:	d809      	bhi.n	8005a18 <_close+0x34>
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <_close+0x48>)
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d104      	bne.n	8005a18 <_close+0x34>
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a12:	6003      	str	r3, [r0, #0]
 8005a14:	2000      	movs	r0, #0
 8005a16:	e7f1      	b.n	80059fc <_close+0x18>
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	f7ff ffd6 	bl	80059ca <_swiclose>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d1ec      	bne.n	80059fc <_close+0x18>
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	e7e8      	b.n	80059fc <_close+0x18>
 8005a2a:	bf00      	nop
 8005a2c:	20012e80 	.word	0x20012e80

08005a30 <_getpid>:
 8005a30:	2001      	movs	r0, #1
 8005a32:	4770      	bx	lr

08005a34 <_swistat>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	460c      	mov	r4, r1
 8005a38:	f7ff fefc 	bl	8005834 <findslot>
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	b930      	cbnz	r0, 8005a4e <_swistat+0x1a>
 8005a40:	f7fe fc58 	bl	80042f4 <__errno>
 8005a44:	2309      	movs	r3, #9
 8005a46:	6003      	str	r3, [r0, #0]
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a54:	6063      	str	r3, [r4, #4]
 8005a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005a5c:	260c      	movs	r6, #12
 8005a5e:	4630      	mov	r0, r6
 8005a60:	4629      	mov	r1, r5
 8005a62:	beab      	bkpt	0x00ab
 8005a64:	4605      	mov	r5, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7ff ff0c 	bl	8005884 <checkerror>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	bf1c      	itt	ne
 8005a70:	6120      	strne	r0, [r4, #16]
 8005a72:	2000      	movne	r0, #0
 8005a74:	e7ea      	b.n	8005a4c <_swistat+0x18>

08005a76 <_fstat>:
 8005a76:	460b      	mov	r3, r1
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2258      	movs	r2, #88	; 0x58
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fc6f 	bl	8004364 <memset>
 8005a86:	4601      	mov	r1, r0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8e:	f7ff bfd1 	b.w	8005a34 <_swistat>

08005a92 <_stat>:
 8005a92:	b538      	push	{r3, r4, r5, lr}
 8005a94:	460d      	mov	r5, r1
 8005a96:	4604      	mov	r4, r0
 8005a98:	2258      	movs	r2, #88	; 0x58
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f7fe fc61 	bl	8004364 <memset>
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	f000 f811 	bl	8005acc <_swiopen>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	4604      	mov	r4, r0
 8005aae:	d00b      	beq.n	8005ac8 <_stat+0x36>
 8005ab0:	686b      	ldr	r3, [r5, #4]
 8005ab2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ab6:	606b      	str	r3, [r5, #4]
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7ff ffbb 	bl	8005a34 <_swistat>
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff ff8f 	bl	80059e4 <_close>
 8005ac6:	462c      	mov	r4, r5
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bd38      	pop	{r3, r4, r5, pc}

08005acc <_swiopen>:
 8005acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ad0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005b7c <_swiopen+0xb0>
 8005ad4:	b097      	sub	sp, #92	; 0x5c
 8005ad6:	4607      	mov	r7, r0
 8005ad8:	460e      	mov	r6, r1
 8005ada:	2500      	movs	r5, #0
 8005adc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8005ae0:	1c61      	adds	r1, r4, #1
 8005ae2:	d037      	beq.n	8005b54 <_swiopen+0x88>
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	2d14      	cmp	r5, #20
 8005ae8:	d1f8      	bne.n	8005adc <_swiopen+0x10>
 8005aea:	f7fe fc03 	bl	80042f4 <__errno>
 8005aee:	2318      	movs	r3, #24
 8005af0:	6003      	str	r3, [r0, #0]
 8005af2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005af6:	e03d      	b.n	8005b74 <_swiopen+0xa8>
 8005af8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8005afc:	f240 6301 	movw	r3, #1537	; 0x601
 8005b00:	07b2      	lsls	r2, r6, #30
 8005b02:	bf48      	it	mi
 8005b04:	f044 0402 	orrmi.w	r4, r4, #2
 8005b08:	421e      	tst	r6, r3
 8005b0a:	bf18      	it	ne
 8005b0c:	f044 0404 	orrne.w	r4, r4, #4
 8005b10:	0733      	lsls	r3, r6, #28
 8005b12:	bf48      	it	mi
 8005b14:	f024 0404 	bicmi.w	r4, r4, #4
 8005b18:	4638      	mov	r0, r7
 8005b1a:	bf48      	it	mi
 8005b1c:	f044 0408 	orrmi.w	r4, r4, #8
 8005b20:	9700      	str	r7, [sp, #0]
 8005b22:	f7fa fbad 	bl	8000280 <strlen>
 8005b26:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8005b2a:	2401      	movs	r4, #1
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4649      	mov	r1, r9
 8005b30:	beab      	bkpt	0x00ab
 8005b32:	4604      	mov	r4, r0
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	db08      	blt.n	8005b4a <_swiopen+0x7e>
 8005b38:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005b3c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b46:	462c      	mov	r4, r5
 8005b48:	e014      	b.n	8005b74 <_swiopen+0xa8>
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7ff fe8c 	bl	8005868 <error>
 8005b50:	4604      	mov	r4, r0
 8005b52:	e00f      	b.n	8005b74 <_swiopen+0xa8>
 8005b54:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005b58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b5c:	46e9      	mov	r9, sp
 8005b5e:	d1cb      	bne.n	8005af8 <_swiopen+0x2c>
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7ff ff95 	bl	8005a92 <_stat>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d0c5      	beq.n	8005af8 <_swiopen+0x2c>
 8005b6c:	f7fe fbc2 	bl	80042f4 <__errno>
 8005b70:	2311      	movs	r3, #17
 8005b72:	6003      	str	r3, [r0, #0]
 8005b74:	4620      	mov	r0, r4
 8005b76:	b017      	add	sp, #92	; 0x5c
 8005b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b7c:	20012e80 	.word	0x20012e80

08005b80 <_get_semihosting_exts>:
 8005b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	482a      	ldr	r0, [pc, #168]	; (8005c34 <_get_semihosting_exts+0xb4>)
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	f7ff ff9d 	bl	8005acc <_swiopen>
 8005b92:	462a      	mov	r2, r5
 8005b94:	4604      	mov	r4, r0
 8005b96:	2100      	movs	r1, #0
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f7fe fbe3 	bl	8004364 <memset>
 8005b9e:	1c63      	adds	r3, r4, #1
 8005ba0:	d016      	beq.n	8005bd0 <_get_semihosting_exts+0x50>
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff fe46 	bl	8005834 <findslot>
 8005ba8:	f04f 090c 	mov.w	r9, #12
 8005bac:	4680      	mov	r8, r0
 8005bae:	4648      	mov	r0, r9
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	beab      	bkpt	0x00ab
 8005bb4:	4680      	mov	r8, r0
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	f7ff fe64 	bl	8005884 <checkerror>
 8005bbc:	2803      	cmp	r0, #3
 8005bbe:	dd02      	ble.n	8005bc6 <_get_semihosting_exts+0x46>
 8005bc0:	1ec3      	subs	r3, r0, #3
 8005bc2:	42ab      	cmp	r3, r5
 8005bc4:	dc08      	bgt.n	8005bd8 <_get_semihosting_exts+0x58>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff ff0c 	bl	80059e4 <_close>
 8005bcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	b003      	add	sp, #12
 8005bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bd8:	2204      	movs	r2, #4
 8005bda:	eb0d 0102 	add.w	r1, sp, r2
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fe65 	bl	80058ae <_read>
 8005be4:	2803      	cmp	r0, #3
 8005be6:	ddee      	ble.n	8005bc6 <_get_semihosting_exts+0x46>
 8005be8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005bec:	2b53      	cmp	r3, #83	; 0x53
 8005bee:	d1ea      	bne.n	8005bc6 <_get_semihosting_exts+0x46>
 8005bf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005bf4:	2b48      	cmp	r3, #72	; 0x48
 8005bf6:	d1e6      	bne.n	8005bc6 <_get_semihosting_exts+0x46>
 8005bf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bfc:	2b46      	cmp	r3, #70	; 0x46
 8005bfe:	d1e2      	bne.n	8005bc6 <_get_semihosting_exts+0x46>
 8005c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c04:	2b42      	cmp	r3, #66	; 0x42
 8005c06:	d1de      	bne.n	8005bc6 <_get_semihosting_exts+0x46>
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7ff fe6a 	bl	80058e6 <_swilseek>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dbd7      	blt.n	8005bc6 <_get_semihosting_exts+0x46>
 8005c16:	462a      	mov	r2, r5
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f7ff fe47 	bl	80058ae <_read>
 8005c20:	4605      	mov	r5, r0
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff fede 	bl	80059e4 <_close>
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f7ff fe2b 	bl	8005884 <checkerror>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	e7ce      	b.n	8005bd0 <_get_semihosting_exts+0x50>
 8005c32:	bf00      	nop
 8005c34:	08006217 	.word	0x08006217

08005c38 <initialise_semihosting_exts>:
 8005c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c3a:	4d0a      	ldr	r5, [pc, #40]	; (8005c64 <initialise_semihosting_exts+0x2c>)
 8005c3c:	4c0a      	ldr	r4, [pc, #40]	; (8005c68 <initialise_semihosting_exts+0x30>)
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2201      	movs	r2, #1
 8005c42:	a801      	add	r0, sp, #4
 8005c44:	6029      	str	r1, [r5, #0]
 8005c46:	6022      	str	r2, [r4, #0]
 8005c48:	f7ff ff9a 	bl	8005b80 <_get_semihosting_exts>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	dd07      	ble.n	8005c60 <initialise_semihosting_exts+0x28>
 8005c50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c54:	f003 0201 	and.w	r2, r3, #1
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	b003      	add	sp, #12
 8005c62:	bd30      	pop	{r4, r5, pc}
 8005c64:	20000078 	.word	0x20000078
 8005c68:	2000007c 	.word	0x2000007c

08005c6c <_has_ext_exit_extended>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4c04      	ldr	r4, [pc, #16]	; (8005c80 <_has_ext_exit_extended+0x14>)
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da01      	bge.n	8005c7a <_has_ext_exit_extended+0xe>
 8005c76:	f7ff ffdf 	bl	8005c38 <initialise_semihosting_exts>
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000078 	.word	0x20000078

08005c84 <_has_ext_stdout_stderr>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4c04      	ldr	r4, [pc, #16]	; (8005c98 <_has_ext_stdout_stderr+0x14>)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da01      	bge.n	8005c92 <_has_ext_stdout_stderr+0xe>
 8005c8e:	f7ff ffd3 	bl	8005c38 <initialise_semihosting_exts>
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	2000007c 	.word	0x2000007c

08005c9c <initialise_monitor_handles>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005d54 <initialise_monitor_handles+0xb8>
 8005ca6:	f8cd 9004 	str.w	r9, [sp, #4]
 8005caa:	2303      	movs	r3, #3
 8005cac:	2400      	movs	r4, #0
 8005cae:	9303      	str	r3, [sp, #12]
 8005cb0:	af01      	add	r7, sp, #4
 8005cb2:	9402      	str	r4, [sp, #8]
 8005cb4:	2501      	movs	r5, #1
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	4639      	mov	r1, r7
 8005cba:	beab      	bkpt	0x00ab
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005d58 <initialise_monitor_handles+0xbc>
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	4c20      	ldr	r4, [pc, #128]	; (8005d48 <initialise_monitor_handles+0xac>)
 8005cc6:	f8c8 5000 	str.w	r5, [r8]
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	2b14      	cmp	r3, #20
 8005cd6:	d1fa      	bne.n	8005cce <initialise_monitor_handles+0x32>
 8005cd8:	f7ff ffd4 	bl	8005c84 <_has_ext_stdout_stderr>
 8005cdc:	4d1b      	ldr	r5, [pc, #108]	; (8005d4c <initialise_monitor_handles+0xb0>)
 8005cde:	b1d0      	cbz	r0, 8005d16 <initialise_monitor_handles+0x7a>
 8005ce0:	f04f 0a03 	mov.w	sl, #3
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cea:	2601      	movs	r6, #1
 8005cec:	f8cd a00c 	str.w	sl, [sp, #12]
 8005cf0:	9302      	str	r3, [sp, #8]
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	beab      	bkpt	0x00ab
 8005cf8:	4683      	mov	fp, r0
 8005cfa:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <initialise_monitor_handles+0xb4>)
 8005cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d00:	f8c3 b000 	str.w	fp, [r3]
 8005d04:	2308      	movs	r3, #8
 8005d06:	f8cd a00c 	str.w	sl, [sp, #12]
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	beab      	bkpt	0x00ab
 8005d12:	4606      	mov	r6, r0
 8005d14:	602e      	str	r6, [r5, #0]
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	bf02      	ittt	eq
 8005d1c:	4b0c      	ldreq	r3, [pc, #48]	; (8005d50 <initialise_monitor_handles+0xb4>)
 8005d1e:	681b      	ldreq	r3, [r3, #0]
 8005d20:	602b      	streq	r3, [r5, #0]
 8005d22:	2600      	movs	r6, #0
 8005d24:	f8d8 3000 	ldr.w	r3, [r8]
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	6066      	str	r6, [r4, #4]
 8005d2c:	f7ff ffaa 	bl	8005c84 <_has_ext_stdout_stderr>
 8005d30:	b130      	cbz	r0, 8005d40 <initialise_monitor_handles+0xa4>
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <initialise_monitor_handles+0xb4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005d40:	b005      	add	sp, #20
 8005d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	20012e80 	.word	0x20012e80
 8005d4c:	20012e74 	.word	0x20012e74
 8005d50:	20012e7c 	.word	0x20012e7c
 8005d54:	0800622d 	.word	0x0800622d
 8005d58:	20012e78 	.word	0x20012e78

08005d5c <_isatty>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	f7ff fd69 	bl	8005834 <findslot>
 8005d62:	2509      	movs	r5, #9
 8005d64:	4604      	mov	r4, r0
 8005d66:	b920      	cbnz	r0, 8005d72 <_isatty+0x16>
 8005d68:	f7fe fac4 	bl	80042f4 <__errno>
 8005d6c:	6005      	str	r5, [r0, #0]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	4628      	mov	r0, r5
 8005d74:	4621      	mov	r1, r4
 8005d76:	beab      	bkpt	0x00ab
 8005d78:	4604      	mov	r4, r0
 8005d7a:	2c01      	cmp	r4, #1
 8005d7c:	d0f7      	beq.n	8005d6e <_isatty+0x12>
 8005d7e:	f7fe fab9 	bl	80042f4 <__errno>
 8005d82:	2400      	movs	r4, #0
 8005d84:	4605      	mov	r5, r0
 8005d86:	2613      	movs	r6, #19
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	beab      	bkpt	0x00ab
 8005d8e:	4606      	mov	r6, r0
 8005d90:	602e      	str	r6, [r5, #0]
 8005d92:	e7ec      	b.n	8005d6e <_isatty+0x12>

08005d94 <_exit>:
 8005d94:	4601      	mov	r1, r0
 8005d96:	b508      	push	{r3, lr}
 8005d98:	4a02      	ldr	r2, [pc, #8]	; (8005da4 <_exit+0x10>)
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d9e:	f000 f803 	bl	8005da8 <_kill_shared>
 8005da2:	bf00      	nop
 8005da4:	00020026 	.word	0x00020026

08005da8 <_kill_shared>:
 8005da8:	b507      	push	{r0, r1, r2, lr}
 8005daa:	e9cd 2100 	strd	r2, r1, [sp]
 8005dae:	f7ff ff5d 	bl	8005c6c <_has_ext_exit_extended>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2420      	movne	r4, #32
 8005db8:	2418      	moveq	r4, #24
 8005dba:	f7ff ff57 	bl	8005c6c <_has_ext_exit_extended>
 8005dbe:	b120      	cbz	r0, 8005dca <_kill_shared+0x22>
 8005dc0:	466d      	mov	r5, sp
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	beab      	bkpt	0x00ab
 8005dc8:	4604      	mov	r4, r0
 8005dca:	9d00      	ldr	r5, [sp, #0]
 8005dcc:	e7f9      	b.n	8005dc2 <_kill_shared+0x1a>
	...

08005dd0 <_kill>:
 8005dd0:	2906      	cmp	r1, #6
 8005dd2:	b508      	push	{r3, lr}
 8005dd4:	bf0c      	ite	eq
 8005dd6:	4a02      	ldreq	r2, [pc, #8]	; (8005de0 <_kill+0x10>)
 8005dd8:	4a02      	ldrne	r2, [pc, #8]	; (8005de4 <_kill+0x14>)
 8005dda:	f7ff ffe5 	bl	8005da8 <_kill_shared>
 8005dde:	bf00      	nop
 8005de0:	00020023 	.word	0x00020023
 8005de4:	00020026 	.word	0x00020026

08005de8 <_init>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr

08005df4 <_fini>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr
