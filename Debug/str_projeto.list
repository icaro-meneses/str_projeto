
str_projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012edc  20000080  08007354  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f5c  08007354  00022f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f4c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002007  00000000  00000000  00029ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001741e  00000000  00000000  0002d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b641  00000000  00000000  000445ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cef0  00000000  00000000  0004fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcaff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000341c  00000000  00000000  000dcb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d68 	.word	0x08006d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006d68 	.word	0x08006d68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f000 fce7 	bl	8000f6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059e:	f000 f881 	bl	80006a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a2:	f000 f8dd 	bl	8000760 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	initRandomValues();
 80005a6:	f000 f9df 	bl	8000968 <initRandomValues>
	initialise_monitor_handles();
 80005aa:	f006 fb37 	bl	8006c1c <initialise_monitor_handles>
  		  (void*) NULL,
		  tskIDLE_PRIORITY + 2UL,
		  NULL);
	 */
	/* Tarefas Periódicas */
	xTaskCreate(lerTemperatura, "taskTemper",
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <main+0xb8>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2282      	movs	r2, #130	; 0x82
 80005ba:	4925      	ldr	r1, [pc, #148]	; (8000650 <main+0xbc>)
 80005bc:	4825      	ldr	r0, [pc, #148]	; (8000654 <main+0xc0>)
 80005be:	f002 fa7b 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 1UL,
			&taskTemperHandle);
	xTaskCreate(monitorarPresenca, "taskPresen",
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <main+0xc4>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2303      	movs	r3, #3
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <main+0xc8>)
 80005d0:	4823      	ldr	r0, [pc, #140]	; (8000660 <main+0xcc>)
 80005d2:	f002 fa71 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 3UL,
			&taskPresenHandle);
	xTaskCreate(gerenciarLuzes, "taskGerLuz",
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <main+0xd0>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2282      	movs	r2, #130	; 0x82
 80005e2:	4921      	ldr	r1, [pc, #132]	; (8000668 <main+0xd4>)
 80005e4:	4821      	ldr	r0, [pc, #132]	; (800066c <main+0xd8>)
 80005e6:	f002 fa67 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 2UL,
			&taskGerLuzHandle);
	xTaskCreate(monitorarSeguranca, "taskMonSeg",
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <main+0xdc>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2304      	movs	r3, #4
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2282      	movs	r2, #130	; 0x82
 80005f6:	491f      	ldr	r1, [pc, #124]	; (8000674 <main+0xe0>)
 80005f8:	481f      	ldr	r0, [pc, #124]	; (8000678 <main+0xe4>)
 80005fa:	f002 fa5d 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 4UL,
			&taskMonSegHandle);
	xTaskCreate(enviarDadosViaRede, "taskNetMsg",
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <main+0xe8>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2282      	movs	r2, #130	; 0x82
 800060a:	491d      	ldr	r1, [pc, #116]	; (8000680 <main+0xec>)
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <main+0xf0>)
 800060e:	f002 fa53 	bl	8002ab8 <xTaskCreate>
				(void*) NULL,
				tskIDLE_PRIORITY + 1UL,
				&taskNetMsgHandle);

	/* Tarefas Aperiódicas */
	xTaskCreate(ligarLuzPresenca, "taskLuzPre",
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <main+0xf4>)
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2303      	movs	r3, #3
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2282      	movs	r2, #130	; 0x82
 800061e:	491b      	ldr	r1, [pc, #108]	; (800068c <main+0xf8>)
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <main+0xfc>)
 8000622:	f002 fa49 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 3UL,
			&taskLuzPreHandle);
	xTaskCreate(ligarAlarme, "taskLigAla",
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <main+0x100>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2282      	movs	r2, #130	; 0x82
 8000632:	4919      	ldr	r1, [pc, #100]	; (8000698 <main+0x104>)
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0x108>)
 8000636:	f002 fa3f 	bl	8002ab8 <xTaskCreate>
			configMINIMAL_STACK_SIZE,
			(void*) NULL,
			tskIDLE_PRIORITY + 4UL,
			&taskLigAlaHandle);

	netMutex = xSemaphoreCreateMutex();
 800063a:	2001      	movs	r0, #1
 800063c:	f001 fd9d 	bl	800217a <xQueueCreateMutex>
 8000640:	4603      	mov	r3, r0
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <main+0x10c>)
 8000644:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8000646:	f002 fda7 	bl	8003198 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800064a:	e7fe      	b.n	800064a <main+0xb6>
 800064c:	2000009c 	.word	0x2000009c
 8000650:	08006d80 	.word	0x08006d80
 8000654:	080009b1 	.word	0x080009b1
 8000658:	200000a0 	.word	0x200000a0
 800065c:	08006d8c 	.word	0x08006d8c
 8000660:	08000a39 	.word	0x08000a39
 8000664:	200000a4 	.word	0x200000a4
 8000668:	08006d98 	.word	0x08006d98
 800066c:	08000ae9 	.word	0x08000ae9
 8000670:	200000a8 	.word	0x200000a8
 8000674:	08006da4 	.word	0x08006da4
 8000678:	08000c49 	.word	0x08000c49
 800067c:	200000ac 	.word	0x200000ac
 8000680:	08006db0 	.word	0x08006db0
 8000684:	08000ce5 	.word	0x08000ce5
 8000688:	200000b0 	.word	0x200000b0
 800068c:	08006dbc 	.word	0x08006dbc
 8000690:	08000e71 	.word	0x08000e71
 8000694:	200000b4 	.word	0x200000b4
 8000698:	08006dc8 	.word	0x08006dc8
 800069c:	08000d4d 	.word	0x08000d4d
 80006a0:	200000b8 	.word	0x200000b8

080006a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fe16 	bl	80052e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xb4>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xb4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <SystemClock_Config+0xb8>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <SystemClock_Config+0xb8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 ff3d 	bl	8001594 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000720:	f000 f85c 	bl	80007dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f9a0 	bl	8001a84 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800074a:	f000 f847 	bl	80007dc <Error_Handler>
	}
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x74>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_GPIO_Init+0x74>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_GPIO_Init+0x74>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OUTA_Pin|OUTB_Pin|OUTC_Pin|OUTD_Pin
 8000790:	2200      	movs	r2, #0
 8000792:	21f8      	movs	r1, #248	; 0xf8
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000796:	f000 fec9 	bl	800152c <HAL_GPIO_WritePin>
			|OUTE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : BTNA_Pin BTNB_Pin */
	GPIO_InitStruct.Pin = BTNA_Pin|BTNB_Pin;
 800079a:	2306      	movs	r3, #6
 800079c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x78>)
 80007ac:	f000 fd22 	bl	80011f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : OUTA_Pin OUTB_Pin OUTC_Pin OUTD_Pin
                           OUTE_Pin */
	GPIO_InitStruct.Pin = OUTA_Pin|OUTB_Pin|OUTC_Pin|OUTD_Pin
 80007b0:	23f8      	movs	r3, #248	; 0xf8
 80007b2:	607b      	str	r3, [r7, #4]
			|OUTE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_GPIO_Init+0x78>)
 80007c6:	f000 fd15 	bl	80011f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000

080007dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f004 fd04 	bl	8005274 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20020000 	.word	0x20020000
 8000898:	00000400 	.word	0x00000400
 800089c:	200000bc 	.word	0x200000bc
 80008a0:	20012f60 	.word	0x20012f60

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <toClockTime>:
		HAL_GPIO_TogglePin(OUTD_GPIO_Port, OUTD_Pin);
	}
}

void toClockTime(TickType_t sysTicks, char* clk_string)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	uint16_t seconds, minutes, hours;

	seconds = (sysTicks / configTICK_RATE_HZ) % 60;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <toClockTime+0x88>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0999      	lsrs	r1, r3, #6
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <toClockTime+0x8c>)
 80008de:	fba3 2301 	umull	r2, r3, r3, r1
 80008e2:	095a      	lsrs	r2, r3, #5
 80008e4:	4613      	mov	r3, r2
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	1aca      	subs	r2, r1, r3
 80008ee:	4613      	mov	r3, r2
 80008f0:	81fb      	strh	r3, [r7, #14]
	minutes = (sysTicks / (configTICK_RATE_HZ * 60)) % 60;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <toClockTime+0x90>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0b99      	lsrs	r1, r3, #14
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <toClockTime+0x8c>)
 80008fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000902:	095a      	lsrs	r2, r3, #5
 8000904:	4613      	mov	r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	1aca      	subs	r2, r1, r3
 800090e:	4613      	mov	r3, r2
 8000910:	81bb      	strh	r3, [r7, #12]
	hours = (sysTicks / (configTICK_RATE_HZ * 3600)) % 24;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a11      	ldr	r2, [pc, #68]	; (800095c <toClockTime+0x94>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0d59      	lsrs	r1, r3, #21
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <toClockTime+0x98>)
 800091e:	fba3 2301 	umull	r2, r3, r3, r1
 8000922:	091a      	lsrs	r2, r3, #4
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	1aca      	subs	r2, r1, r3
 800092e:	4613      	mov	r3, r2
 8000930:	817b      	strh	r3, [r7, #10]

	snprintf(clk_string, CLOCK_WATCH_MAX_CHAR,"%02u: %02u: %02u", hours, minutes, seconds);
 8000932:	8979      	ldrh	r1, [r7, #10]
 8000934:	89bb      	ldrh	r3, [r7, #12]
 8000936:	89fa      	ldrh	r2, [r7, #14]
 8000938:	9201      	str	r2, [sp, #4]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	460b      	mov	r3, r1
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <toClockTime+0x9c>)
 8000940:	210f      	movs	r1, #15
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f004 fd5a 	bl	80053fc <sniprintf>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	10624dd3 	.word	0x10624dd3
 8000954:	88888889 	.word	0x88888889
 8000958:	45e7b273 	.word	0x45e7b273
 800095c:	95217cb1 	.word	0x95217cb1
 8000960:	aaaaaaab 	.word	0xaaaaaaab
 8000964:	08006df4 	.word	0x08006df4

08000968 <initRandomValues>:

void initRandomValues(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	time_t t_random;
	srand((unsigned) &t_random);
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fcd7 	bl	8005324 <srand>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <getRandomValue>:

int getRandomValue(int min, int max)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
	int value = (rand() % (min - max + 1)) + min;
 8000988:	f004 fcfa 	bl	8005380 <rand>
 800098c:	4602      	mov	r2, r0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	1acb      	subs	r3, r1, r3
 8000994:	3301      	adds	r3, #1
 8000996:	fb92 f1f3 	sdiv	r1, r2, r3
 800099a:	fb01 f303 	mul.w	r3, r1, r3
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]

	return value;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <lerTemperatura>:

/* Tarefas Periódicas */

void lerTemperatura(void* pvParameters)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
	int temperValue;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 80009b8:	f002 fd4a 	bl	8003450 <xTaskGetTickCount>
 80009bc:	61f8      	str	r0, [r7, #28]
		toClockTime(timeStamp, clockWatchBuf);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	69f8      	ldr	r0, [r7, #28]
 80009c6:	f7ff ff7f 	bl	80008c8 <toClockTime>
		temperValue = getRandomValue(23, 28);
 80009ca:	211c      	movs	r1, #28
 80009cc:	2017      	movs	r0, #23
 80009ce:	f7ff ffd6 	bl	800097e <getRandomValue>
 80009d2:	61b8      	str	r0, [r7, #24]

		printf("[TASK Temper] [time: %s] Temperatura: %02d\n", clockWatchBuf, temperValue);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4619      	mov	r1, r3
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <lerTemperatura+0x78>)
 80009de:	f004 fc89 	bl	80052f4 <iprintf>

		/* Início da seção crítica */
		if(xSemaphoreTake(netMutex, (TickType_t) portMAX_DELAY) == pdTRUE)
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <lerTemperatura+0x7c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fdbc 	bl	8002568 <xQueueSemaphoreTake>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d113      	bne.n	8000a1e <lerTemperatura+0x6e>
		{
			// Preenche o buffer de mensagem de rede
			snprintf(networkMsgBuffer, NET_MSG_BUFFER_SIZE, "[time: %s] Temp: %02d", clockWatchBuf, temperValue);
 80009f6:	f107 0208 	add.w	r2, r7, #8
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4613      	mov	r3, r2
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <lerTemperatura+0x80>)
 8000a02:	2128      	movs	r1, #40	; 0x28
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <lerTemperatura+0x84>)
 8000a06:	f004 fcf9 	bl	80053fc <sniprintf>
			vTaskDelay(10 * (configTICK_RATE_HZ / 1000));
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f002 f9be 	bl	8002d8c <vTaskDelay>

			xSemaphoreGive(netMutex);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <lerTemperatura+0x7c>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f001 fbc7 	bl	80021ac <xQueueGenericSend>
		}
		/* Fim da seção crítica */

		vTaskDelay(3000 * (configTICK_RATE_HZ / 1000));
 8000a1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a22:	f002 f9b3 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000a26:	e7c7      	b.n	80009b8 <lerTemperatura+0x8>
 8000a28:	08006e08 	.word	0x08006e08
 8000a2c:	200000b8 	.word	0x200000b8
 8000a30:	08006e34 	.word	0x08006e34
 8000a34:	200000cc 	.word	0x200000cc

08000a38 <monitorarPresenca>:
	}
}

void monitorarPresenca(void* pvParameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
	/* Monitoramento de Presença feito com o BTNA */
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	GPIO_PinState button_state = GPIO_PIN_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	77bb      	strb	r3, [r7, #30]
	uint8_t machine_state = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000a48:	f002 fd02 	bl	8003450 <xTaskGetTickCount>
 8000a4c:	61b8      	str	r0, [r7, #24]
		toClockTime(timeStamp, clockWatchBuf);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	69b8      	ldr	r0, [r7, #24]
 8000a56:	f7ff ff37 	bl	80008c8 <toClockTime>
		button_state = HAL_GPIO_ReadPin(BTNA_GPIO_Port, BTNA_Pin);
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <monitorarPresenca+0x9c>)
 8000a5e:	f000 fd4d 	bl	80014fc <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	77bb      	strb	r3, [r7, #30]

		switch(machine_state)
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <monitorarPresenca+0x3a>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d00c      	beq.n	8000a8a <monitorarPresenca+0x52>
				machine_state = 0;
			}
			break;

		default:
			break;
 8000a70:	e02c      	b.n	8000acc <monitorarPresenca+0x94>
			printf("[TASK Presen] [time: %s] Presença Não Detectada\n", clockWatchBuf);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <monitorarPresenca+0xa0>)
 8000a7a:	f004 fc3b 	bl	80052f4 <iprintf>
			if (button_state == GPIO_PIN_SET)
 8000a7e:	7fbb      	ldrb	r3, [r7, #30]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d120      	bne.n	8000ac6 <monitorarPresenca+0x8e>
				machine_state = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
			break;
 8000a88:	e01d      	b.n	8000ac6 <monitorarPresenca+0x8e>
			printf("[TASK Presen] [time: %s] Presença Detectada\n", clockWatchBuf);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <monitorarPresenca+0xa4>)
 8000a92:	f004 fc2f 	bl	80052f4 <iprintf>
			xTaskNotifyGive(taskGerLuzHandle);
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <monitorarPresenca+0xa8>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fbe6 	bl	8004274 <xTaskGenericNotify>
			xTaskNotifyGive(taskLuzPreHandle);
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <monitorarPresenca+0xac>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 fbdd 	bl	8004274 <xTaskGenericNotify>
			if (button_state == GPIO_PIN_RESET)
 8000aba:	7fbb      	ldrb	r3, [r7, #30]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <monitorarPresenca+0x92>
				machine_state = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
			break;
 8000ac4:	e001      	b.n	8000aca <monitorarPresenca+0x92>
			break;
 8000ac6:	bf00      	nop
 8000ac8:	e000      	b.n	8000acc <monitorarPresenca+0x94>
			break;
 8000aca:	bf00      	nop
		}

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000acc:	20fa      	movs	r0, #250	; 0xfa
 8000ace:	f002 f95d 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000ad2:	e7b9      	b.n	8000a48 <monitorarPresenca+0x10>
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	08006e4c 	.word	0x08006e4c
 8000adc:	08006e80 	.word	0x08006e80
 8000ae0:	200000a4 	.word	0x200000a4
 8000ae4:	200000b0 	.word	0x200000b0

08000ae8 <gerenciarLuzes>:
	}
}

void gerenciarLuzes(void* pvParameters)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	BaseType_t notificacaoPresenca;

	TickType_t OUTATime = configTICK_RATE_HZ * 60;		// 1 minuto em ticks
 8000af0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
	TickType_t OUTBTime = configTICK_RATE_HZ * 120;		// 2 minutos em ticks
 8000af6:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <gerenciarLuzes+0x130>)
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t OUTCTime = configTICK_RATE_HZ * 240;		// 4 minutos em ticks
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <gerenciarLuzes+0x134>)
 8000afc:	623b      	str	r3, [r7, #32]
	OUTDTime = configTICK_RATE_HZ * 480;				// 8 minutos em ticks
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <gerenciarLuzes+0x138>)
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <gerenciarLuzes+0x13c>)
 8000b02:	601a      	str	r2, [r3, #0]

	TickType_t lastAltTimeA = xTaskGetTickCount();
 8000b04:	f002 fca4 	bl	8003450 <xTaskGetTickCount>
 8000b08:	6378      	str	r0, [r7, #52]	; 0x34
	TickType_t lastAltTimeB = xTaskGetTickCount();
 8000b0a:	f002 fca1 	bl	8003450 <xTaskGetTickCount>
 8000b0e:	6338      	str	r0, [r7, #48]	; 0x30
	TickType_t lastAltTimeC = xTaskGetTickCount();
 8000b10:	f002 fc9e 	bl	8003450 <xTaskGetTickCount>
 8000b14:	62f8      	str	r0, [r7, #44]	; 0x2c
	lastAltTimeD = xTaskGetTickCount();
 8000b16:	f002 fc9b 	bl	8003450 <xTaskGetTickCount>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a42      	ldr	r2, [pc, #264]	; (8000c28 <gerenciarLuzes+0x140>)
 8000b1e:	6013      	str	r3, [r2, #0]

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000b20:	f002 fc96 	bl	8003450 <xTaskGetTickCount>
 8000b24:	61f8      	str	r0, [r7, #28]
		toClockTime(timeStamp, clockWatchBuf);
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	69f8      	ldr	r0, [r7, #28]
 8000b2e:	f7ff fecb 	bl	80008c8 <toClockTime>

		// Alternar o OUTA a cada 1 minuto
		if ((timeStamp - lastAltTimeA) >= OUTATime)
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d80c      	bhi.n	8000b58 <gerenciarLuzes+0x70>
		{
			HAL_GPIO_TogglePin(OUTA_GPIO_Port, OUTA_Pin);
 8000b3e:	2108      	movs	r1, #8
 8000b40:	483a      	ldr	r0, [pc, #232]	; (8000c2c <gerenciarLuzes+0x144>)
 8000b42:	f000 fd0c 	bl	800155e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passou 1 minuto: Alternando LUZ A\n", clockWatchBuf);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4838      	ldr	r0, [pc, #224]	; (8000c30 <gerenciarLuzes+0x148>)
 8000b4e:	f004 fbd1 	bl	80052f4 <iprintf>
			lastAltTimeA = xTaskGetTickCount();
 8000b52:	f002 fc7d 	bl	8003450 <xTaskGetTickCount>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
		}

		// Alternar o OUTB a cada 2 minutos
		if ((timeStamp - lastAltTimeB) >= OUTBTime)
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d80c      	bhi.n	8000b7e <gerenciarLuzes+0x96>
		{
			HAL_GPIO_TogglePin(OUTB_GPIO_Port, OUTB_Pin);
 8000b64:	2110      	movs	r1, #16
 8000b66:	4831      	ldr	r0, [pc, #196]	; (8000c2c <gerenciarLuzes+0x144>)
 8000b68:	f000 fcf9 	bl	800155e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passaram 2 minutos: Alternando LUZ B\n", clockWatchBuf);
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	4830      	ldr	r0, [pc, #192]	; (8000c34 <gerenciarLuzes+0x14c>)
 8000b74:	f004 fbbe 	bl	80052f4 <iprintf>
			lastAltTimeB = xTaskGetTickCount();
 8000b78:	f002 fc6a 	bl	8003450 <xTaskGetTickCount>
 8000b7c:	6338      	str	r0, [r7, #48]	; 0x30
		}

		// Alternar o OUTC a cada 4 minutos
		if ((timeStamp - lastAltTimeC) >= OUTCTime)
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d80c      	bhi.n	8000ba4 <gerenciarLuzes+0xbc>
		{
			HAL_GPIO_TogglePin(OUTC_GPIO_Port, OUTC_Pin);
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4827      	ldr	r0, [pc, #156]	; (8000c2c <gerenciarLuzes+0x144>)
 8000b8e:	f000 fce6 	bl	800155e <HAL_GPIO_TogglePin>
			printf("[TASK gerLuz] [time: %s] Passaram 4 minutos: Alternando LUZ C\n", clockWatchBuf);
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4827      	ldr	r0, [pc, #156]	; (8000c38 <gerenciarLuzes+0x150>)
 8000b9a:	f004 fbab 	bl	80052f4 <iprintf>
			lastAltTimeC = xTaskGetTickCount();
 8000b9e:	f002 fc57 	bl	8003450 <xTaskGetTickCount>
 8000ba2:	62f8      	str	r0, [r7, #44]	; 0x2c
		}

		/* Alternar o OUTD a cada 4 minutos ou se houver presença no
		 * cômodo D, ligue OUTD sem alternar, caso esteja desligado */
		notificacaoPresenca = ulTaskNotifyTake(pdTRUE, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f003 fafb 	bl	80041a4 <ulTaskGenericNotifyTake>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	61bb      	str	r3, [r7, #24]

		if (!notificacaoPresenca && (timeStamp - lastAltTimeD) >= OUTDTime)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d12a      	bne.n	8000c0e <gerenciarLuzes+0x126>
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <gerenciarLuzes+0x140>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <gerenciarLuzes+0x138>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d322      	bcc.n	8000c0e <gerenciarLuzes+0x126>
		{
			estadoOUTD = ~estadoOUTD;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <gerenciarLuzes+0x154>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <gerenciarLuzes+0x154>)
 8000bd4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTD_GPIO_Port, OUTD_Pin, estadoOUTD);
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <gerenciarLuzes+0x154>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <gerenciarLuzes+0x144>)
 8000be2:	f000 fca3 	bl	800152c <HAL_GPIO_WritePin>
			printf("[TASK gerLuz] [time: %s] Passaram %lu minutos: Alternando LUZ D\n",
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <gerenciarLuzes+0x138>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <gerenciarLuzes+0x158>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	0b9a      	lsrs	r2, r3, #14
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4812      	ldr	r0, [pc, #72]	; (8000c44 <gerenciarLuzes+0x15c>)
 8000bfa:	f004 fb7b 	bl	80052f4 <iprintf>
					clockWatchBuf, (OUTDTime / configTICK_RATE_HZ) / 60);
			lastAltTimeD = xTaskGetTickCount();
 8000bfe:	f002 fc27 	bl	8003450 <xTaskGetTickCount>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <gerenciarLuzes+0x140>)
 8000c06:	6013      	str	r3, [r2, #0]

			OUTDTime = configTICK_RATE_HZ * 480;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <gerenciarLuzes+0x138>)
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <gerenciarLuzes+0x13c>)
 8000c0c:	601a      	str	r2, [r3, #0]
		}

		vTaskDelay(100 * (configTICK_RATE_HZ / 1000));
 8000c0e:	2064      	movs	r0, #100	; 0x64
 8000c10:	f002 f8bc 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000c14:	e784      	b.n	8000b20 <gerenciarLuzes+0x38>
 8000c16:	bf00      	nop
 8000c18:	0001d4c0 	.word	0x0001d4c0
 8000c1c:	0003a980 	.word	0x0003a980
 8000c20:	200000c4 	.word	0x200000c4
 8000c24:	00075300 	.word	0x00075300
 8000c28:	200000c0 	.word	0x200000c0
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	08006eb0 	.word	0x08006eb0
 8000c34:	08006eec 	.word	0x08006eec
 8000c38:	08006f2c 	.word	0x08006f2c
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	45e7b273 	.word	0x45e7b273
 8000c44:	08006f6c 	.word	0x08006f6c

08000c48 <monitorarSeguranca>:
	}
}

void monitorarSeguranca(void* pvParameters)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	/* Monitoramento de Presença feito com o BTNB */
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	GPIO_PinState button_state = GPIO_PIN_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	77bb      	strb	r3, [r7, #30]
	uint8_t machine_state = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000c58:	f002 fbfa 	bl	8003450 <xTaskGetTickCount>
 8000c5c:	61b8      	str	r0, [r7, #24]
		toClockTime(timeStamp, clockWatchBuf);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	69b8      	ldr	r0, [r7, #24]
 8000c66:	f7ff fe2f 	bl	80008c8 <toClockTime>
		button_state = HAL_GPIO_ReadPin(BTNB_GPIO_Port, BTNB_Pin);
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <monitorarSeguranca+0x8c>)
 8000c6e:	f000 fc45 	bl	80014fc <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	77bb      	strb	r3, [r7, #30]

		switch(machine_state)
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <monitorarSeguranca+0x3a>
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d00c      	beq.n	8000c9a <monitorarSeguranca+0x52>
				machine_state = 0;
			}
			break;

		default:
			break;
 8000c80:	e023      	b.n	8000cca <monitorarSeguranca+0x82>
			printf("[TASK monSeg] [time: %s] Intruso Não Detectado\n", clockWatchBuf);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <monitorarSeguranca+0x90>)
 8000c8a:	f004 fb33 	bl	80052f4 <iprintf>
			if (button_state == GPIO_PIN_SET)
 8000c8e:	7fbb      	ldrb	r3, [r7, #30]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d117      	bne.n	8000cc4 <monitorarSeguranca+0x7c>
				machine_state = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	77fb      	strb	r3, [r7, #31]
			break;
 8000c98:	e014      	b.n	8000cc4 <monitorarSeguranca+0x7c>
			printf("[TASK monSeg] [time: %s] Intruso Detectado!\n", clockWatchBuf);
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <monitorarSeguranca+0x94>)
 8000ca2:	f004 fb27 	bl	80052f4 <iprintf>
			xTaskNotifyGive(taskLigAlaHandle);
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <monitorarSeguranca+0x98>)
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 fade 	bl	8004274 <xTaskGenericNotify>
			if (button_state == GPIO_PIN_RESET)
 8000cb8:	7fbb      	ldrb	r3, [r7, #30]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <monitorarSeguranca+0x80>
				machine_state = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	77fb      	strb	r3, [r7, #31]
			break;
 8000cc2:	e001      	b.n	8000cc8 <monitorarSeguranca+0x80>
			break;
 8000cc4:	bf00      	nop
 8000cc6:	e000      	b.n	8000cca <monitorarSeguranca+0x82>
			break;
 8000cc8:	bf00      	nop
		}

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000cca:	20fa      	movs	r0, #250	; 0xfa
 8000ccc:	f002 f85e 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000cd0:	e7c2      	b.n	8000c58 <monitorarSeguranca+0x10>
 8000cd2:	bf00      	nop
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	08006fb0 	.word	0x08006fb0
 8000cdc:	08006fe4 	.word	0x08006fe4
 8000ce0:	200000b4 	.word	0x200000b4

08000ce4 <enviarDadosViaRede>:
	}
}

void enviarDadosViaRede(void* pvParameters)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000cec:	f002 fbb0 	bl	8003450 <xTaskGetTickCount>
 8000cf0:	61f8      	str	r0, [r7, #28]
		toClockTime(timeStamp, clockWatchBuf);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	69f8      	ldr	r0, [r7, #28]
 8000cfa:	f7ff fde5 	bl	80008c8 <toClockTime>

		/* Início da seção crítica */
		if(xSemaphoreTake(netMutex, (TickType_t) portMAX_DELAY) == pdTRUE)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <enviarDadosViaRede+0x5c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fc2e 	bl	8002568 <xQueueSemaphoreTake>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d110      	bne.n	8000d34 <enviarDadosViaRede+0x50>
		{
			printf("[TASK NetMsg] [time: %s] Enviando Mensagem via rede: %s\n", clockWatchBuf, networkMsgBuffer);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <enviarDadosViaRede+0x60>)
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <enviarDadosViaRede+0x64>)
 8000d1c:	f004 faea 	bl	80052f4 <iprintf>

			// Limpeza do buffer
			networkMsgBuffer[0] = '\0';
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <enviarDadosViaRede+0x60>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]

			xSemaphoreGive(netMutex);
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <enviarDadosViaRede+0x5c>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f001 fa3c 	bl	80021ac <xQueueGenericSend>
		}
		/* Fim da seção crítica */

		vTaskDelay(2000 * (configTICK_RATE_HZ / 1000));
 8000d34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d38:	f002 f828 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000d3c:	e7d6      	b.n	8000cec <enviarDadosViaRede+0x8>
 8000d3e:	bf00      	nop
 8000d40:	200000b8 	.word	0x200000b8
 8000d44:	200000cc 	.word	0x200000cc
 8000d48:	08007014 	.word	0x08007014

08000d4c <ligarAlarme>:
	}
}

/* Tarefas Aperiódicas */
void ligarAlarme(void* pvParameters)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b092      	sub	sp, #72	; 0x48
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	TickType_t timeStamp;
	char clockWatchBuf[CLOCK_WATCH_MAX_CHAR + 1];

	GPIO_PinState button_state = GPIO_PIN_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t machine_state = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t alarmLock = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	TaskStatus_t segurancaTaskInfo;

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000d66:	f002 fb73 	bl	8003450 <xTaskGetTickCount>
 8000d6a:	6438      	str	r0, [r7, #64]	; 0x40
		toClockTime(timeStamp, clockWatchBuf);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d74:	f7ff fda8 	bl	80008c8 <toClockTime>

		notificacaoSeguranca = ulTaskNotifyTake(pdTRUE, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f003 fa11 	bl	80041a4 <ulTaskGenericNotifyTake>
 8000d82:	4603      	mov	r3, r0
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskGetInfo(taskMonSegHandle, &segurancaTaskInfo, pdTRUE, eInvalid);
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <ligarAlarme+0x110>)
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	f107 0108 	add.w	r1, r7, #8
 8000d8e:	2305      	movs	r3, #5
 8000d90:	2201      	movs	r2, #1
 8000d92:	f002 ff2d 	bl	8003bf0 <vTaskGetInfo>

		if(notificacaoSeguranca)
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d011      	beq.n	8000dc0 <ligarAlarme+0x74>
		{
			/* Suspende a tarefa de monitorarSeguranca até apertar o
			 * botao de seguranca outra vez */
			printf("[TASK LigAla] [time: %s] Notificação de [%s] -> Ligar Alarme -> Suspender sensor\n",
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	482e      	ldr	r0, [pc, #184]	; (8000e60 <ligarAlarme+0x114>)
 8000da6:	f004 faa5 	bl	80052f4 <iprintf>
					clockWatchBuf, segurancaTaskInfo.pcTaskName);
			vTaskSuspend(taskMonSegHandle);
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <ligarAlarme+0x110>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f89a 	bl	8002ee8 <vTaskSuspend>
			vTaskDelay(10 * (configTICK_RATE_HZ / 1000));
 8000db4:	200a      	movs	r0, #10
 8000db6:	f001 ffe9 	bl	8002d8c <vTaskDelay>
			alarmLock = pdTRUE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		}

		if(alarmLock)
 8000dc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d040      	beq.n	8000e4a <ligarAlarme+0xfe>
		{
			button_state = HAL_GPIO_ReadPin(BTNB_GPIO_Port, BTNB_Pin);
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4826      	ldr	r0, [pc, #152]	; (8000e64 <ligarAlarme+0x118>)
 8000dcc:	f000 fb96 	bl	80014fc <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

			switch(machine_state)
 8000dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <ligarAlarme+0x98>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d01b      	beq.n	8000e1a <ligarAlarme+0xce>
					machine_state = 0;
				}
				break;

			default:
				break;
 8000de2:	e037      	b.n	8000e54 <ligarAlarme+0x108>
				printf("[TASK LigAla] [time: %s] ALARME ATIVO!\n", clockWatchBuf);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	481f      	ldr	r0, [pc, #124]	; (8000e68 <ligarAlarme+0x11c>)
 8000dec:	f004 fa82 	bl	80052f4 <iprintf>
				HAL_GPIO_TogglePin(OUTE_GPIO_Port, OUTE_Pin);
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <ligarAlarme+0x118>)
 8000df4:	f000 fbb3 	bl	800155e <HAL_GPIO_TogglePin>
				vTaskDelay(125 * (configTICK_RATE_HZ / 1000));
 8000df8:	207d      	movs	r0, #125	; 0x7d
 8000dfa:	f001 ffc7 	bl	8002d8c <vTaskDelay>
				if (button_state == GPIO_PIN_SET)
 8000dfe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d123      	bne.n	8000e4e <ligarAlarme+0x102>
					printf("[TASK LigAla] [time: %s] ALARME DESLIGADO!\n", clockWatchBuf);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <ligarAlarme+0x120>)
 8000e0e:	f004 fa71 	bl	80052f4 <iprintf>
					machine_state = 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8000e18:	e019      	b.n	8000e4e <ligarAlarme+0x102>
				if (button_state == GPIO_PIN_RESET)
 8000e1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d117      	bne.n	8000e52 <ligarAlarme+0x106>
					alarmLock = pdFALSE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					HAL_GPIO_WritePin(OUTE_GPIO_Port, OUTE_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <ligarAlarme+0x118>)
 8000e2e:	f000 fb7d 	bl	800152c <HAL_GPIO_WritePin>
					vTaskResume(taskMonSegHandle);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <ligarAlarme+0x110>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 f928 	bl	800308c <vTaskResume>
					vTaskDelay(10 * (configTICK_RATE_HZ / 1000));
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f001 ffa5 	bl	8002d8c <vTaskDelay>
					machine_state = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8000e48:	e003      	b.n	8000e52 <ligarAlarme+0x106>
			}
		}
 8000e4a:	bf00      	nop
 8000e4c:	e002      	b.n	8000e54 <ligarAlarme+0x108>
				break;
 8000e4e:	bf00      	nop
 8000e50:	e000      	b.n	8000e54 <ligarAlarme+0x108>
				break;
 8000e52:	bf00      	nop

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000e54:	20fa      	movs	r0, #250	; 0xfa
 8000e56:	f001 ff99 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000e5a:	e784      	b.n	8000d66 <ligarAlarme+0x1a>
 8000e5c:	200000a8 	.word	0x200000a8
 8000e60:	08007050 	.word	0x08007050
 8000e64:	40020000 	.word	0x40020000
 8000e68:	080070a4 	.word	0x080070a4
 8000e6c:	080070cc 	.word	0x080070cc

08000e70 <ligarLuzPresenca>:
	}
}

void ligarLuzPresenca(void* pvParameters)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b092      	sub	sp, #72	; 0x48
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

	TaskStatus_t presencaTaskInfo;

	while(1)
	{
		timeStamp = xTaskGetTickCount();
 8000e78:	f002 faea 	bl	8003450 <xTaskGetTickCount>
 8000e7c:	6478      	str	r0, [r7, #68]	; 0x44
		toClockTime(timeStamp, clockWatchBuf);
 8000e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e82:	4619      	mov	r1, r3
 8000e84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e86:	f7ff fd1f 	bl	80008c8 <toClockTime>

		notificacaoPresenca = ulTaskNotifyTake(pdTRUE, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f003 f988 	bl	80041a4 <ulTaskGenericNotifyTake>
 8000e94:	4603      	mov	r3, r0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
		vTaskGetInfo(taskPresenHandle, &presencaTaskInfo, pdTRUE, eInvalid);
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <ligarLuzPresenca+0x90>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f107 010c 	add.w	r1, r7, #12
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f002 fea4 	bl	8003bf0 <vTaskGetInfo>

		if(notificacaoPresenca && !estadoOUTD)
 8000ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <ligarLuzPresenca+0x86>
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <ligarLuzPresenca+0x94>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11e      	bne.n	8000ef6 <ligarLuzPresenca+0x86>
		{
			//Reiniciar o último registro de tempo
			lastAltTimeD = xTaskGetTickCount();
 8000eb8:	f002 faca 	bl	8003450 <xTaskGetTickCount>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <ligarLuzPresenca+0x98>)
 8000ec0:	6013      	str	r3, [r2, #0]

			estadoOUTD = ~estadoOUTD;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <ligarLuzPresenca+0x94>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <ligarLuzPresenca+0x94>)
 8000ece:	701a      	strb	r2, [r3, #0]
			printf("[TASK luzPre] [time: %s] Notificação de [%s] -> LIGAR Luz D\n",
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <ligarLuzPresenca+0x9c>)
 8000eda:	f004 fa0b 	bl	80052f4 <iprintf>
					clockWatchBuf, presencaTaskInfo.pcTaskName);
			HAL_GPIO_WritePin(OUTD_GPIO_Port, OUTD_Pin, estadoOUTD);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <ligarLuzPresenca+0x94>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <ligarLuzPresenca+0xa0>)
 8000eea:	f000 fb1f 	bl	800152c <HAL_GPIO_WritePin>

			OUTDTime = configTICK_RATE_HZ * 60;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <ligarLuzPresenca+0xa4>)
 8000ef0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000ef4:	601a      	str	r2, [r3, #0]
		}

		vTaskDelay(250 * (configTICK_RATE_HZ / 1000));
 8000ef6:	20fa      	movs	r0, #250	; 0xfa
 8000ef8:	f001 ff48 	bl	8002d8c <vTaskDelay>
		timeStamp = xTaskGetTickCount();
 8000efc:	e7bc      	b.n	8000e78 <ligarLuzPresenca+0x8>
 8000efe:	bf00      	nop
 8000f00:	200000a0 	.word	0x200000a0
 8000f04:	200000c8 	.word	0x200000c8
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	080070f8 	.word	0x080070f8
 8000f10:	40020000 	.word	0x40020000
 8000f14:	200000c4 	.word	0x200000c4

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff fcaf 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f004 f99b 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fb23 	bl	8000594 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f5c:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8000f60:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f64:	20012f5c 	.word	0x20012f5c

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f8f9 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fc22 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f903 	bl	80011da <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fec:	f000 f8d9 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200000f8 	.word	0x200000f8

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5c 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb0 	bl	8001148 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e159      	b.n	80014c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8148 	bne.w	80014be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a2 	beq.w	80014be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_GPIO_Init+0x2e8>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <HAL_GPIO_Init+0x2e8>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <HAL_GPIO_Init+0x2e8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <HAL_GPIO_Init+0x2f0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x202>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_Init+0x2f4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x1fe>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a47      	ldr	r2, [pc, #284]	; (80014ec <HAL_GPIO_Init+0x2f8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x1fa>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a46      	ldr	r2, [pc, #280]	; (80014f0 <HAL_GPIO_Init+0x2fc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x1f6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x300>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x1f2>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_GPIO_Init+0x304>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <HAL_GPIO_Init+0x304>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_GPIO_Init+0x304>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_GPIO_Init+0x304>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x304>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_GPIO_Init+0x304>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f aea2 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43d9      	mvns	r1, r3
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e267      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d00c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d112      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05b      	beq.n	800169c <HAL_RCC_OscConfig+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d157      	bne.n	800169c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e242      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x74>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a6f      	ldr	r2, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 800162c:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a68      	ldr	r2, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fce0 	bl	8001010 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fcdc 	bl	8001010 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e207      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xc0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fccc 	bl	8001010 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fcc8 	bl	8001010 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1f3      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0xe8>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1c7      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4937      	ldr	r1, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fc81 	bl	8001010 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fc7d 	bl	8001010 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1a8      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4925      	ldr	r1, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fc60 	bl	8001010 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fc5c 	bl	8001010 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e187      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d036      	beq.n	80017ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x248>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fc40 	bl	8001010 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fc3c 	bl	8001010 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e167      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x200>
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x248>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fc29 	bl	8001010 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e00e      	b.n	80017e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fc25 	bl	8001010 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d907      	bls.n	80017e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e150      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	42470000 	.word	0x42470000
 80017dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ea      	bne.n	80017c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8097 	beq.w	8001928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a7c      	ldr	r2, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a73      	ldr	r2, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fbe5 	bl	8001010 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fbe1 	bl	8001010 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e10c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x2ea>
 8001870:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	e01c      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b05      	cmp	r3, #5
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x30c>
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a5b      	ldr	r2, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d015      	beq.n	80018ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff fba6 	bl	8001010 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff fba2 	bl	8001010 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0cb      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ee      	beq.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb90 	bl	8001010 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fb8c 	bl	8001010 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0b5      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ee      	bne.n	80018f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a1 	beq.w	8001a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d05c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d141      	bne.n	80019ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fb60 	bl	8001010 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff fb5c 	bl	8001010 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e087      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb35 	bl	8001010 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb31 	bl	8001010 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e05c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x416>
 80019c8:	e054      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb1e 	bl	8001010 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fb1a 	bl	8001010 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e045      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
 80019f6:	e03d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e038      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d028      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d11a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a40:	4013      	ands	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cc      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d044      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e067      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4934      	ldr	r1, [pc, #208]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b74:	f7ff fa4c 	bl	8001010 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff fa48 	bl	8001010 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e04f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d20c      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f9c0 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08007150 	.word	0x08007150
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b090      	sub	sp, #64	; 0x40
 8001c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d00d      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	f200 80a1 	bhi.w	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c82:	e09b      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c88:	e09b      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c8e:	e098      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d028      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cbc:	fb03 f201 	mul.w	r2, r3, r1
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	fb00 f303 	mul.w	r3, r0, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cca:	fba0 1202 	umull	r1, r2, r0, r2
 8001cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	61fa      	str	r2, [r7, #28]
 8001ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cea:	f7fe fad1 	bl	8000290 <__aeabi_uldivmod>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf6:	e053      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	2200      	movs	r2, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	617a      	str	r2, [r7, #20]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d0a:	f04f 0b00 	mov.w	fp, #0
 8001d0e:	4652      	mov	r2, sl
 8001d10:	465b      	mov	r3, fp
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ebb2 080a 	subs.w	r8, r2, sl
 8001d2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d42:	ebb2 0408 	subs.w	r4, r2, r8
 8001d46:	eb63 0509 	sbc.w	r5, r3, r9
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	00eb      	lsls	r3, r5, #3
 8001d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d58:	00e2      	lsls	r2, r4, #3
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	eb14 030a 	adds.w	r3, r4, sl
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	eb45 030b 	adc.w	r3, r5, fp
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d94:	f7fe fa7c 	bl	8000290 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3740      	adds	r7, #64	; 0x40
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	017d7840 	.word	0x017d7840

08001ddc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f103 0208 	add.w	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f103 0208 	add.w	r2, r3, #8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f103 0208 	add.w	r2, r3, #8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e94:	d103      	bne.n	8001e9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e00c      	b.n	8001eb8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3308      	adds	r3, #8
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e002      	b.n	8001eac <vListInsert+0x2e>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d2f6      	bcs.n	8001ea6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6852      	ldr	r2, [r2, #4]
 8001f10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d103      	bne.n	8001f24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05d      	beq.n	8002034 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d059      	beq.n	8002034 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	2100      	movs	r1, #0
 8001f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d000      	beq.n	8001f94 <xQueueGenericReset+0x50>
 8001f92:	2101      	movs	r1, #1
 8001f94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d14c      	bne.n	8002034 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f9a:	f002 febd 	bl	8004d18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	441a      	add	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	441a      	add	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01a      	beq.n	800202e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 fc13 	bl	8003828 <xTaskRemoveFromEventList>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <xQueueGenericReset+0x11c>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	e009      	b.n	800202e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3310      	adds	r3, #16
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fedc 	bl	8001ddc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	3324      	adds	r3, #36	; 0x24
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fed7 	bl	8001ddc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800202e:	f002 fea3 	bl	8004d78 <vPortExitCritical>
 8002032:	e001      	b.n	8002038 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <xQueueGenericReset+0x110>
        __asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	60bb      	str	r3, [r7, #8]
    }
 8002050:	bf00      	nop
 8002052:	e7fe      	b.n	8002052 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002054:	697b      	ldr	r3, [r7, #20]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000ed04 	.word	0xe000ed04

08002064 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02e      	beq.n	80020da <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800207c:	2100      	movs	r1, #0
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	fba3 2302 	umull	r2, r3, r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d000      	beq.n	800208c <xQueueGenericCreate+0x28>
 800208a:	2101      	movs	r1, #1
 800208c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d123      	bne.n	80020da <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800209a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800209e:	d81c      	bhi.n	80020da <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3350      	adds	r3, #80	; 0x50
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 ff14 	bl	8004edc <pvPortMalloc>
 80020b4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3350      	adds	r3, #80	; 0x50
 80020c4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020c6:	79fa      	ldrb	r2, [r7, #7]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f814 	bl	8002100 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020d8:	e00d      	b.n	80020f6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <xQueueGenericCreate+0x92>
        __asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	613b      	str	r3, [r7, #16]
    }
 80020f2:	bf00      	nop
 80020f4:	e7fe      	b.n	80020f4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020f6:	69fb      	ldr	r3, [r7, #28]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e002      	b.n	8002122 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800212e:	2101      	movs	r1, #1
 8002130:	69b8      	ldr	r0, [r7, #24]
 8002132:	f7ff ff07 	bl	8001f44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002166:	2300      	movs	r3, #0
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f81d 	bl	80021ac <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002184:	2301      	movs	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	461a      	mov	r2, r3
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff66 	bl	8002064 <xQueueGenericCreate>
 8002198:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff ffd3 	bl	8002146 <prvInitialiseMutex>

        return xNewQueue;
 80021a0:	68fb      	ldr	r3, [r7, #12]
    }
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	; 0x38
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <xQueueGenericSend+0x32>
        __asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80021da:	bf00      	nop
 80021dc:	e7fe      	b.n	80021dc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <xQueueGenericSend+0x40>
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <xQueueGenericSend+0x44>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <xQueueGenericSend+0x46>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <xQueueGenericSend+0x60>
        __asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002208:	bf00      	nop
 800220a:	e7fe      	b.n	800220a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d103      	bne.n	800221a <xQueueGenericSend+0x6e>
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <xQueueGenericSend+0x72>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <xQueueGenericSend+0x74>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <xQueueGenericSend+0x8e>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	623b      	str	r3, [r7, #32]
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800223a:	f001 fd87 	bl	8003d4c <xTaskGetSchedulerState>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <xQueueGenericSend+0x9e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <xQueueGenericSend+0xa2>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <xQueueGenericSend+0xa4>
 800224e:	2300      	movs	r3, #0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <xQueueGenericSend+0xbe>
        __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	61fb      	str	r3, [r7, #28]
    }
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800226a:	f002 fd55 	bl	8004d18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	429a      	cmp	r2, r3
 8002278:	d302      	bcc.n	8002280 <xQueueGenericSend+0xd4>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d129      	bne.n	80022d4 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002286:	f000 fa85 	bl	8002794 <prvCopyDataToQueue>
 800228a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	3324      	adds	r3, #36	; 0x24
 8002298:	4618      	mov	r0, r3
 800229a:	f001 fac5 	bl	8003828 <xTaskRemoveFromEventList>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <xQueueGenericSend+0x1f8>)
 80022a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	e00a      	b.n	80022cc <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <xQueueGenericSend+0x1f8>)
 80022be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80022cc:	f002 fd54 	bl	8004d78 <vPortExitCritical>
                return pdPASS;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e063      	b.n	800239c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022da:	f002 fd4d 	bl	8004d78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	e05c      	b.n	800239c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fb71 	bl	80039d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022f2:	2301      	movs	r3, #1
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022f6:	f002 fd3f 	bl	8004d78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022fa:	f000 ff9f 	bl	800323c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022fe:	f002 fd0b 	bl	8004d18 <vPortEnterCritical>
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002308:	b25b      	sxtb	r3, r3
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230e:	d103      	bne.n	8002318 <xQueueGenericSend+0x16c>
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800231e:	b25b      	sxtb	r3, r3
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d103      	bne.n	800232e <xQueueGenericSend+0x182>
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800232e:	f002 fd23 	bl	8004d78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002332:	1d3a      	adds	r2, r7, #4
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fb60 	bl	8003a00 <xTaskCheckForTimeOut>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d124      	bne.n	8002390 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002348:	f000 fb1c 	bl	8002984 <prvIsQueueFull>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d018      	beq.n	8002384 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	3310      	adds	r3, #16
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f9fa 	bl	8003754 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002362:	f000 faa7 	bl	80028b4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002366:	f000 ff77 	bl	8003258 <xTaskResumeAll>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f af7c 	bne.w	800226a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <xQueueGenericSend+0x1f8>)
 8002374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	e772      	b.n	800226a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002386:	f000 fa95 	bl	80028b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800238a:	f000 ff65 	bl	8003258 <xTaskResumeAll>
 800238e:	e76c      	b.n	800226a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002392:	f000 fa8f 	bl	80028b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002396:	f000 ff5f 	bl	8003258 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800239a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800239c:	4618      	mov	r0, r3
 800239e:	3738      	adds	r7, #56	; 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xQueueReceive+0x30>
        __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	623b      	str	r3, [r7, #32]
    }
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <xQueueReceive+0x3e>
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <xQueueReceive+0x42>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueReceive+0x44>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueReceive+0x5e>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	61fb      	str	r3, [r7, #28]
    }
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002406:	f001 fca1 	bl	8003d4c <xTaskGetSchedulerState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xQueueReceive+0x6e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueReceive+0x72>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueReceive+0x74>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueReceive+0x8e>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61bb      	str	r3, [r7, #24]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002436:	f002 fc6f 	bl	8004d18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01f      	beq.n	8002486 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800244a:	f000 fa0d 	bl	8002868 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f001 f9e0 	bl	8003828 <xTaskRemoveFromEventList>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <xQueueReceive+0x1bc>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800247e:	f002 fc7b 	bl	8004d78 <vPortExitCritical>
                return pdPASS;
 8002482:	2301      	movs	r3, #1
 8002484:	e069      	b.n	800255a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800248c:	f002 fc74 	bl	8004d78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002490:	2300      	movs	r3, #0
 8002492:	e062      	b.n	800255a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fa98 	bl	80039d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024a8:	f002 fc66 	bl	8004d78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024ac:	f000 fec6 	bl	800323c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024b0:	f002 fc32 	bl	8004d18 <vPortEnterCritical>
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c0:	d103      	bne.n	80024ca <xQueueReceive+0x122>
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d6:	d103      	bne.n	80024e0 <xQueueReceive+0x138>
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e0:	f002 fc4a 	bl	8004d78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024e4:	1d3a      	adds	r2, r7, #4
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fa87 	bl	8003a00 <xTaskCheckForTimeOut>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d123      	bne.n	8002540 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024fa:	f000 fa2d 	bl	8002958 <prvIsQueueEmpty>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d017      	beq.n	8002534 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	3324      	adds	r3, #36	; 0x24
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f001 f921 	bl	8003754 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002514:	f000 f9ce 	bl	80028b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002518:	f000 fe9e 	bl	8003258 <xTaskResumeAll>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d189      	bne.n	8002436 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <xQueueReceive+0x1bc>)
 8002524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	e780      	b.n	8002436 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002536:	f000 f9bd 	bl	80028b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800253a:	f000 fe8d 	bl	8003258 <xTaskResumeAll>
 800253e:	e77a      	b.n	8002436 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002542:	f000 f9b7 	bl	80028b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002546:	f000 fe87 	bl	8003258 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800254a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254c:	f000 fa04 	bl	8002958 <prvIsQueueEmpty>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	f43f af6f 	beq.w	8002436 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002558:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800255a:	4618      	mov	r0, r3
 800255c:	3730      	adds	r7, #48	; 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	61bb      	str	r3, [r7, #24]
    }
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	617b      	str	r3, [r7, #20]
    }
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025b8:	f001 fbc8 	bl	8003d4c <xTaskGetSchedulerState>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <xQueueSemaphoreTake+0x60>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueSemaphoreTake+0x64>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueSemaphoreTake+0x66>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	613b      	str	r3, [r7, #16]
    }
 80025e4:	bf00      	nop
 80025e6:	e7fe      	b.n	80025e6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025e8:	f002 fb96 	bl	8004d18 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d024      	beq.n	8002642 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	1e5a      	subs	r2, r3, #1
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002608:	f001 fdb8 	bl	800417c <pvTaskIncrementMutexHeldCount>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00f      	beq.n	800263a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3310      	adds	r3, #16
 800261e:	4618      	mov	r0, r3
 8002620:	f001 f902 	bl	8003828 <xTaskRemoveFromEventList>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800262a:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <xQueueSemaphoreTake+0x1f8>)
 800262c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800263a:	f002 fb9d 	bl	8004d78 <vPortExitCritical>
                return pdPASS;
 800263e:	2301      	movs	r3, #1
 8002640:	e089      	b.n	8002756 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002648:	f002 fb96 	bl	8004d78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800264c:	2300      	movs	r3, #0
 800264e:	e082      	b.n	8002756 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f9ba 	bl	80039d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002660:	2301      	movs	r3, #1
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002664:	f002 fb88 	bl	8004d78 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002668:	f000 fde8 	bl	800323c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800266c:	f002 fb54 	bl	8004d18 <vPortEnterCritical>
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267c:	d103      	bne.n	8002686 <xQueueSemaphoreTake+0x11e>
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268c:	b25b      	sxtb	r3, r3
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002692:	d103      	bne.n	800269c <xQueueSemaphoreTake+0x134>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800269c:	f002 fb6c 	bl	8004d78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026a0:	463a      	mov	r2, r7
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f9a9 	bl	8003a00 <xTaskCheckForTimeOut>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d132      	bne.n	800271a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f000 f94f 	bl	8002958 <prvIsQueueEmpty>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d026      	beq.n	800270e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80026c8:	f002 fb26 	bl	8004d18 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 fb59 	bl	8003d88 <xTaskPriorityInherit>
 80026d6:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80026d8:	f002 fb4e 	bl	8004d78 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3324      	adds	r3, #36	; 0x24
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 f835 	bl	8003754 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ec:	f000 f8e2 	bl	80028b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026f0:	f000 fdb2 	bl	8003258 <xTaskResumeAll>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f47f af76 	bne.w	80025e8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <xQueueSemaphoreTake+0x1f8>)
 80026fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	e76c      	b.n	80025e8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800270e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002710:	f000 f8d0 	bl	80028b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002714:	f000 fda0 	bl	8003258 <xTaskResumeAll>
 8002718:	e766      	b.n	80025e8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800271a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271c:	f000 f8ca 	bl	80028b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002720:	f000 fd9a 	bl	8003258 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002726:	f000 f917 	bl	8002958 <prvIsQueueEmpty>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f43f af5b 	beq.w	80025e8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8002738:	f002 faee 	bl	8004d18 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800273c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800273e:	f000 f811 	bl	8002764 <prvGetDisinheritPriorityAfterTimeout>
 8002742:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	69f9      	ldr	r1, [r7, #28]
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fc5e 	bl	800400c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002750:	f002 fb12 	bl	8004d78 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002754:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002756:	4618      	mov	r0, r3
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000ed04 	.word	0xe000ed04

08002764 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1c3 0305 	rsb	r3, r3, #5
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e001      	b.n	8002786 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002786:	68fb      	ldr	r3, [r7, #12]
    }
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d14d      	bne.n	8002856 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fb80 	bl	8003ec4 <xTaskPriorityDisinherit>
 80027c4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e043      	b.n	8002856 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d119      	bne.n	8002808 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6858      	ldr	r0, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	461a      	mov	r2, r3
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	f002 fd72 	bl	80052c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	441a      	add	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d32b      	bcc.n	8002856 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e026      	b.n	8002856 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68d8      	ldr	r0, [r3, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	461a      	mov	r2, r3
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	f002 fd58 	bl	80052c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	425b      	negs	r3, r3
 8002822:	441a      	add	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	425b      	negs	r3, r3
 800283e:	441a      	add	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d105      	bne.n	8002856 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	3b01      	subs	r3, #1
 8002854:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800285e:	697b      	ldr	r3, [r7, #20]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d303      	bcc.n	800289c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68d9      	ldr	r1, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	461a      	mov	r2, r3
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f002 fd0e 	bl	80052c8 <memcpy>
    }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028bc:	f002 fa2c 	bl	8004d18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028c8:	e011      	b.n	80028ee <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ffa6 	bl	8003828 <xTaskRemoveFromEventList>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028e2:	f001 f8f3 	bl	8003acc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	dce9      	bgt.n	80028ca <prvUnlockQueue+0x16>
 80028f6:	e000      	b.n	80028fa <prvUnlockQueue+0x46>
                    break;
 80028f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002902:	f002 fa39 	bl	8004d78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002906:	f002 fa07 	bl	8004d18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002910:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002912:	e011      	b.n	8002938 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3310      	adds	r3, #16
 8002920:	4618      	mov	r0, r3
 8002922:	f000 ff81 	bl	8003828 <xTaskRemoveFromEventList>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800292c:	f001 f8ce 	bl	8003acc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	3b01      	subs	r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dce9      	bgt.n	8002914 <prvUnlockQueue+0x60>
 8002940:	e000      	b.n	8002944 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002942:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800294c:	f002 fa14 	bl	8004d78 <vPortExitCritical>
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002960:	f002 f9da 	bl	8004d18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e001      	b.n	8002976 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002976:	f002 f9ff 	bl	8004d78 <vPortExitCritical>

    return xReturn;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800298c:	f002 f9c4 	bl	8004d18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	429a      	cmp	r2, r3
 800299a:	d102      	bne.n	80029a2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e001      	b.n	80029a6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029a6:	f002 f9e7 	bl	8004d78 <vPortExitCritical>

    return xReturn;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
    }
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d024      	beq.n	8002a2e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e01e      	b.n	8002a28 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <vQueueAddToRegistry+0x98>)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d105      	bne.n	8002a06 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <vQueueAddToRegistry+0x98>)
 8002a00:	4413      	add	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
                    break;
 8002a04:	e013      	b.n	8002a2e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <vQueueAddToRegistry+0x6e>
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <vQueueAddToRegistry+0x98>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <vQueueAddToRegistry+0x98>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b07      	cmp	r3, #7
 8002a2c:	d9dd      	bls.n	80029ea <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	200000fc 	.word	0x200000fc

08002a50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a60:	f002 f95a 	bl	8004d18 <vPortEnterCritical>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a70:	d103      	bne.n	8002a7a <vQueueWaitForMessageRestricted+0x2a>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a86:	d103      	bne.n	8002a90 <vQueueWaitForMessageRestricted+0x40>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a90:	f002 f972 	bl	8004d78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fe79 	bl	800379c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff02 	bl	80028b4 <prvUnlockQueue>
    }
 8002ab0:	bf00      	nop
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af04      	add	r7, sp, #16
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fa05 	bl	8004edc <pvPortMalloc>
 8002ad2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ada:	2058      	movs	r0, #88	; 0x58
 8002adc:	f002 f9fe 	bl	8004edc <pvPortMalloc>
 8002ae0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ae8:	2258      	movs	r2, #88	; 0x58
 8002aea:	2100      	movs	r1, #0
 8002aec:	69f8      	ldr	r0, [r7, #28]
 8002aee:	f002 fbf9 	bl	80052e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
 8002af8:	e005      	b.n	8002b06 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f002 faa8 	bl	8005050 <vPortFree>
 8002b00:	e001      	b.n	8002b06 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9303      	str	r3, [sp, #12]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f80e 	bl	8002b44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b28:	69f8      	ldr	r0, [r7, #28]
 8002b2a:	f000 f899 	bl	8002c60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e002      	b.n	8002b3a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
    }
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	21a5      	movs	r1, #165	; 0xa5
 8002b5e:	f002 fbc1 	bl	80052e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	617b      	str	r3, [r7, #20]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01e      	beq.n	8002be0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e012      	b.n	8002bce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3334      	adds	r3, #52	; 0x34
 8002bb8:	460a      	mov	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d9e9      	bls.n	8002ba8 <prvInitialiseNewTask+0x64>
 8002bd4:	e000      	b.n	8002bd8 <prvInitialiseNewTask+0x94>
            {
                break;
 8002bd6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d90a      	bls.n	8002bfc <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	613b      	str	r3, [r7, #16]
    }
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d901      	bls.n	8002c06 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c02:	2304      	movs	r3, #4
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3304      	adds	r3, #4
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f900 	bl	8001e1c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3318      	adds	r3, #24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f8fb 	bl	8001e1c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	f1c3 0205 	rsb	r2, r3, #5
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	68f9      	ldr	r1, [r7, #12]
 8002c40:	69b8      	ldr	r0, [r7, #24]
 8002c42:	f001 ff3d 	bl	8004ac0 <pxPortInitialiseStack>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c68:	f002 f856 	bl	8004d18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <prvAddNewTaskToReadyList+0x110>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a3f      	ldr	r2, [pc, #252]	; (8002d70 <prvAddNewTaskToReadyList+0x110>)
 8002c74:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <prvAddNewTaskToReadyList+0x114>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c7e:	4a3d      	ldr	r2, [pc, #244]	; (8002d74 <prvAddNewTaskToReadyList+0x114>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <prvAddNewTaskToReadyList+0x110>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d110      	bne.n	8002cae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c8c:	f000 ff42 	bl	8003b14 <prvInitialiseTaskLists>
 8002c90:	e00d      	b.n	8002cae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <prvAddNewTaskToReadyList+0x118>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <prvAddNewTaskToReadyList+0x114>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d802      	bhi.n	8002cae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ca8:	4a32      	ldr	r2, [pc, #200]	; (8002d74 <prvAddNewTaskToReadyList+0x114>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <prvAddNewTaskToReadyList+0x11c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <prvAddNewTaskToReadyList+0x11c>)
 8002cb6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <prvAddNewTaskToReadyList+0x11c>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <prvAddNewTaskToReadyList+0x120>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	4a2c      	ldr	r2, [pc, #176]	; (8002d80 <prvAddNewTaskToReadyList+0x120>)
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd6:	492b      	ldr	r1, [pc, #172]	; (8002d84 <prvAddNewTaskToReadyList+0x124>)
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	3204      	adds	r2, #4
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1d1a      	adds	r2, r3, #4
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <prvAddNewTaskToReadyList+0x124>)
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	615a      	str	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	4918      	ldr	r1, [pc, #96]	; (8002d84 <prvAddNewTaskToReadyList+0x124>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	4814      	ldr	r0, [pc, #80]	; (8002d84 <prvAddNewTaskToReadyList+0x124>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d3e:	f002 f81b 	bl	8004d78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <prvAddNewTaskToReadyList+0x118>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <prvAddNewTaskToReadyList+0x114>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <prvAddNewTaskToReadyList+0x128>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000214 	.word	0x20000214
 8002d74:	2000013c 	.word	0x2000013c
 8002d78:	20000220 	.word	0x20000220
 8002d7c:	20000230 	.word	0x20000230
 8002d80:	2000021c 	.word	0x2000021c
 8002d84:	20000140 	.word	0x20000140
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <vTaskDelay+0x60>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <vTaskDelay+0x30>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002dbc:	f000 fa3e 	bl	800323c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 fb78 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002dc8:	f000 fa46 	bl	8003258 <xTaskResumeAll>
 8002dcc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <vTaskDelay+0x64>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000023c 	.word	0x2000023c
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <eTaskGetState+0x28>
        __asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	60fb      	str	r3, [r7, #12]
    }
 8002e18:	bf00      	nop
 8002e1a:	e7fe      	b.n	8002e1a <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <eTaskGetState+0xe0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d103      	bne.n	8002e2e <eTaskGetState+0x3a>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e2c:	e04b      	b.n	8002ec6 <eTaskGetState+0xd2>
        }
        else
        {
            taskENTER_CRITICAL();
 8002e2e:	f001 ff73 	bl	8004d18 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <eTaskGetState+0xe4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002e3e:	4b27      	ldr	r3, [pc, #156]	; (8002edc <eTaskGetState+0xe8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8002e44:	f001 ff98 	bl	8004d78 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d003      	beq.n	8002e58 <eTaskGetState+0x64>
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d103      	bne.n	8002e60 <eTaskGetState+0x6c>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e5e:	e032      	b.n	8002ec6 <eTaskGetState+0xd2>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <eTaskGetState+0xec>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d120      	bne.n	8002eaa <eTaskGetState+0xb6>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d118      	bne.n	8002ea2 <eTaskGetState+0xae>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	e00e      	b.n	8002e9a <eTaskGetState+0xa6>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	4413      	add	r3, r2
 8002e82:	3354      	adds	r3, #84	; 0x54
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d103      	bne.n	8002e94 <eTaskGetState+0xa0>
                                {
                                    eReturn = eBlocked;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    break;
 8002e92:	e018      	b.n	8002ec6 <eTaskGetState+0xd2>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	3301      	adds	r3, #1
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dded      	ble.n	8002e7c <eTaskGetState+0x88>
 8002ea0:	e011      	b.n	8002ec6 <eTaskGetState+0xd2>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ea8:	e00d      	b.n	8002ec6 <eTaskGetState+0xd2>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <eTaskGetState+0xf0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d002      	beq.n	8002eb8 <eTaskGetState+0xc4>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <eTaskGetState+0xcc>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8002eb8:	2304      	movs	r3, #4
 8002eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ebe:	e002      	b.n	8002ec6 <eTaskGetState+0xd2>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }

        return eReturn;
 8002ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000013c 	.word	0x2000013c
 8002ed8:	200001cc 	.word	0x200001cc
 8002edc:	200001d0 	.word	0x200001d0
 8002ee0:	20000200 	.word	0x20000200
 8002ee4:	200001e8 	.word	0x200001e8

08002ee8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ef0:	f001 ff12 	bl	8004d18 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <vTaskSuspend+0x18>
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <vTaskSuspend+0x120>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e000      	b.n	8002f02 <vTaskSuspend+0x1a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fff1 	bl	8001ef0 <uxListRemove>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d115      	bne.n	8002f40 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	493c      	ldr	r1, [pc, #240]	; (800300c <vTaskSuspend+0x124>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <vTaskSuspend+0x58>
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <vTaskSuspend+0x128>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	4a34      	ldr	r2, [pc, #208]	; (8003010 <vTaskSuspend+0x128>)
 8002f3e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ffcf 	bl	8001ef0 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	482e      	ldr	r0, [pc, #184]	; (8003014 <vTaskSuspend+0x12c>)
 8002f5a:	f7fe ff6c 	bl	8001e36 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e010      	b.n	8002f86 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3354      	adds	r3, #84	; 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3354      	adds	r3, #84	; 0x54
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	ddeb      	ble.n	8002f64 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002f8c:	f001 fef4 	bl	8004d78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <vTaskSuspend+0x130>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002f98:	f001 febe 	bl	8004d18 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002f9c:	f000 feba 	bl	8003d14 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002fa0:	f001 feea 	bl	8004d78 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <vTaskSuspend+0x120>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d127      	bne.n	8002ffe <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <vTaskSuspend+0x130>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d017      	beq.n	8002fe6 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <vTaskSuspend+0x134>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <vTaskSuspend+0xec>
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
    }
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <vTaskSuspend+0x138>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fe4:	e00b      	b.n	8002ffe <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <vTaskSuspend+0x12c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <vTaskSuspend+0x13c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d103      	bne.n	8002ffa <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <vTaskSuspend+0x120>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    }
 8002ff8:	e001      	b.n	8002ffe <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8002ffa:	f000 fb4f 	bl	800369c <vTaskSwitchContext>
    }
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000013c 	.word	0x2000013c
 800300c:	20000140 	.word	0x20000140
 8003010:	2000021c 	.word	0x2000021c
 8003014:	20000200 	.word	0x20000200
 8003018:	20000220 	.word	0x20000220
 800301c:	2000023c 	.word	0x2000023c
 8003020:	e000ed04 	.word	0xe000ed04
 8003024:	20000214 	.word	0x20000214

08003028 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60fb      	str	r3, [r7, #12]
    }
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvTaskIsTaskSuspended+0x5c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10a      	bne.n	8003074 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <prvTaskIsTaskSuspended+0x60>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d005      	beq.n	8003074 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003074:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000200 	.word	0x20000200
 8003088:	200001d4 	.word	0x200001d4

0800308c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <vTaskResume+0x28>
        __asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	60fb      	str	r3, [r7, #12]
    }
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80030b4:	4b34      	ldr	r3, [pc, #208]	; (8003188 <vTaskResume+0xfc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d05f      	beq.n	800317e <vTaskResume+0xf2>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 80030c4:	f001 fe28 	bl	8004d18 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80030c8:	6978      	ldr	r0, [r7, #20]
 80030ca:	f7ff ffad 	bl	8003028 <prvTaskIsTaskSuspended>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d052      	beq.n	800317a <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ff09 	bl	8001ef0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <vTaskResume+0x100>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	4a27      	ldr	r2, [pc, #156]	; (800318c <vTaskResume+0x100>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4926      	ldr	r1, [pc, #152]	; (8003190 <vTaskResume+0x104>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	3204      	adds	r2, #4
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1d1a      	adds	r2, r3, #4
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <vTaskResume+0x104>)
 8003134:	441a      	add	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	615a      	str	r2, [r3, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4914      	ldr	r1, [pc, #80]	; (8003190 <vTaskResume+0x104>)
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1c59      	adds	r1, r3, #1
 800314e:	4810      	ldr	r0, [pc, #64]	; (8003190 <vTaskResume+0x104>)
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <vTaskResume+0xfc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	429a      	cmp	r2, r3
 8003168:	d307      	bcc.n	800317a <vTaskResume+0xee>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <vTaskResume+0x108>)
 800316c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800317a:	f001 fdfd 	bl	8004d78 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000013c 	.word	0x2000013c
 800318c:	2000021c 	.word	0x2000021c
 8003190:	20000140 	.word	0x20000140
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <vTaskStartScheduler+0x88>)
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2300      	movs	r3, #0
 80031a8:	2282      	movs	r2, #130	; 0x82
 80031aa:	491e      	ldr	r1, [pc, #120]	; (8003224 <vTaskStartScheduler+0x8c>)
 80031ac:	481e      	ldr	r0, [pc, #120]	; (8003228 <vTaskStartScheduler+0x90>)
 80031ae:	f7ff fc83 	bl	8002ab8 <xTaskCreate>
 80031b2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80031ba:	f001 f9fd 	bl	80045b8 <xTimerCreateTimerTask>
 80031be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d116      	bne.n	80031f4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	60bb      	str	r3, [r7, #8]
    }
 80031d8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <vTaskStartScheduler+0x94>)
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <vTaskStartScheduler+0x98>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <vTaskStartScheduler+0x9c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80031ee:	f001 fcf1 	bl	8004bd4 <xPortStartScheduler>
 80031f2:	e00e      	b.n	8003212 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fa:	d10a      	bne.n	8003212 <vTaskStartScheduler+0x7a>
        __asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	607b      	str	r3, [r7, #4]
    }
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <vTaskStartScheduler+0xa0>)
 8003214:	681b      	ldr	r3, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000238 	.word	0x20000238
 8003224:	08007138 	.word	0x08007138
 8003228:	08003ae5 	.word	0x08003ae5
 800322c:	20000234 	.word	0x20000234
 8003230:	20000220 	.word	0x20000220
 8003234:	20000218 	.word	0x20000218
 8003238:	2000000c 	.word	0x2000000c

0800323c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <vTaskSuspendAll+0x18>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a03      	ldr	r2, [pc, #12]	; (8003254 <vTaskSuspendAll+0x18>)
 8003248:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	2000023c 	.word	0x2000023c

08003258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <xTaskResumeAll+0x1d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <xTaskResumeAll+0x2c>
        __asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
    }
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003284:	f001 fd48 	bl	8004d18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <xTaskResumeAll+0x1d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	4a67      	ldr	r2, [pc, #412]	; (800342c <xTaskResumeAll+0x1d4>)
 8003290:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003292:	4b66      	ldr	r3, [pc, #408]	; (800342c <xTaskResumeAll+0x1d4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80c0 	bne.w	800341c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <xTaskResumeAll+0x1d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80bb 	beq.w	800341c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a6:	e08a      	b.n	80033be <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <xTaskResumeAll+0x1dc>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	6a12      	ldr	r2, [r2, #32]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	69d2      	ldr	r2, [r2, #28]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3318      	adds	r3, #24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d103      	bne.n	80032de <xTaskResumeAll+0x86>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	68d2      	ldr	r2, [r2, #12]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	6892      	ldr	r2, [r2, #8]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3304      	adds	r3, #4
 8003310:	429a      	cmp	r2, r3
 8003312:	d103      	bne.n	800331c <xTaskResumeAll+0xc4>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	4b40      	ldr	r3, [pc, #256]	; (8003438 <xTaskResumeAll+0x1e0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <xTaskResumeAll+0x1e0>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	493e      	ldr	r1, [pc, #248]	; (800343c <xTaskResumeAll+0x1e4>)
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3304      	adds	r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	3204      	adds	r2, #4
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1d1a      	adds	r2, r3, #4
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4a2e      	ldr	r2, [pc, #184]	; (800343c <xTaskResumeAll+0x1e4>)
 8003382:	441a      	add	r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	615a      	str	r2, [r3, #20]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	492b      	ldr	r1, [pc, #172]	; (800343c <xTaskResumeAll+0x1e4>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	4827      	ldr	r0, [pc, #156]	; (800343c <xTaskResumeAll+0x1e4>)
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <xTaskResumeAll+0x1e8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d302      	bcc.n	80033be <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <xTaskResumeAll+0x1ec>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <xTaskResumeAll+0x1dc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f af70 	bne.w	80032a8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033ce:	f000 fca1 	bl	8003d14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <xTaskResumeAll+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033de:	f000 f847 	bl	8003470 <xTaskIncrementTick>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <xTaskResumeAll+0x1ec>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f1      	bne.n	80033de <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <xTaskResumeAll+0x1f0>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xTaskResumeAll+0x1ec>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <xTaskResumeAll+0x1f4>)
 800340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800341c:	f001 fcac 	bl	8004d78 <vPortExitCritical>

    return xAlreadyYielded;
 8003420:	69bb      	ldr	r3, [r7, #24]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000023c 	.word	0x2000023c
 8003430:	20000214 	.word	0x20000214
 8003434:	200001d4 	.word	0x200001d4
 8003438:	2000021c 	.word	0x2000021c
 800343c:	20000140 	.word	0x20000140
 8003440:	2000013c 	.word	0x2000013c
 8003444:	20000228 	.word	0x20000228
 8003448:	20000224 	.word	0x20000224
 800344c:	e000ed04 	.word	0xe000ed04

08003450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <xTaskGetTickCount+0x1c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800345c:	687b      	ldr	r3, [r7, #4]
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000218 	.word	0x20000218

08003470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800347a:	4b7d      	ldr	r3, [pc, #500]	; (8003670 <xTaskIncrementTick+0x200>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80ec 	bne.w	800365c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003484:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <xTaskIncrementTick+0x204>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800348c:	4a79      	ldr	r2, [pc, #484]	; (8003674 <xTaskIncrementTick+0x204>)
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d120      	bne.n	80034da <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003498:	4b77      	ldr	r3, [pc, #476]	; (8003678 <xTaskIncrementTick+0x208>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <xTaskIncrementTick+0x48>
        __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	607b      	str	r3, [r7, #4]
    }
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xTaskIncrementTick+0x46>
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <xTaskIncrementTick+0x208>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	4b6f      	ldr	r3, [pc, #444]	; (800367c <xTaskIncrementTick+0x20c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6d      	ldr	r2, [pc, #436]	; (8003678 <xTaskIncrementTick+0x208>)
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4a6d      	ldr	r2, [pc, #436]	; (800367c <xTaskIncrementTick+0x20c>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <xTaskIncrementTick+0x210>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a6b      	ldr	r2, [pc, #428]	; (8003680 <xTaskIncrementTick+0x210>)
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	f000 fc1d 	bl	8003d14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034da:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <xTaskIncrementTick+0x214>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a3a      	ldr	r2, [r7, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	f0c0 80a6 	bcc.w	8003632 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e6:	4b64      	ldr	r3, [pc, #400]	; (8003678 <xTaskIncrementTick+0x208>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <xTaskIncrementTick+0x214>)
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f6:	601a      	str	r2, [r3, #0]
                    break;
 80034f8:	e09b      	b.n	8003632 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <xTaskIncrementTick+0x208>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	429a      	cmp	r2, r3
 8003510:	d203      	bcs.n	800351a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003512:	4a5c      	ldr	r2, [pc, #368]	; (8003684 <xTaskIncrementTick+0x214>)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003518:	e08b      	b.n	8003632 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	68d2      	ldr	r2, [r2, #12]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	6892      	ldr	r2, [r2, #8]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	3304      	adds	r3, #4
 800353c:	429a      	cmp	r2, r3
 800353e:	d103      	bne.n	8003548 <xTaskIncrementTick+0xd8>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1e5a      	subs	r2, r3, #1
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01e      	beq.n	800359e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	6a12      	ldr	r2, [r2, #32]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	69d2      	ldr	r2, [r2, #28]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3318      	adds	r3, #24
 8003582:	429a      	cmp	r2, r3
 8003584:	d103      	bne.n	800358e <xTaskIncrementTick+0x11e>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2200      	movs	r2, #0
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1e5a      	subs	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <xTaskIncrementTick+0x218>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	4a36      	ldr	r2, [pc, #216]	; (8003688 <xTaskIncrementTick+0x218>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4935      	ldr	r1, [pc, #212]	; (800368c <xTaskIncrementTick+0x21c>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	3204      	adds	r2, #4
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4a26      	ldr	r2, [pc, #152]	; (800368c <xTaskIncrementTick+0x21c>)
 80035f4:	441a      	add	r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	615a      	str	r2, [r3, #20]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	4923      	ldr	r1, [pc, #140]	; (800368c <xTaskIncrementTick+0x21c>)
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	481f      	ldr	r0, [pc, #124]	; (800368c <xTaskIncrementTick+0x21c>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4403      	add	r3, r0
 800361a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <xTaskIncrementTick+0x220>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	429a      	cmp	r2, r3
 8003628:	f67f af5d 	bls.w	80034e6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003630:	e759      	b.n	80034e6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <xTaskIncrementTick+0x220>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	4914      	ldr	r1, [pc, #80]	; (800368c <xTaskIncrementTick+0x21c>)
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d901      	bls.n	800364e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800364a:	2301      	movs	r3, #1
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <xTaskIncrementTick+0x224>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e004      	b.n	8003666 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <xTaskIncrementTick+0x228>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <xTaskIncrementTick+0x228>)
 8003664:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000023c 	.word	0x2000023c
 8003674:	20000218 	.word	0x20000218
 8003678:	200001cc 	.word	0x200001cc
 800367c:	200001d0 	.word	0x200001d0
 8003680:	2000022c 	.word	0x2000022c
 8003684:	20000234 	.word	0x20000234
 8003688:	2000021c 	.word	0x2000021c
 800368c:	20000140 	.word	0x20000140
 8003690:	2000013c 	.word	0x2000013c
 8003694:	20000228 	.word	0x20000228
 8003698:	20000224 	.word	0x20000224

0800369c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <vTaskSwitchContext+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <vTaskSwitchContext+0xa8>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80036b0:	e03f      	b.n	8003732 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <vTaskSwitchContext+0xa8>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <vTaskSwitchContext+0xac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	f1c3 031f 	rsb	r3, r3, #31
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	491f      	ldr	r1, [pc, #124]	; (800374c <vTaskSwitchContext+0xb0>)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	607b      	str	r3, [r7, #4]
    }
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <vTaskSwitchContext+0x5a>
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <vTaskSwitchContext+0xb0>)
 8003704:	4413      	add	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3308      	adds	r3, #8
 800371a:	429a      	cmp	r2, r3
 800371c:	d104      	bne.n	8003728 <vTaskSwitchContext+0x8c>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <vTaskSwitchContext+0xb4>)
 8003730:	6013      	str	r3, [r2, #0]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000023c 	.word	0x2000023c
 8003744:	20000228 	.word	0x20000228
 8003748:	2000021c 	.word	0x2000021c
 800374c:	20000140 	.word	0x20000140
 8003750:	2000013c 	.word	0x2000013c

08003754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
    }
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <vTaskPlaceOnEventList+0x44>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3318      	adds	r3, #24
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fe fb7b 	bl	8001e7e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003788:	2101      	movs	r1, #1
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	f000 fe94 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	2000013c 	.word	0x2000013c

0800379c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	613b      	str	r3, [r7, #16]
    }
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <vTaskPlaceOnEventListRestricted+0x88>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	61da      	str	r2, [r3, #28]
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <vTaskPlaceOnEventListRestricted+0x88>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	621a      	str	r2, [r3, #32]
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <vTaskPlaceOnEventListRestricted+0x88>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	3218      	adds	r2, #24
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <vTaskPlaceOnEventListRestricted+0x88>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f103 0218 	add.w	r2, r3, #24
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <vTaskPlaceOnEventListRestricted+0x88>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003810:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68b8      	ldr	r0, [r7, #8]
 8003816:	f000 fe4f 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
    }
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000013c 	.word	0x2000013c

08003828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003828:	b480      	push	{r7}
 800382a:	b08b      	sub	sp, #44	; 0x2c
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60fb      	str	r3, [r7, #12]
    }
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	6a12      	ldr	r2, [r2, #32]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	69d2      	ldr	r2, [r2, #28]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	3318      	adds	r3, #24
 8003876:	429a      	cmp	r2, r3
 8003878:	d103      	bne.n	8003882 <xTaskRemoveFromEventList+0x5a>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <xTaskRemoveFromEventList+0x194>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d15e      	bne.n	8003958 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	68d2      	ldr	r2, [r2, #12]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	3304      	adds	r3, #4
 80038bc:	429a      	cmp	r2, r3
 80038be:	d103      	bne.n	80038c8 <xTaskRemoveFromEventList+0xa0>
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <xTaskRemoveFromEventList+0x198>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <xTaskRemoveFromEventList+0x198>)
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4935      	ldr	r1, [pc, #212]	; (80039c4 <xTaskRemoveFromEventList+0x19c>)
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3304      	adds	r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	3204      	adds	r2, #4
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	1d1a      	adds	r2, r3, #4
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <xTaskRemoveFromEventList+0x19c>)
 800392e:	441a      	add	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	615a      	str	r2, [r3, #20]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4922      	ldr	r1, [pc, #136]	; (80039c4 <xTaskRemoveFromEventList+0x19c>)
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	481e      	ldr	r0, [pc, #120]	; (80039c4 <xTaskRemoveFromEventList+0x19c>)
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4403      	add	r3, r0
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	e01b      	b.n	8003990 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <xTaskRemoveFromEventList+0x1a0>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	61da      	str	r2, [r3, #28]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	621a      	str	r2, [r3, #32]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	3218      	adds	r2, #24
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f103 0218 	add.w	r2, r3, #24
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <xTaskRemoveFromEventList+0x1a0>)
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <xTaskRemoveFromEventList+0x1a0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <xTaskRemoveFromEventList+0x1a0>)
 800398e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <xTaskRemoveFromEventList+0x1a4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d905      	bls.n	80039aa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800399e:	2301      	movs	r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <xTaskRemoveFromEventList+0x1a8>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e001      	b.n	80039ae <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	372c      	adds	r7, #44	; 0x2c
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	2000023c 	.word	0x2000023c
 80039c0:	2000021c 	.word	0x2000021c
 80039c4:	20000140 	.word	0x20000140
 80039c8:	200001d4 	.word	0x200001d4
 80039cc:	2000013c 	.word	0x2000013c
 80039d0:	20000228 	.word	0x20000228

080039d4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <vTaskInternalSetTimeOutState+0x24>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <vTaskInternalSetTimeOutState+0x28>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	2000022c 	.word	0x2000022c
 80039fc:	20000218 	.word	0x20000218

08003a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	613b      	str	r3, [r7, #16]
    }
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
    }
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a42:	f001 f969 	bl	8004d18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <xTaskCheckForTimeOut+0xc4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5e:	d102      	bne.n	8003a66 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e026      	b.n	8003ab4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <xTaskCheckForTimeOut+0xc8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d00a      	beq.n	8003a88 <xTaskCheckForTimeOut+0x88>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d305      	bcc.n	8003a88 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e015      	b.n	8003ab4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d20b      	bcs.n	8003aaa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff98 	bl	80039d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e004      	b.n	8003ab4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ab4:	f001 f960 	bl	8004d78 <vPortExitCritical>

    return xReturn;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000218 	.word	0x20000218
 8003ac8:	2000022c 	.word	0x2000022c

08003acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <vTaskMissedYield+0x14>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20000228 	.word	0x20000228

08003ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003aec:	f000 f852 	bl	8003b94 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <prvIdleTask+0x28>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d9f9      	bls.n	8003aec <prvIdleTask+0x8>
            {
                taskYIELD();
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <prvIdleTask+0x2c>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b08:	e7f0      	b.n	8003aec <prvIdleTask+0x8>
 8003b0a:	bf00      	nop
 8003b0c:	20000140 	.word	0x20000140
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e00c      	b.n	8003b3a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <prvInitialiseTaskLists+0x60>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f954 	bl	8001ddc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3301      	adds	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d9ef      	bls.n	8003b20 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b40:	480d      	ldr	r0, [pc, #52]	; (8003b78 <prvInitialiseTaskLists+0x64>)
 8003b42:	f7fe f94b 	bl	8001ddc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b46:	480d      	ldr	r0, [pc, #52]	; (8003b7c <prvInitialiseTaskLists+0x68>)
 8003b48:	f7fe f948 	bl	8001ddc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b4c:	480c      	ldr	r0, [pc, #48]	; (8003b80 <prvInitialiseTaskLists+0x6c>)
 8003b4e:	f7fe f945 	bl	8001ddc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003b52:	480c      	ldr	r0, [pc, #48]	; (8003b84 <prvInitialiseTaskLists+0x70>)
 8003b54:	f7fe f942 	bl	8001ddc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003b58:	480b      	ldr	r0, [pc, #44]	; (8003b88 <prvInitialiseTaskLists+0x74>)
 8003b5a:	f7fe f93f 	bl	8001ddc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <prvInitialiseTaskLists+0x78>)
 8003b60:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <prvInitialiseTaskLists+0x64>)
 8003b62:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <prvInitialiseTaskLists+0x7c>)
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <prvInitialiseTaskLists+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000140 	.word	0x20000140
 8003b78:	200001a4 	.word	0x200001a4
 8003b7c:	200001b8 	.word	0x200001b8
 8003b80:	200001d4 	.word	0x200001d4
 8003b84:	200001e8 	.word	0x200001e8
 8003b88:	20000200 	.word	0x20000200
 8003b8c:	200001cc 	.word	0x200001cc
 8003b90:	200001d0 	.word	0x200001d0

08003b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b9a:	e019      	b.n	8003bd0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003b9c:	f001 f8bc 	bl	8004d18 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <prvCheckTasksWaitingTermination+0x50>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe f99f 	bl	8001ef0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <prvCheckTasksWaitingTermination+0x54>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <prvCheckTasksWaitingTermination+0x54>)
 8003bba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <prvCheckTasksWaitingTermination+0x58>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <prvCheckTasksWaitingTermination+0x58>)
 8003bc4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003bc6:	f001 f8d7 	bl	8004d78 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f892 	bl	8003cf4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <prvCheckTasksWaitingTermination+0x58>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e1      	bne.n	8003b9c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001e8 	.word	0x200001e8
 8003be8:	20000214 	.word	0x20000214
 8003bec:	200001fc 	.word	0x200001fc

08003bf0 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <vTaskGetInfo+0x1a>
 8003c04:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <vTaskGetInfo+0xc8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e000      	b.n	8003c0c <vTaskGetInfo+0x1c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d01a      	beq.n	8003c80 <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <vTaskGetInfo+0xc8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d103      	bne.n	8003c5c <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	731a      	strb	r2, [r3, #12]
 8003c5a:	e018      	b.n	8003c8e <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d112      	bne.n	8003c8e <vTaskGetInfo+0x9e>
                    {
                        vTaskSuspendAll();
 8003c68:	f7ff fae8 	bl	800323c <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <vTaskGetInfo+0x8a>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2202      	movs	r2, #2
 8003c78:	731a      	strb	r2, [r3, #12]
                            }
                        }
                        ( void ) xTaskResumeAll();
 8003c7a:	f7ff faed 	bl	8003258 <xTaskResumeAll>
 8003c7e:	e006      	b.n	8003c8e <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003c80:	6978      	ldr	r0, [r7, #20]
 8003c82:	f7ff f8b7 	bl	8002df4 <eTaskGetState>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <vTaskGetInfo+0xb8>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f80f 	bl	8003cbc <prvTaskCheckFreeStackSpace>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 8003ca6:	e002      	b.n	8003cae <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	841a      	strh	r2, [r3, #32]
    }
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000013c 	.word	0x2000013c

08003cbc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003cc8:	e005      	b.n	8003cd6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2ba5      	cmp	r3, #165	; 0xa5
 8003cdc:	d0f5      	beq.n	8003cca <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	b29b      	uxth	r3, r3
    }
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f9a5 	bl	8005050 <vPortFree>
            vPortFree( pxTCB );
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 f9a2 	bl	8005050 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvResetNextTaskUnblockTime+0x30>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <prvResetNextTaskUnblockTime+0x34>)
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d2a:	e005      	b.n	8003d38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <prvResetNextTaskUnblockTime+0x30>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <prvResetNextTaskUnblockTime+0x34>)
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200001cc 	.word	0x200001cc
 8003d48:	20000234 	.word	0x20000234

08003d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <xTaskGetSchedulerState+0x34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e008      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <xTaskGetSchedulerState+0x38>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e001      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d72:	687b      	ldr	r3, [r7, #4]
    }
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20000220 	.word	0x20000220
 8003d84:	2000023c 	.word	0x2000023c

08003d88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8087 	beq.w	8003eae <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <xTaskPriorityInherit+0x130>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d276      	bcs.n	8003e9c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db06      	blt.n	8003dc4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <xTaskPriorityInherit+0x130>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f1c3 0205 	rsb	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6959      	ldr	r1, [r3, #20]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a39      	ldr	r2, [pc, #228]	; (8003ebc <xTaskPriorityInherit+0x134>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4299      	cmp	r1, r3
 8003dda:	d157      	bne.n	8003e8c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe f885 	bl	8001ef0 <uxListRemove>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	2201      	movs	r2, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <xTaskPriorityInherit+0x138>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <xTaskPriorityInherit+0x138>)
 8003e00:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <xTaskPriorityInherit+0x130>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <xTaskPriorityInherit+0x138>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <xTaskPriorityInherit+0x138>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4926      	ldr	r1, [pc, #152]	; (8003ebc <xTaskPriorityInherit+0x134>)
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3304      	adds	r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	3204      	adds	r2, #4
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <xTaskPriorityInherit+0x134>)
 8003e62:	441a      	add	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4913      	ldr	r1, [pc, #76]	; (8003ebc <xTaskPriorityInherit+0x134>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	480f      	ldr	r0, [pc, #60]	; (8003ebc <xTaskPriorityInherit+0x134>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4403      	add	r3, r0
 8003e88:	6019      	str	r1, [r3, #0]
 8003e8a:	e004      	b.n	8003e96 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <xTaskPriorityInherit+0x130>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e008      	b.n	8003eae <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <xTaskPriorityInherit+0x130>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d201      	bcs.n	8003eae <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003eae:	697b      	ldr	r3, [r7, #20]
    }
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2000013c 	.word	0x2000013c
 8003ebc:	20000140 	.word	0x20000140
 8003ec0:	2000021c 	.word	0x2000021c

08003ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808c 	beq.w	8003ff4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003edc:	4b48      	ldr	r3, [pc, #288]	; (8004000 <xTaskPriorityDisinherit+0x13c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d00a      	beq.n	8003efc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	613b      	str	r3, [r7, #16]
    }
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	60fb      	str	r3, [r7, #12]
    }
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	1e5a      	subs	r2, r3, #1
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d061      	beq.n	8003ff4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d15d      	bne.n	8003ff4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd ffd7 	bl	8001ef0 <uxListRemove>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <xTaskPriorityDisinherit+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <xTaskPriorityDisinherit+0x140>)
 8003f5c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	f1c3 0205 	rsb	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	2201      	movs	r2, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <xTaskPriorityDisinherit+0x140>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <xTaskPriorityDisinherit+0x140>)
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	491f      	ldr	r1, [pc, #124]	; (8004008 <xTaskPriorityDisinherit+0x144>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	3204      	adds	r2, #4
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	1d1a      	adds	r2, r3, #4
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <xTaskPriorityDisinherit+0x144>)
 8003fc8:	441a      	add	r2, r3
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	615a      	str	r2, [r3, #20]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <xTaskPriorityDisinherit+0x144>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1c59      	adds	r1, r3, #1
 8003fe2:	4809      	ldr	r0, [pc, #36]	; (8004008 <xTaskPriorityDisinherit+0x144>)
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4403      	add	r3, r0
 8003fee:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
    }
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2000013c 	.word	0x2000013c
 8004004:	2000021c 	.word	0x2000021c
 8004008:	20000140 	.word	0x20000140

0800400c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a1 	beq.w	8004168 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	613b      	str	r3, [r7, #16]
    }
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d902      	bls.n	8004054 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	e002      	b.n	800405a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	429a      	cmp	r2, r3
 8004062:	f000 8081 	beq.w	8004168 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	429a      	cmp	r2, r3
 800406e:	d17b      	bne.n	8004168 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	429a      	cmp	r2, r3
 8004078:	d10a      	bne.n	8004090 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
    }
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db04      	blt.n	80040ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f1c3 0205 	rsb	r2, r3, #5
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	6959      	ldr	r1, [r3, #20]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4a2d      	ldr	r2, [pc, #180]	; (8004174 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80040be:	4413      	add	r3, r2
 80040c0:	4299      	cmp	r1, r3
 80040c2:	d151      	bne.n	8004168 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd ff11 	bl	8001ef0 <uxListRemove>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	4a24      	ldr	r2, [pc, #144]	; (8004178 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80040e8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	4b21      	ldr	r3, [pc, #132]	; (8004178 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	491c      	ldr	r1, [pc, #112]	; (8004174 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	3204      	adds	r2, #4
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	1d1a      	adds	r2, r3, #4
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004140:	441a      	add	r2, r3
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	4806      	ldr	r0, [pc, #24]	; (8004174 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4403      	add	r3, r0
 8004166:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004168:	bf00      	nop
 800416a:	3728      	adds	r7, #40	; 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	2000013c 	.word	0x2000013c
 8004174:	20000140 	.word	0x20000140
 8004178:	2000021c 	.word	0x2000021c

0800417c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800418e:	3201      	adds	r2, #1
 8004190:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004192:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004194:	681b      	ldr	r3, [r3, #0]
    }
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	2000013c 	.word	0x2000013c

080041a4 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	613b      	str	r3, [r7, #16]
    }
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80041cc:	f000 fda4 	bl	8004d18 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	3214      	adds	r2, #20
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80041e0:	4b22      	ldr	r3, [pc, #136]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	3354      	adds	r3, #84	; 0x54
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041f4:	2101      	movs	r1, #1
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f95e 	bl	80044b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <ulTaskGenericNotifyTake+0xcc>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800420c:	f000 fdb4 	bl	8004d78 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004210:	f000 fd82 	bl	8004d18 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	3214      	adds	r2, #20
 800421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004220:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	3214      	adds	r2, #20
 8004236:	2100      	movs	r1, #0
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800423c:	e007      	b.n	800424e <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	1e51      	subs	r1, r2, #1
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	3214      	adds	r2, #20
 800424a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <ulTaskGenericNotifyTake+0xc8>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	3354      	adds	r3, #84	; 0x54
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800425c:	f000 fd8c 	bl	8004d78 <vPortExitCritical>

        return ulReturn;
 8004260:	697b      	ldr	r3, [r7, #20]
    }
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000013c 	.word	0x2000013c
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004282:	2301      	movs	r3, #1
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <xTaskGenericNotify+0x2e>
        __asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	623b      	str	r3, [r7, #32]
    }
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <xTaskGenericNotify+0x4a>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61fb      	str	r3, [r7, #28]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80042c2:	f000 fd29 	bl	8004d18 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80042c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	3214      	adds	r2, #20
 80042d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80042da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	3354      	adds	r3, #84	; 0x54
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4413      	add	r3, r2
 80042ee:	3354      	adds	r3, #84	; 0x54
 80042f0:	2202      	movs	r2, #2
 80042f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d83b      	bhi.n	8004372 <xTaskGenericNotify+0xfe>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <xTaskGenericNotify+0x8c>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004391 	.word	0x08004391
 8004304:	08004315 	.word	0x08004315
 8004308:	08004331 	.word	0x08004331
 800430c:	08004349 	.word	0x08004349
 8004310:	08004357 	.word	0x08004357
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	3214      	adds	r2, #20
 800431a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	ea42 0103 	orr.w	r1, r2, r3
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	3214      	adds	r2, #20
 800432a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800432e:	e032      	b.n	8004396 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	3214      	adds	r2, #20
 8004336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433a:	1c59      	adds	r1, r3, #1
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	3214      	adds	r2, #20
 8004342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004346:	e026      	b.n	8004396 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	3214      	adds	r2, #20
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004354:	e01f      	b.n	8004396 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800435a:	2b02      	cmp	r3, #2
 800435c:	d006      	beq.n	800436c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	3214      	adds	r2, #20
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800436a:	e014      	b.n	8004396 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800436c:	2300      	movs	r3, #0
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8004370:	e011      	b.n	8004396 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004372:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <xTaskGenericNotify+0x230>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <xTaskGenericNotify+0x120>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61bb      	str	r3, [r7, #24]
    }
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xTaskGenericNotify+0x11a>
                    break;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <xTaskGenericNotify+0x122>

                    break;
 8004394:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800439a:	2b01      	cmp	r3, #1
 800439c:	d17b      	bne.n	8004496 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043aa:	68d2      	ldr	r2, [r2, #12]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	6892      	ldr	r2, [r2, #8]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	3304      	adds	r3, #4
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d103      	bne.n	80043cc <xTaskGenericNotify+0x158>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2200      	movs	r2, #0
 80043d0:	615a      	str	r2, [r3, #20]
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <xTaskGenericNotify+0x234>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <xTaskGenericNotify+0x234>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	492e      	ldr	r1, [pc, #184]	; (80044ac <xTaskGenericNotify+0x238>)
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3304      	adds	r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004418:	3204      	adds	r2, #4
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <xTaskGenericNotify+0x238>)
 8004432:	441a      	add	r2, r3
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	615a      	str	r2, [r3, #20]
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	491b      	ldr	r1, [pc, #108]	; (80044ac <xTaskGenericNotify+0x238>)
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1c59      	adds	r1, r3, #1
 800444c:	4817      	ldr	r0, [pc, #92]	; (80044ac <xTaskGenericNotify+0x238>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4403      	add	r3, r0
 8004458:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <xTaskGenericNotify+0x204>
        __asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	617b      	str	r3, [r7, #20]
    }
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <xTaskGenericNotify+0x23c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d907      	bls.n	8004496 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <xTaskGenericNotify+0x240>)
 8004488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004496:	f000 fc6f 	bl	8004d78 <vPortExitCritical>

        return xReturn;
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800449c:	4618      	mov	r0, r3
 800449e:	3738      	adds	r7, #56	; 0x38
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000218 	.word	0x20000218
 80044a8:	2000021c 	.word	0x2000021c
 80044ac:	20000140 	.word	0x20000140
 80044b0:	2000013c 	.word	0x2000013c
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80044c2:	4b36      	ldr	r3, [pc, #216]	; (800459c <prvAddCurrentTaskToDelayedList+0xe4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c8:	4b35      	ldr	r3, [pc, #212]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fd0e 	bl	8001ef0 <uxListRemove>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044da:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4013      	ands	r3, r2
 80044ee:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80044f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d124      	bne.n	8004544 <prvAddCurrentTaskToDelayedList+0x8c>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d021      	beq.n	8004544 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	6892      	ldr	r2, [r2, #8]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	3204      	adds	r2, #4
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	4b1e      	ldr	r3, [pc, #120]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1d1a      	adds	r2, r3, #4
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004534:	615a      	str	r2, [r3, #20]
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004542:	e026      	b.n	8004592 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d209      	bcs.n	8004570 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800455c:	4b13      	ldr	r3, [pc, #76]	; (80045ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fd fc88 	bl	8001e7e <vListInsert>
}
 800456e:	e010      	b.n	8004592 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fd fc7e 	bl	8001e7e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d202      	bcs.n	8004592 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800458c:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6013      	str	r3, [r2, #0]
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000218 	.word	0x20000218
 80045a0:	2000013c 	.word	0x2000013c
 80045a4:	2000021c 	.word	0x2000021c
 80045a8:	20000200 	.word	0x20000200
 80045ac:	200001d0 	.word	0x200001d0
 80045b0:	200001cc 	.word	0x200001cc
 80045b4:	20000234 	.word	0x20000234

080045b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80045c2:	f000 fa47 	bl	8004a54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <xTimerCreateTimerTask+0x54>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xTimerCreateTimerTask+0x58>)
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	2302      	movs	r3, #2
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045dc:	490d      	ldr	r1, [pc, #52]	; (8004614 <xTimerCreateTimerTask+0x5c>)
 80045de:	480e      	ldr	r0, [pc, #56]	; (8004618 <xTimerCreateTimerTask+0x60>)
 80045e0:	f7fe fa6a 	bl	8002ab8 <xTaskCreate>
 80045e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	603b      	str	r3, [r7, #0]
    }
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004602:	687b      	ldr	r3, [r7, #4]
    }
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000270 	.word	0x20000270
 8004610:	20000274 	.word	0x20000274
 8004614:	08007140 	.word	0x08007140
 8004618:	080046c1 	.word	0x080046c1

0800461c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004628:	e008      	b.n	800463c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4413      	add	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	18d1      	adds	r1, r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8dd 	bl	8004808 <prvInsertTimerInActiveList>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ea      	bne.n	800462a <prvReloadTimer+0xe>
        }
    }
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <prvProcessExpiredTimer+0x5c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fd fc39 	bl	8001ef0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff ffc3 	bl	800461c <prvReloadTimer>
 8004696:	e008      	b.n	80046aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	4798      	blx	r3
    }
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000268 	.word	0x20000268

080046c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f857 	bl	8004780 <prvGetNextExpireTime>
 80046d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f803 	bl	80046e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80046de:	f000 f8d5 	bl	800488c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046e2:	e7f1      	b.n	80046c8 <prvTimerTask+0x8>

080046e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80046ee:	f7fe fda5 	bl	800323c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f866 	bl	80047c8 <prvSampleTimeNow>
 80046fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d130      	bne.n	8004766 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <prvProcessTimerOrBlockTask+0x3c>
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	429a      	cmp	r2, r3
 8004710:	d806      	bhi.n	8004720 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004712:	f7fe fda1 	bl	8003258 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ffa1 	bl	8004660 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800471e:	e024      	b.n	800476a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <prvProcessTimerOrBlockTask+0x90>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <prvProcessTimerOrBlockTask+0x50>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <prvProcessTimerOrBlockTask+0x52>
 8004734:	2300      	movs	r3, #0
 8004736:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <prvProcessTimerOrBlockTask+0x94>)
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	f7fe f983 	bl	8002a50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800474a:	f7fe fd85 	bl	8003258 <xTaskResumeAll>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <prvProcessTimerOrBlockTask+0x98>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
    }
 8004764:	e001      	b.n	800476a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004766:	f7fe fd77 	bl	8003258 <xTaskResumeAll>
    }
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000026c 	.word	0x2000026c
 8004778:	20000270 	.word	0x20000270
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <prvGetNextExpireTime+0x44>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <prvGetNextExpireTime+0x16>
 8004792:	2201      	movs	r2, #1
 8004794:	e000      	b.n	8004798 <prvGetNextExpireTime+0x18>
 8004796:	2200      	movs	r2, #0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <prvGetNextExpireTime+0x44>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e001      	b.n	80047b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80047b4:	68fb      	ldr	r3, [r7, #12]
    }
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000268 	.word	0x20000268

080047c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80047d0:	f7fe fe3e 	bl	8003450 <xTaskGetTickCount>
 80047d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <prvSampleTimeNow+0x3c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d205      	bcs.n	80047ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80047e0:	f000 f912 	bl	8004a08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e002      	b.n	80047f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80047f2:	4a04      	ldr	r2, [pc, #16]	; (8004804 <prvSampleTimeNow+0x3c>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80047f8:	68fb      	ldr	r3, [r7, #12]
    }
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000278 	.word	0x20000278

08004808 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d812      	bhi.n	8004854 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e01b      	b.n	800487a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <prvInsertTimerInActiveList+0x7c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fd fb16 	bl	8001e7e <vListInsert>
 8004852:	e012      	b.n	800487a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d206      	bcs.n	800486a <prvInsertTimerInActiveList+0x62>
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e007      	b.n	800487a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <prvInsertTimerInActiveList+0x80>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fd fb02 	bl	8001e7e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800487a:	697b      	ldr	r3, [r7, #20]
    }
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	2000026c 	.word	0x2000026c
 8004888:	20000268 	.word	0x20000268

0800488c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004892:	e0a6      	b.n	80049e2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f2c0 80a2 	blt.w	80049e0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fd fb1f 	bl	8001ef0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff87 	bl	80047c8 <prvSampleTimeNow>
 80048ba:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3b01      	subs	r3, #1
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 808e 	bhi.w	80049e2 <prvProcessReceivedCommands+0x156>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <prvProcessReceivedCommands+0x40>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	08004959 	.word	0x08004959
 80048d8:	0800496d 	.word	0x0800496d
 80048dc:	080049b7 	.word	0x080049b7
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	080048f1 	.word	0x080048f1
 80048e8:	08004959 	.word	0x08004959
 80048ec:	0800496d 	.word	0x0800496d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	18d1      	adds	r1, r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	69f8      	ldr	r0, [r7, #28]
 8004910:	f7ff ff7a 	bl	8004808 <prvInsertTimerInActiveList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4413      	add	r3, r2
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4619      	mov	r1, r3
 8004934:	69f8      	ldr	r0, [r7, #28]
 8004936:	f7ff fe71 	bl	800461c <prvReloadTimer>
 800493a:	e008      	b.n	800494e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	b2da      	uxtb	r2, r3
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	69f8      	ldr	r0, [r7, #28]
 8004954:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004956:	e044      	b.n	80049e2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800496a:	e03a      	b.n	80049e2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	18d1      	adds	r1, r2, r3
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	69f8      	ldr	r0, [r7, #28]
 80049b0:	f7ff ff2a 	bl	8004808 <prvInsertTimerInActiveList>
                        break;
 80049b4:	e015      	b.n	80049e2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80049c4:	69f8      	ldr	r0, [r7, #28]
 80049c6:	f000 fb43 	bl	8005050 <vPortFree>
 80049ca:	e00a      	b.n	80049e2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80049de:	e000      	b.n	80049e2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80049e0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <prvProcessReceivedCommands+0x178>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f107 0108 	add.w	r1, r7, #8
 80049ea:	2200      	movs	r2, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fcdb 	bl	80023a8 <xQueueReceive>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f47f af4d 	bne.w	8004894 <prvProcessReceivedCommands+0x8>
        }
    }
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000270 	.word	0x20000270

08004a08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a0e:	e009      	b.n	8004a24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <prvSwitchTimerLists+0x44>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004a1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a1e:	6838      	ldr	r0, [r7, #0]
 8004a20:	f7ff fe1e 	bl	8004660 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <prvSwitchTimerLists+0x44>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <prvSwitchTimerLists+0x44>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <prvSwitchTimerLists+0x48>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <prvSwitchTimerLists+0x44>)
 8004a3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <prvSwitchTimerLists+0x48>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
    }
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000268 	.word	0x20000268
 8004a50:	2000026c 	.word	0x2000026c

08004a54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004a58:	f000 f95e 	bl	8004d18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <prvCheckForValidListAndQueue+0x54>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004a64:	4811      	ldr	r0, [pc, #68]	; (8004aac <prvCheckForValidListAndQueue+0x58>)
 8004a66:	f7fd f9b9 	bl	8001ddc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004a6a:	4811      	ldr	r0, [pc, #68]	; (8004ab0 <prvCheckForValidListAndQueue+0x5c>)
 8004a6c:	f7fd f9b6 	bl	8001ddc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <prvCheckForValidListAndQueue+0x58>)
 8004a74:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <prvCheckForValidListAndQueue+0x64>)
 8004a78:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <prvCheckForValidListAndQueue+0x5c>)
 8004a7a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	210c      	movs	r1, #12
 8004a80:	200a      	movs	r0, #10
 8004a82:	f7fd faef 	bl	8002064 <xQueueGenericCreate>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <prvCheckForValidListAndQueue+0x54>)
 8004a8a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <prvCheckForValidListAndQueue+0x54>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <prvCheckForValidListAndQueue+0x54>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4908      	ldr	r1, [pc, #32]	; (8004abc <prvCheckForValidListAndQueue+0x68>)
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd ff8a 	bl	80029b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004aa0:	f000 f96a 	bl	8004d78 <vPortExitCritical>
    }
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000270 	.word	0x20000270
 8004aac:	20000240 	.word	0x20000240
 8004ab0:	20000254 	.word	0x20000254
 8004ab4:	20000268 	.word	0x20000268
 8004ab8:	2000026c 	.word	0x2000026c
 8004abc:	08007148 	.word	0x08007148

08004ac0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ad8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004af0:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <pxPortInitialiseStack+0x64>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b14      	subs	r3, #20
 8004afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f06f 0202 	mvn.w	r2, #2
 8004b0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b20      	subs	r3, #32
 8004b14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	08004b29 	.word	0x08004b29

08004b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <prvTaskExitError+0x54>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3a:	d00a      	beq.n	8004b52 <prvTaskExitError+0x2a>
        __asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
    }
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <prvTaskExitError+0x28>
        __asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60bb      	str	r3, [r7, #8]
    }
 8004b64:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004b66:	bf00      	nop
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0fc      	beq.n	8004b68 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	20000010 	.word	0x20000010

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	2000013c 	.word	0x2000013c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
 8004bca:	0000      	.short	0x0000
 8004bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop

08004bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bda:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <xPortStartScheduler+0x120>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a46      	ldr	r2, [pc, #280]	; (8004cf8 <xPortStartScheduler+0x124>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10a      	bne.n	8004bfa <xPortStartScheduler+0x26>
        __asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	613b      	str	r3, [r7, #16]
    }
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <xPortStartScheduler+0x120>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <xPortStartScheduler+0x128>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10a      	bne.n	8004c1a <xPortStartScheduler+0x46>
        __asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
    }
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1a:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <xPortStartScheduler+0x12c>)
 8004c1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	22ff      	movs	r2, #255	; 0xff
 8004c2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <xPortStartScheduler+0x130>)
 8004c40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c48:	e009      	b.n	8004c5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d0ef      	beq.n	8004c4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00a      	beq.n	8004c8c <xPortStartScheduler+0xb8>
        __asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
    }
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <xPortStartScheduler+0x134>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	; (8004d08 <xPortStartScheduler+0x134>)
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004caa:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <xPortStartScheduler+0x138>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <xPortStartScheduler+0x138>)
 8004cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <xPortStartScheduler+0x138>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <xPortStartScheduler+0x138>)
 8004cbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004cc2:	f000 f8db 	bl	8004e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <xPortStartScheduler+0x13c>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ccc:	f000 f8fa 	bl	8004ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <xPortStartScheduler+0x140>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <xPortStartScheduler+0x140>)
 8004cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004cdc:	f7ff ff64 	bl	8004ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ce0:	f7fe fcdc 	bl	800369c <vTaskSwitchContext>
    prvTaskExitError();
 8004ce4:	f7ff ff20 	bl	8004b28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	410fc271 	.word	0x410fc271
 8004cfc:	410fc270 	.word	0x410fc270
 8004d00:	e000e400 	.word	0xe000e400
 8004d04:	2000027c 	.word	0x2000027c
 8004d08:	20000280 	.word	0x20000280
 8004d0c:	e000ed20 	.word	0xe000ed20
 8004d10:	20000010 	.word	0x20000010
 8004d14:	e000ef34 	.word	0xe000ef34

08004d18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
    }
 8004d30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <vPortEnterCritical+0x58>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <vPortEnterCritical+0x58>)
 8004d3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <vPortEnterCritical+0x58>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10f      	bne.n	8004d64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <vPortEnterCritical+0x5c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <vPortEnterCritical+0x4c>
        __asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
    }
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <vPortEnterCritical+0x4a>
    }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	20000010 	.word	0x20000010
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <vPortExitCritical+0x50>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <vPortExitCritical+0x24>
        __asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	607b      	str	r3, [r7, #4]
    }
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <vPortExitCritical+0x50>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <vPortExitCritical+0x50>)
 8004da4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <vPortExitCritical+0x50>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <vPortExitCritical+0x42>
 8004dae:	2300      	movs	r3, #0
 8004db0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004db8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000010 	.word	0x20000010
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe fc4c 	bl	800369c <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	2000013c 	.word	0x2000013c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
    }
 8004e50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe fb0d 	bl	8003470 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <SysTick_Handler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
    }
 8004e6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	0000      	.short	0x0000
 8004ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop

08004edc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004ee8:	f7fe f9a8 	bl	800323c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004eec:	4b53      	ldr	r3, [pc, #332]	; (800503c <pvPortMalloc+0x160>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ef4:	f000 f908 	bl	8005108 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d012      	beq.n	8004f24 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004efe:	2208      	movs	r2, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	3308      	adds	r3, #8
 8004f0a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d804      	bhi.n	8004f20 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	e001      	b.n	8004f24 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db70      	blt.n	800500c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d06d      	beq.n	800500c <pvPortMalloc+0x130>
 8004f30:	4b43      	ldr	r3, [pc, #268]	; (8005040 <pvPortMalloc+0x164>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d868      	bhi.n	800500c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f3a:	4b42      	ldr	r3, [pc, #264]	; (8005044 <pvPortMalloc+0x168>)
 8004f3c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <pvPortMalloc+0x168>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f44:	e004      	b.n	8004f50 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d903      	bls.n	8004f62 <pvPortMalloc+0x86>
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f1      	bne.n	8004f46 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <pvPortMalloc+0x160>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d04f      	beq.n	800500c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4413      	add	r3, r2
 8004f74:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	2308      	movs	r3, #8
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d91f      	bls.n	8004fce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <pvPortMalloc+0xda>
        __asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
    }
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fc8:	6978      	ldr	r0, [r7, #20]
 8004fca:	f000 f8f9 	bl	80051c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <pvPortMalloc+0x164>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <pvPortMalloc+0x164>)
 8004fda:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <pvPortMalloc+0x164>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <pvPortMalloc+0x16c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d203      	bcs.n	8004ff0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <pvPortMalloc+0x164>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a16      	ldr	r2, [pc, #88]	; (8005048 <pvPortMalloc+0x16c>)
 8004fee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <pvPortMalloc+0x170>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3301      	adds	r3, #1
 8005008:	4a10      	ldr	r2, [pc, #64]	; (800504c <pvPortMalloc+0x170>)
 800500a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800500c:	f7fe f924 	bl	8003258 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <pvPortMalloc+0x154>
        __asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60fb      	str	r3, [r7, #12]
    }
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <pvPortMalloc+0x152>
    return pvReturn;
 8005030:	69fb      	ldr	r3, [r7, #28]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20012e8c 	.word	0x20012e8c
 8005040:	20012e90 	.word	0x20012e90
 8005044:	20012e84 	.word	0x20012e84
 8005048:	20012e94 	.word	0x20012e94
 800504c:	20012e98 	.word	0x20012e98

08005050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d049      	beq.n	80050f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005062:	2308      	movs	r3, #8
 8005064:	425b      	negs	r3, r3
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	db0a      	blt.n	800508e <vPortFree+0x3e>
        __asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
    }
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <vPortFree+0x5c>
        __asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
    }
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	0fdb      	lsrs	r3, r3, #31
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d118      	bne.n	80050f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80050d0:	f7fe f8b4 	bl	800323c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <vPortFree+0xb0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <vPortFree+0xb0>)
 80050e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050e2:	6938      	ldr	r0, [r7, #16]
 80050e4:	f000 f86c 	bl	80051c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <vPortFree+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <vPortFree+0xb4>)
 80050f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050f2:	f7fe f8b1 	bl	8003258 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20012e90 	.word	0x20012e90
 8005104:	20012e9c 	.word	0x20012e9c

08005108 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800510e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005112:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <prvHeapInit+0xa4>)
 8005116:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3307      	adds	r3, #7
 8005126:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0307 	bic.w	r3, r3, #7
 800512e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <prvHeapInit+0xa4>)
 8005138:	4413      	add	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <prvHeapInit+0xa8>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <prvHeapInit+0xa8>)
 8005148:	2200      	movs	r2, #0
 800514a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005154:	2208      	movs	r2, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <prvHeapInit+0xac>)
 8005168:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <prvHeapInit+0xac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <prvHeapInit+0xac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <prvHeapInit+0xac>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <prvHeapInit+0xb0>)
 8005196:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a07      	ldr	r2, [pc, #28]	; (80051bc <prvHeapInit+0xb4>)
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	20000284 	.word	0x20000284
 80051b0:	20012e84 	.word	0x20012e84
 80051b4:	20012e8c 	.word	0x20012e8c
 80051b8:	20012e94 	.word	0x20012e94
 80051bc:	20012e90 	.word	0x20012e90

080051c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <prvInsertBlockIntoFreeList+0xac>)
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e002      	b.n	80051d4 <prvInsertBlockIntoFreeList+0x14>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d8f7      	bhi.n	80051ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d108      	bne.n	8005202 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d118      	bne.n	8005248 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <prvInsertBlockIntoFreeList+0xb0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d00d      	beq.n	800523e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e008      	b.n	8005250 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <prvInsertBlockIntoFreeList+0xb0>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e003      	b.n	8005250 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d002      	beq.n	800525e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20012e84 	.word	0x20012e84
 8005270:	20012e8c 	.word	0x20012e8c

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000014 	.word	0x20000014

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4d0d      	ldr	r5, [pc, #52]	; (80052b8 <__libc_init_array+0x38>)
 8005284:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	2600      	movs	r6, #0
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	4d0b      	ldr	r5, [pc, #44]	; (80052c0 <__libc_init_array+0x40>)
 8005292:	4c0c      	ldr	r4, [pc, #48]	; (80052c4 <__libc_init_array+0x44>)
 8005294:	f001 fd68 	bl	8006d68 <_init>
 8005298:	1b64      	subs	r4, r4, r5
 800529a:	10a4      	asrs	r4, r4, #2
 800529c:	2600      	movs	r6, #0
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	080072cc 	.word	0x080072cc
 80052bc:	080072cc 	.word	0x080072cc
 80052c0:	080072cc 	.word	0x080072cc
 80052c4:	080072d0 	.word	0x080072d0

080052c8 <memcpy>:
 80052c8:	440a      	add	r2, r1
 80052ca:	4291      	cmp	r1, r2
 80052cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052d0:	d100      	bne.n	80052d4 <memcpy+0xc>
 80052d2:	4770      	bx	lr
 80052d4:	b510      	push	{r4, lr}
 80052d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052de:	4291      	cmp	r1, r2
 80052e0:	d1f9      	bne.n	80052d6 <memcpy+0xe>
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <memset>:
 80052e4:	4402      	add	r2, r0
 80052e6:	4603      	mov	r3, r0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d100      	bne.n	80052ee <memset+0xa>
 80052ec:	4770      	bx	lr
 80052ee:	f803 1b01 	strb.w	r1, [r3], #1
 80052f2:	e7f9      	b.n	80052e8 <memset+0x4>

080052f4 <iprintf>:
 80052f4:	b40f      	push	{r0, r1, r2, r3}
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <iprintf+0x2c>)
 80052f8:	b513      	push	{r0, r1, r4, lr}
 80052fa:	681c      	ldr	r4, [r3, #0]
 80052fc:	b124      	cbz	r4, 8005308 <iprintf+0x14>
 80052fe:	69a3      	ldr	r3, [r4, #24]
 8005300:	b913      	cbnz	r3, 8005308 <iprintf+0x14>
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f924 	bl	8005550 <__sinit>
 8005308:	ab05      	add	r3, sp, #20
 800530a:	9a04      	ldr	r2, [sp, #16]
 800530c:	68a1      	ldr	r1, [r4, #8]
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fc3d 	bl	8005b90 <_vfiprintf_r>
 8005316:	b002      	add	sp, #8
 8005318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531c:	b004      	add	sp, #16
 800531e:	4770      	bx	lr
 8005320:	20000014 	.word	0x20000014

08005324 <srand>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <srand+0x44>)
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800532c:	4604      	mov	r4, r0
 800532e:	b9b3      	cbnz	r3, 800535e <srand+0x3a>
 8005330:	2018      	movs	r0, #24
 8005332:	f000 f9bf 	bl	80056b4 <malloc>
 8005336:	4602      	mov	r2, r0
 8005338:	63a8      	str	r0, [r5, #56]	; 0x38
 800533a:	b920      	cbnz	r0, 8005346 <srand+0x22>
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <srand+0x48>)
 800533e:	480c      	ldr	r0, [pc, #48]	; (8005370 <srand+0x4c>)
 8005340:	2142      	movs	r1, #66	; 0x42
 8005342:	f000 f88f 	bl	8005464 <__assert_func>
 8005346:	490b      	ldr	r1, [pc, #44]	; (8005374 <srand+0x50>)
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <srand+0x54>)
 800534a:	e9c0 1300 	strd	r1, r3, [r0]
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <srand+0x58>)
 8005350:	6083      	str	r3, [r0, #8]
 8005352:	230b      	movs	r3, #11
 8005354:	8183      	strh	r3, [r0, #12]
 8005356:	2100      	movs	r1, #0
 8005358:	2001      	movs	r0, #1
 800535a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800535e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005360:	2200      	movs	r2, #0
 8005362:	611c      	str	r4, [r3, #16]
 8005364:	615a      	str	r2, [r3, #20]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	20000014 	.word	0x20000014
 800536c:	08007164 	.word	0x08007164
 8005370:	0800717b 	.word	0x0800717b
 8005374:	abcd330e 	.word	0xabcd330e
 8005378:	e66d1234 	.word	0xe66d1234
 800537c:	0005deec 	.word	0x0005deec

08005380 <rand>:
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <rand+0x5c>)
 8005382:	b510      	push	{r4, lr}
 8005384:	681c      	ldr	r4, [r3, #0]
 8005386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005388:	b9b3      	cbnz	r3, 80053b8 <rand+0x38>
 800538a:	2018      	movs	r0, #24
 800538c:	f000 f992 	bl	80056b4 <malloc>
 8005390:	63a0      	str	r0, [r4, #56]	; 0x38
 8005392:	b928      	cbnz	r0, 80053a0 <rand+0x20>
 8005394:	4602      	mov	r2, r0
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <rand+0x60>)
 8005398:	4812      	ldr	r0, [pc, #72]	; (80053e4 <rand+0x64>)
 800539a:	214e      	movs	r1, #78	; 0x4e
 800539c:	f000 f862 	bl	8005464 <__assert_func>
 80053a0:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <rand+0x68>)
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <rand+0x6c>)
 80053a4:	e9c0 2300 	strd	r2, r3, [r0]
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <rand+0x70>)
 80053aa:	6083      	str	r3, [r0, #8]
 80053ac:	230b      	movs	r3, #11
 80053ae:	8183      	strh	r3, [r0, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	2300      	movs	r3, #0
 80053b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80053b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80053ba:	4a0e      	ldr	r2, [pc, #56]	; (80053f4 <rand+0x74>)
 80053bc:	6920      	ldr	r0, [r4, #16]
 80053be:	6963      	ldr	r3, [r4, #20]
 80053c0:	490d      	ldr	r1, [pc, #52]	; (80053f8 <rand+0x78>)
 80053c2:	4342      	muls	r2, r0
 80053c4:	fb01 2203 	mla	r2, r1, r3, r2
 80053c8:	fba0 0101 	umull	r0, r1, r0, r1
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	eb42 0001 	adc.w	r0, r2, r1
 80053d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80053d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80053da:	bd10      	pop	{r4, pc}
 80053dc:	20000014 	.word	0x20000014
 80053e0:	08007164 	.word	0x08007164
 80053e4:	0800717b 	.word	0x0800717b
 80053e8:	abcd330e 	.word	0xabcd330e
 80053ec:	e66d1234 	.word	0xe66d1234
 80053f0:	0005deec 	.word	0x0005deec
 80053f4:	5851f42d 	.word	0x5851f42d
 80053f8:	4c957f2d 	.word	0x4c957f2d

080053fc <sniprintf>:
 80053fc:	b40c      	push	{r2, r3}
 80053fe:	b530      	push	{r4, r5, lr}
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <sniprintf+0x64>)
 8005402:	1e0c      	subs	r4, r1, #0
 8005404:	681d      	ldr	r5, [r3, #0]
 8005406:	b09d      	sub	sp, #116	; 0x74
 8005408:	da08      	bge.n	800541c <sniprintf+0x20>
 800540a:	238b      	movs	r3, #139	; 0x8b
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005412:	b01d      	add	sp, #116	; 0x74
 8005414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005418:	b002      	add	sp, #8
 800541a:	4770      	bx	lr
 800541c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005420:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005424:	bf14      	ite	ne
 8005426:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800542a:	4623      	moveq	r3, r4
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005434:	9002      	str	r0, [sp, #8]
 8005436:	9006      	str	r0, [sp, #24]
 8005438:	f8ad 3016 	strh.w	r3, [sp, #22]
 800543c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800543e:	ab21      	add	r3, sp, #132	; 0x84
 8005440:	a902      	add	r1, sp, #8
 8005442:	4628      	mov	r0, r5
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	f000 fa79 	bl	800593c <_svfiprintf_r>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	bfbc      	itt	lt
 800544e:	238b      	movlt	r3, #139	; 0x8b
 8005450:	602b      	strlt	r3, [r5, #0]
 8005452:	2c00      	cmp	r4, #0
 8005454:	d0dd      	beq.n	8005412 <sniprintf+0x16>
 8005456:	9b02      	ldr	r3, [sp, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e7d9      	b.n	8005412 <sniprintf+0x16>
 800545e:	bf00      	nop
 8005460:	20000014 	.word	0x20000014

08005464 <__assert_func>:
 8005464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005466:	4614      	mov	r4, r2
 8005468:	461a      	mov	r2, r3
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <__assert_func+0x2c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4605      	mov	r5, r0
 8005470:	68d8      	ldr	r0, [r3, #12]
 8005472:	b14c      	cbz	r4, 8005488 <__assert_func+0x24>
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <__assert_func+0x30>)
 8005476:	9100      	str	r1, [sp, #0]
 8005478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800547c:	4906      	ldr	r1, [pc, #24]	; (8005498 <__assert_func+0x34>)
 800547e:	462b      	mov	r3, r5
 8005480:	f000 f8e4 	bl	800564c <fiprintf>
 8005484:	f000 ff6e 	bl	8006364 <abort>
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <__assert_func+0x38>)
 800548a:	461c      	mov	r4, r3
 800548c:	e7f3      	b.n	8005476 <__assert_func+0x12>
 800548e:	bf00      	nop
 8005490:	20000014 	.word	0x20000014
 8005494:	080071d6 	.word	0x080071d6
 8005498:	080071e3 	.word	0x080071e3
 800549c:	08007211 	.word	0x08007211

080054a0 <std>:
 80054a0:	2300      	movs	r3, #0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	e9c0 3300 	strd	r3, r3, [r0]
 80054aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ae:	6083      	str	r3, [r0, #8]
 80054b0:	8181      	strh	r1, [r0, #12]
 80054b2:	6643      	str	r3, [r0, #100]	; 0x64
 80054b4:	81c2      	strh	r2, [r0, #14]
 80054b6:	6183      	str	r3, [r0, #24]
 80054b8:	4619      	mov	r1, r3
 80054ba:	2208      	movs	r2, #8
 80054bc:	305c      	adds	r0, #92	; 0x5c
 80054be:	f7ff ff11 	bl	80052e4 <memset>
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <std+0x38>)
 80054c4:	6263      	str	r3, [r4, #36]	; 0x24
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <std+0x3c>)
 80054c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <std+0x40>)
 80054cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <std+0x44>)
 80054d0:	6224      	str	r4, [r4, #32]
 80054d2:	6323      	str	r3, [r4, #48]	; 0x30
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	08006139 	.word	0x08006139
 80054dc:	0800615b 	.word	0x0800615b
 80054e0:	08006193 	.word	0x08006193
 80054e4:	080061b7 	.word	0x080061b7

080054e8 <_cleanup_r>:
 80054e8:	4901      	ldr	r1, [pc, #4]	; (80054f0 <_cleanup_r+0x8>)
 80054ea:	f000 b8c1 	b.w	8005670 <_fwalk_reent>
 80054ee:	bf00      	nop
 80054f0:	080064a1 	.word	0x080064a1

080054f4 <__sfmoreglue>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	2268      	movs	r2, #104	; 0x68
 80054f8:	1e4d      	subs	r5, r1, #1
 80054fa:	4355      	muls	r5, r2
 80054fc:	460e      	mov	r6, r1
 80054fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005502:	f000 f94b 	bl	800579c <_malloc_r>
 8005506:	4604      	mov	r4, r0
 8005508:	b140      	cbz	r0, 800551c <__sfmoreglue+0x28>
 800550a:	2100      	movs	r1, #0
 800550c:	e9c0 1600 	strd	r1, r6, [r0]
 8005510:	300c      	adds	r0, #12
 8005512:	60a0      	str	r0, [r4, #8]
 8005514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005518:	f7ff fee4 	bl	80052e4 <memset>
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}

08005520 <__sfp_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sfp_lock_acquire+0x8>)
 8005522:	f000 b8c5 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20012ea1 	.word	0x20012ea1

0800552c <__sfp_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__sfp_lock_release+0x8>)
 800552e:	f000 b8c0 	b.w	80056b2 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20012ea1 	.word	0x20012ea1

08005538 <__sinit_lock_acquire>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__sinit_lock_acquire+0x8>)
 800553a:	f000 b8b9 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	20012ea2 	.word	0x20012ea2

08005544 <__sinit_lock_release>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sinit_lock_release+0x8>)
 8005546:	f000 b8b4 	b.w	80056b2 <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	20012ea2 	.word	0x20012ea2

08005550 <__sinit>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	f7ff fff0 	bl	8005538 <__sinit_lock_acquire>
 8005558:	69a3      	ldr	r3, [r4, #24]
 800555a:	b11b      	cbz	r3, 8005564 <__sinit+0x14>
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005560:	f7ff bff0 	b.w	8005544 <__sinit_lock_release>
 8005564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005568:	6523      	str	r3, [r4, #80]	; 0x50
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <__sinit+0x68>)
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <__sinit+0x6c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	62a2      	str	r2, [r4, #40]	; 0x28
 8005572:	42a3      	cmp	r3, r4
 8005574:	bf04      	itt	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	61a3      	streq	r3, [r4, #24]
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f820 	bl	80055c0 <__sfp>
 8005580:	6060      	str	r0, [r4, #4]
 8005582:	4620      	mov	r0, r4
 8005584:	f000 f81c 	bl	80055c0 <__sfp>
 8005588:	60a0      	str	r0, [r4, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	f000 f818 	bl	80055c0 <__sfp>
 8005590:	2200      	movs	r2, #0
 8005592:	60e0      	str	r0, [r4, #12]
 8005594:	2104      	movs	r1, #4
 8005596:	6860      	ldr	r0, [r4, #4]
 8005598:	f7ff ff82 	bl	80054a0 <std>
 800559c:	68a0      	ldr	r0, [r4, #8]
 800559e:	2201      	movs	r2, #1
 80055a0:	2109      	movs	r1, #9
 80055a2:	f7ff ff7d 	bl	80054a0 <std>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	2202      	movs	r2, #2
 80055aa:	2112      	movs	r1, #18
 80055ac:	f7ff ff78 	bl	80054a0 <std>
 80055b0:	2301      	movs	r3, #1
 80055b2:	61a3      	str	r3, [r4, #24]
 80055b4:	e7d2      	b.n	800555c <__sinit+0xc>
 80055b6:	bf00      	nop
 80055b8:	08007160 	.word	0x08007160
 80055bc:	080054e9 	.word	0x080054e9

080055c0 <__sfp>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	4607      	mov	r7, r0
 80055c4:	f7ff ffac 	bl	8005520 <__sfp_lock_acquire>
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <__sfp+0x84>)
 80055ca:	681e      	ldr	r6, [r3, #0]
 80055cc:	69b3      	ldr	r3, [r6, #24]
 80055ce:	b913      	cbnz	r3, 80055d6 <__sfp+0x16>
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff ffbd 	bl	8005550 <__sinit>
 80055d6:	3648      	adds	r6, #72	; 0x48
 80055d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055dc:	3b01      	subs	r3, #1
 80055de:	d503      	bpl.n	80055e8 <__sfp+0x28>
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	b30b      	cbz	r3, 8005628 <__sfp+0x68>
 80055e4:	6836      	ldr	r6, [r6, #0]
 80055e6:	e7f7      	b.n	80055d8 <__sfp+0x18>
 80055e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055ec:	b9d5      	cbnz	r5, 8005624 <__sfp+0x64>
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <__sfp+0x88>)
 80055f0:	60e3      	str	r3, [r4, #12]
 80055f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055f6:	6665      	str	r5, [r4, #100]	; 0x64
 80055f8:	f000 f859 	bl	80056ae <__retarget_lock_init_recursive>
 80055fc:	f7ff ff96 	bl	800552c <__sfp_lock_release>
 8005600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005608:	6025      	str	r5, [r4, #0]
 800560a:	61a5      	str	r5, [r4, #24]
 800560c:	2208      	movs	r2, #8
 800560e:	4629      	mov	r1, r5
 8005610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005614:	f7ff fe66 	bl	80052e4 <memset>
 8005618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800561c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005620:	4620      	mov	r0, r4
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	3468      	adds	r4, #104	; 0x68
 8005626:	e7d9      	b.n	80055dc <__sfp+0x1c>
 8005628:	2104      	movs	r1, #4
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ff62 	bl	80054f4 <__sfmoreglue>
 8005630:	4604      	mov	r4, r0
 8005632:	6030      	str	r0, [r6, #0]
 8005634:	2800      	cmp	r0, #0
 8005636:	d1d5      	bne.n	80055e4 <__sfp+0x24>
 8005638:	f7ff ff78 	bl	800552c <__sfp_lock_release>
 800563c:	230c      	movs	r3, #12
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	e7ee      	b.n	8005620 <__sfp+0x60>
 8005642:	bf00      	nop
 8005644:	08007160 	.word	0x08007160
 8005648:	ffff0001 	.word	0xffff0001

0800564c <fiprintf>:
 800564c:	b40e      	push	{r1, r2, r3}
 800564e:	b503      	push	{r0, r1, lr}
 8005650:	4601      	mov	r1, r0
 8005652:	ab03      	add	r3, sp, #12
 8005654:	4805      	ldr	r0, [pc, #20]	; (800566c <fiprintf+0x20>)
 8005656:	f853 2b04 	ldr.w	r2, [r3], #4
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	f000 fa97 	bl	8005b90 <_vfiprintf_r>
 8005662:	b002      	add	sp, #8
 8005664:	f85d eb04 	ldr.w	lr, [sp], #4
 8005668:	b003      	add	sp, #12
 800566a:	4770      	bx	lr
 800566c:	20000014 	.word	0x20000014

08005670 <_fwalk_reent>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4606      	mov	r6, r0
 8005676:	4688      	mov	r8, r1
 8005678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800567c:	2700      	movs	r7, #0
 800567e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005682:	f1b9 0901 	subs.w	r9, r9, #1
 8005686:	d505      	bpl.n	8005694 <_fwalk_reent+0x24>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	2c00      	cmp	r4, #0
 800568c:	d1f7      	bne.n	800567e <_fwalk_reent+0xe>
 800568e:	4638      	mov	r0, r7
 8005690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005694:	89ab      	ldrh	r3, [r5, #12]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d907      	bls.n	80056aa <_fwalk_reent+0x3a>
 800569a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569e:	3301      	adds	r3, #1
 80056a0:	d003      	beq.n	80056aa <_fwalk_reent+0x3a>
 80056a2:	4629      	mov	r1, r5
 80056a4:	4630      	mov	r0, r6
 80056a6:	47c0      	blx	r8
 80056a8:	4307      	orrs	r7, r0
 80056aa:	3568      	adds	r5, #104	; 0x68
 80056ac:	e7e9      	b.n	8005682 <_fwalk_reent+0x12>

080056ae <__retarget_lock_init_recursive>:
 80056ae:	4770      	bx	lr

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f000 b86f 	b.w	800579c <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	20000014 	.word	0x20000014

080056c4 <_free_r>:
 80056c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d044      	beq.n	8005754 <_free_r+0x90>
 80056ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ce:	9001      	str	r0, [sp, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f1a1 0404 	sub.w	r4, r1, #4
 80056d6:	bfb8      	it	lt
 80056d8:	18e4      	addlt	r4, r4, r3
 80056da:	f000 ffaf 	bl	800663c <__malloc_lock>
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <_free_r+0x94>)
 80056e0:	9801      	ldr	r0, [sp, #4]
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	b933      	cbnz	r3, 80056f4 <_free_r+0x30>
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	6014      	str	r4, [r2, #0]
 80056ea:	b003      	add	sp, #12
 80056ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056f0:	f000 bfaa 	b.w	8006648 <__malloc_unlock>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d908      	bls.n	800570a <_free_r+0x46>
 80056f8:	6825      	ldr	r5, [r4, #0]
 80056fa:	1961      	adds	r1, r4, r5
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf01      	itttt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	1949      	addeq	r1, r1, r5
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	e7ed      	b.n	80056e6 <_free_r+0x22>
 800570a:	461a      	mov	r2, r3
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b10b      	cbz	r3, 8005714 <_free_r+0x50>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d9fa      	bls.n	800570a <_free_r+0x46>
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	1855      	adds	r5, r2, r1
 8005718:	42a5      	cmp	r5, r4
 800571a:	d10b      	bne.n	8005734 <_free_r+0x70>
 800571c:	6824      	ldr	r4, [r4, #0]
 800571e:	4421      	add	r1, r4
 8005720:	1854      	adds	r4, r2, r1
 8005722:	42a3      	cmp	r3, r4
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	d1e0      	bne.n	80056ea <_free_r+0x26>
 8005728:	681c      	ldr	r4, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6053      	str	r3, [r2, #4]
 800572e:	4421      	add	r1, r4
 8005730:	6011      	str	r1, [r2, #0]
 8005732:	e7da      	b.n	80056ea <_free_r+0x26>
 8005734:	d902      	bls.n	800573c <_free_r+0x78>
 8005736:	230c      	movs	r3, #12
 8005738:	6003      	str	r3, [r0, #0]
 800573a:	e7d6      	b.n	80056ea <_free_r+0x26>
 800573c:	6825      	ldr	r5, [r4, #0]
 800573e:	1961      	adds	r1, r4, r5
 8005740:	428b      	cmp	r3, r1
 8005742:	bf04      	itt	eq
 8005744:	6819      	ldreq	r1, [r3, #0]
 8005746:	685b      	ldreq	r3, [r3, #4]
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	bf04      	itt	eq
 800574c:	1949      	addeq	r1, r1, r5
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	6054      	str	r4, [r2, #4]
 8005752:	e7ca      	b.n	80056ea <_free_r+0x26>
 8005754:	b003      	add	sp, #12
 8005756:	bd30      	pop	{r4, r5, pc}
 8005758:	20012ea4 	.word	0x20012ea4

0800575c <sbrk_aligned>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4e0e      	ldr	r6, [pc, #56]	; (8005798 <sbrk_aligned+0x3c>)
 8005760:	460c      	mov	r4, r1
 8005762:	6831      	ldr	r1, [r6, #0]
 8005764:	4605      	mov	r5, r0
 8005766:	b911      	cbnz	r1, 800576e <sbrk_aligned+0x12>
 8005768:	f000 fcd6 	bl	8006118 <_sbrk_r>
 800576c:	6030      	str	r0, [r6, #0]
 800576e:	4621      	mov	r1, r4
 8005770:	4628      	mov	r0, r5
 8005772:	f000 fcd1 	bl	8006118 <_sbrk_r>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d00a      	beq.n	8005790 <sbrk_aligned+0x34>
 800577a:	1cc4      	adds	r4, r0, #3
 800577c:	f024 0403 	bic.w	r4, r4, #3
 8005780:	42a0      	cmp	r0, r4
 8005782:	d007      	beq.n	8005794 <sbrk_aligned+0x38>
 8005784:	1a21      	subs	r1, r4, r0
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fcc6 	bl	8006118 <_sbrk_r>
 800578c:	3001      	adds	r0, #1
 800578e:	d101      	bne.n	8005794 <sbrk_aligned+0x38>
 8005790:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005794:	4620      	mov	r0, r4
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	20012ea8 	.word	0x20012ea8

0800579c <_malloc_r>:
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	1ccd      	adds	r5, r1, #3
 80057a2:	f025 0503 	bic.w	r5, r5, #3
 80057a6:	3508      	adds	r5, #8
 80057a8:	2d0c      	cmp	r5, #12
 80057aa:	bf38      	it	cc
 80057ac:	250c      	movcc	r5, #12
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	4607      	mov	r7, r0
 80057b2:	db01      	blt.n	80057b8 <_malloc_r+0x1c>
 80057b4:	42a9      	cmp	r1, r5
 80057b6:	d905      	bls.n	80057c4 <_malloc_r+0x28>
 80057b8:	230c      	movs	r3, #12
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	2600      	movs	r6, #0
 80057be:	4630      	mov	r0, r6
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	4e2e      	ldr	r6, [pc, #184]	; (8005880 <_malloc_r+0xe4>)
 80057c6:	f000 ff39 	bl	800663c <__malloc_lock>
 80057ca:	6833      	ldr	r3, [r6, #0]
 80057cc:	461c      	mov	r4, r3
 80057ce:	bb34      	cbnz	r4, 800581e <_malloc_r+0x82>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4638      	mov	r0, r7
 80057d4:	f7ff ffc2 	bl	800575c <sbrk_aligned>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	4604      	mov	r4, r0
 80057dc:	d14d      	bne.n	800587a <_malloc_r+0xde>
 80057de:	6834      	ldr	r4, [r6, #0]
 80057e0:	4626      	mov	r6, r4
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	d140      	bne.n	8005868 <_malloc_r+0xcc>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	4631      	mov	r1, r6
 80057ea:	4638      	mov	r0, r7
 80057ec:	eb04 0803 	add.w	r8, r4, r3
 80057f0:	f000 fc92 	bl	8006118 <_sbrk_r>
 80057f4:	4580      	cmp	r8, r0
 80057f6:	d13a      	bne.n	800586e <_malloc_r+0xd2>
 80057f8:	6821      	ldr	r1, [r4, #0]
 80057fa:	3503      	adds	r5, #3
 80057fc:	1a6d      	subs	r5, r5, r1
 80057fe:	f025 0503 	bic.w	r5, r5, #3
 8005802:	3508      	adds	r5, #8
 8005804:	2d0c      	cmp	r5, #12
 8005806:	bf38      	it	cc
 8005808:	250c      	movcc	r5, #12
 800580a:	4629      	mov	r1, r5
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff ffa5 	bl	800575c <sbrk_aligned>
 8005812:	3001      	adds	r0, #1
 8005814:	d02b      	beq.n	800586e <_malloc_r+0xd2>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	442b      	add	r3, r5
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	e00e      	b.n	800583c <_malloc_r+0xa0>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	1b52      	subs	r2, r2, r5
 8005822:	d41e      	bmi.n	8005862 <_malloc_r+0xc6>
 8005824:	2a0b      	cmp	r2, #11
 8005826:	d916      	bls.n	8005856 <_malloc_r+0xba>
 8005828:	1961      	adds	r1, r4, r5
 800582a:	42a3      	cmp	r3, r4
 800582c:	6025      	str	r5, [r4, #0]
 800582e:	bf18      	it	ne
 8005830:	6059      	strne	r1, [r3, #4]
 8005832:	6863      	ldr	r3, [r4, #4]
 8005834:	bf08      	it	eq
 8005836:	6031      	streq	r1, [r6, #0]
 8005838:	5162      	str	r2, [r4, r5]
 800583a:	604b      	str	r3, [r1, #4]
 800583c:	4638      	mov	r0, r7
 800583e:	f104 060b 	add.w	r6, r4, #11
 8005842:	f000 ff01 	bl	8006648 <__malloc_unlock>
 8005846:	f026 0607 	bic.w	r6, r6, #7
 800584a:	1d23      	adds	r3, r4, #4
 800584c:	1af2      	subs	r2, r6, r3
 800584e:	d0b6      	beq.n	80057be <_malloc_r+0x22>
 8005850:	1b9b      	subs	r3, r3, r6
 8005852:	50a3      	str	r3, [r4, r2]
 8005854:	e7b3      	b.n	80057be <_malloc_r+0x22>
 8005856:	6862      	ldr	r2, [r4, #4]
 8005858:	42a3      	cmp	r3, r4
 800585a:	bf0c      	ite	eq
 800585c:	6032      	streq	r2, [r6, #0]
 800585e:	605a      	strne	r2, [r3, #4]
 8005860:	e7ec      	b.n	800583c <_malloc_r+0xa0>
 8005862:	4623      	mov	r3, r4
 8005864:	6864      	ldr	r4, [r4, #4]
 8005866:	e7b2      	b.n	80057ce <_malloc_r+0x32>
 8005868:	4634      	mov	r4, r6
 800586a:	6876      	ldr	r6, [r6, #4]
 800586c:	e7b9      	b.n	80057e2 <_malloc_r+0x46>
 800586e:	230c      	movs	r3, #12
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4638      	mov	r0, r7
 8005874:	f000 fee8 	bl	8006648 <__malloc_unlock>
 8005878:	e7a1      	b.n	80057be <_malloc_r+0x22>
 800587a:	6025      	str	r5, [r4, #0]
 800587c:	e7de      	b.n	800583c <_malloc_r+0xa0>
 800587e:	bf00      	nop
 8005880:	20012ea4 	.word	0x20012ea4

08005884 <__ssputs_r>:
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	688e      	ldr	r6, [r1, #8]
 800588a:	429e      	cmp	r6, r3
 800588c:	4682      	mov	sl, r0
 800588e:	460c      	mov	r4, r1
 8005890:	4690      	mov	r8, r2
 8005892:	461f      	mov	r7, r3
 8005894:	d838      	bhi.n	8005908 <__ssputs_r+0x84>
 8005896:	898a      	ldrh	r2, [r1, #12]
 8005898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800589c:	d032      	beq.n	8005904 <__ssputs_r+0x80>
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	6909      	ldr	r1, [r1, #16]
 80058a2:	eba5 0901 	sub.w	r9, r5, r1
 80058a6:	6965      	ldr	r5, [r4, #20]
 80058a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058b0:	3301      	adds	r3, #1
 80058b2:	444b      	add	r3, r9
 80058b4:	106d      	asrs	r5, r5, #1
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf38      	it	cc
 80058ba:	461d      	movcc	r5, r3
 80058bc:	0553      	lsls	r3, r2, #21
 80058be:	d531      	bpl.n	8005924 <__ssputs_r+0xa0>
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7ff ff6b 	bl	800579c <_malloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	b950      	cbnz	r0, 80058e0 <__ssputs_r+0x5c>
 80058ca:	230c      	movs	r3, #12
 80058cc:	f8ca 3000 	str.w	r3, [sl]
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	6921      	ldr	r1, [r4, #16]
 80058e2:	464a      	mov	r2, r9
 80058e4:	f7ff fcf0 	bl	80052c8 <memcpy>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	6126      	str	r6, [r4, #16]
 80058f6:	6165      	str	r5, [r4, #20]
 80058f8:	444e      	add	r6, r9
 80058fa:	eba5 0509 	sub.w	r5, r5, r9
 80058fe:	6026      	str	r6, [r4, #0]
 8005900:	60a5      	str	r5, [r4, #8]
 8005902:	463e      	mov	r6, r7
 8005904:	42be      	cmp	r6, r7
 8005906:	d900      	bls.n	800590a <__ssputs_r+0x86>
 8005908:	463e      	mov	r6, r7
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	4632      	mov	r2, r6
 800590e:	4641      	mov	r1, r8
 8005910:	f000 fe7a 	bl	8006608 <memmove>
 8005914:	68a3      	ldr	r3, [r4, #8]
 8005916:	1b9b      	subs	r3, r3, r6
 8005918:	60a3      	str	r3, [r4, #8]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	4433      	add	r3, r6
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	2000      	movs	r0, #0
 8005922:	e7db      	b.n	80058dc <__ssputs_r+0x58>
 8005924:	462a      	mov	r2, r5
 8005926:	f000 fe95 	bl	8006654 <_realloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	2800      	cmp	r0, #0
 800592e:	d1e1      	bne.n	80058f4 <__ssputs_r+0x70>
 8005930:	6921      	ldr	r1, [r4, #16]
 8005932:	4650      	mov	r0, sl
 8005934:	f7ff fec6 	bl	80056c4 <_free_r>
 8005938:	e7c7      	b.n	80058ca <__ssputs_r+0x46>
	...

0800593c <_svfiprintf_r>:
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	4698      	mov	r8, r3
 8005942:	898b      	ldrh	r3, [r1, #12]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	b09d      	sub	sp, #116	; 0x74
 8005948:	4607      	mov	r7, r0
 800594a:	460d      	mov	r5, r1
 800594c:	4614      	mov	r4, r2
 800594e:	d50e      	bpl.n	800596e <_svfiprintf_r+0x32>
 8005950:	690b      	ldr	r3, [r1, #16]
 8005952:	b963      	cbnz	r3, 800596e <_svfiprintf_r+0x32>
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	f7ff ff21 	bl	800579c <_malloc_r>
 800595a:	6028      	str	r0, [r5, #0]
 800595c:	6128      	str	r0, [r5, #16]
 800595e:	b920      	cbnz	r0, 800596a <_svfiprintf_r+0x2e>
 8005960:	230c      	movs	r3, #12
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005968:	e0d1      	b.n	8005b0e <_svfiprintf_r+0x1d2>
 800596a:	2340      	movs	r3, #64	; 0x40
 800596c:	616b      	str	r3, [r5, #20]
 800596e:	2300      	movs	r3, #0
 8005970:	9309      	str	r3, [sp, #36]	; 0x24
 8005972:	2320      	movs	r3, #32
 8005974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005978:	f8cd 800c 	str.w	r8, [sp, #12]
 800597c:	2330      	movs	r3, #48	; 0x30
 800597e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b28 <_svfiprintf_r+0x1ec>
 8005982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005986:	f04f 0901 	mov.w	r9, #1
 800598a:	4623      	mov	r3, r4
 800598c:	469a      	mov	sl, r3
 800598e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005992:	b10a      	cbz	r2, 8005998 <_svfiprintf_r+0x5c>
 8005994:	2a25      	cmp	r2, #37	; 0x25
 8005996:	d1f9      	bne.n	800598c <_svfiprintf_r+0x50>
 8005998:	ebba 0b04 	subs.w	fp, sl, r4
 800599c:	d00b      	beq.n	80059b6 <_svfiprintf_r+0x7a>
 800599e:	465b      	mov	r3, fp
 80059a0:	4622      	mov	r2, r4
 80059a2:	4629      	mov	r1, r5
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff ff6d 	bl	8005884 <__ssputs_r>
 80059aa:	3001      	adds	r0, #1
 80059ac:	f000 80aa 	beq.w	8005b04 <_svfiprintf_r+0x1c8>
 80059b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b2:	445a      	add	r2, fp
 80059b4:	9209      	str	r2, [sp, #36]	; 0x24
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80a2 	beq.w	8005b04 <_svfiprintf_r+0x1c8>
 80059c0:	2300      	movs	r3, #0
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ca:	f10a 0a01 	add.w	sl, sl, #1
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	9307      	str	r3, [sp, #28]
 80059d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d6:	931a      	str	r3, [sp, #104]	; 0x68
 80059d8:	4654      	mov	r4, sl
 80059da:	2205      	movs	r2, #5
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4851      	ldr	r0, [pc, #324]	; (8005b28 <_svfiprintf_r+0x1ec>)
 80059e2:	f7fa fbfd 	bl	80001e0 <memchr>
 80059e6:	9a04      	ldr	r2, [sp, #16]
 80059e8:	b9d8      	cbnz	r0, 8005a22 <_svfiprintf_r+0xe6>
 80059ea:	06d0      	lsls	r0, r2, #27
 80059ec:	bf44      	itt	mi
 80059ee:	2320      	movmi	r3, #32
 80059f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f4:	0711      	lsls	r1, r2, #28
 80059f6:	bf44      	itt	mi
 80059f8:	232b      	movmi	r3, #43	; 0x2b
 80059fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005a02:	2b2a      	cmp	r3, #42	; 0x2a
 8005a04:	d015      	beq.n	8005a32 <_svfiprintf_r+0xf6>
 8005a06:	9a07      	ldr	r2, [sp, #28]
 8005a08:	4654      	mov	r4, sl
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f04f 0c0a 	mov.w	ip, #10
 8005a10:	4621      	mov	r1, r4
 8005a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a16:	3b30      	subs	r3, #48	; 0x30
 8005a18:	2b09      	cmp	r3, #9
 8005a1a:	d94e      	bls.n	8005aba <_svfiprintf_r+0x17e>
 8005a1c:	b1b0      	cbz	r0, 8005a4c <_svfiprintf_r+0x110>
 8005a1e:	9207      	str	r2, [sp, #28]
 8005a20:	e014      	b.n	8005a4c <_svfiprintf_r+0x110>
 8005a22:	eba0 0308 	sub.w	r3, r0, r8
 8005a26:	fa09 f303 	lsl.w	r3, r9, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	46a2      	mov	sl, r4
 8005a30:	e7d2      	b.n	80059d8 <_svfiprintf_r+0x9c>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	9103      	str	r1, [sp, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfbb      	ittet	lt
 8005a3e:	425b      	neglt	r3, r3
 8005a40:	f042 0202 	orrlt.w	r2, r2, #2
 8005a44:	9307      	strge	r3, [sp, #28]
 8005a46:	9307      	strlt	r3, [sp, #28]
 8005a48:	bfb8      	it	lt
 8005a4a:	9204      	strlt	r2, [sp, #16]
 8005a4c:	7823      	ldrb	r3, [r4, #0]
 8005a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a50:	d10c      	bne.n	8005a6c <_svfiprintf_r+0x130>
 8005a52:	7863      	ldrb	r3, [r4, #1]
 8005a54:	2b2a      	cmp	r3, #42	; 0x2a
 8005a56:	d135      	bne.n	8005ac4 <_svfiprintf_r+0x188>
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	1d1a      	adds	r2, r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	9203      	str	r2, [sp, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfb8      	it	lt
 8005a64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a68:	3402      	adds	r4, #2
 8005a6a:	9305      	str	r3, [sp, #20]
 8005a6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b38 <_svfiprintf_r+0x1fc>
 8005a70:	7821      	ldrb	r1, [r4, #0]
 8005a72:	2203      	movs	r2, #3
 8005a74:	4650      	mov	r0, sl
 8005a76:	f7fa fbb3 	bl	80001e0 <memchr>
 8005a7a:	b140      	cbz	r0, 8005a8e <_svfiprintf_r+0x152>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	eba0 000a 	sub.w	r0, r0, sl
 8005a82:	fa03 f000 	lsl.w	r0, r3, r0
 8005a86:	9b04      	ldr	r3, [sp, #16]
 8005a88:	4303      	orrs	r3, r0
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <_svfiprintf_r+0x1f0>)
 8005a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a98:	2206      	movs	r2, #6
 8005a9a:	f7fa fba1 	bl	80001e0 <memchr>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d038      	beq.n	8005b14 <_svfiprintf_r+0x1d8>
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <_svfiprintf_r+0x1f4>)
 8005aa4:	bb1b      	cbnz	r3, 8005aee <_svfiprintf_r+0x1b2>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	3307      	adds	r3, #7
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	3308      	adds	r3, #8
 8005ab0:	9303      	str	r3, [sp, #12]
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	4433      	add	r3, r6
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	e767      	b.n	800598a <_svfiprintf_r+0x4e>
 8005aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8005abe:	460c      	mov	r4, r1
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e7a5      	b.n	8005a10 <_svfiprintf_r+0xd4>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	3401      	adds	r4, #1
 8005ac8:	9305      	str	r3, [sp, #20]
 8005aca:	4619      	mov	r1, r3
 8005acc:	f04f 0c0a 	mov.w	ip, #10
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad6:	3a30      	subs	r2, #48	; 0x30
 8005ad8:	2a09      	cmp	r2, #9
 8005ada:	d903      	bls.n	8005ae4 <_svfiprintf_r+0x1a8>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0c5      	beq.n	8005a6c <_svfiprintf_r+0x130>
 8005ae0:	9105      	str	r1, [sp, #20]
 8005ae2:	e7c3      	b.n	8005a6c <_svfiprintf_r+0x130>
 8005ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae8:	4604      	mov	r4, r0
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7f0      	b.n	8005ad0 <_svfiprintf_r+0x194>
 8005aee:	ab03      	add	r3, sp, #12
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	462a      	mov	r2, r5
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <_svfiprintf_r+0x1f8>)
 8005af6:	a904      	add	r1, sp, #16
 8005af8:	4638      	mov	r0, r7
 8005afa:	f3af 8000 	nop.w
 8005afe:	1c42      	adds	r2, r0, #1
 8005b00:	4606      	mov	r6, r0
 8005b02:	d1d6      	bne.n	8005ab2 <_svfiprintf_r+0x176>
 8005b04:	89ab      	ldrh	r3, [r5, #12]
 8005b06:	065b      	lsls	r3, r3, #25
 8005b08:	f53f af2c 	bmi.w	8005964 <_svfiprintf_r+0x28>
 8005b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b0e:	b01d      	add	sp, #116	; 0x74
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	ab03      	add	r3, sp, #12
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <_svfiprintf_r+0x1f8>)
 8005b1c:	a904      	add	r1, sp, #16
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f000 f9d4 	bl	8005ecc <_printf_i>
 8005b24:	e7eb      	b.n	8005afe <_svfiprintf_r+0x1c2>
 8005b26:	bf00      	nop
 8005b28:	08007274 	.word	0x08007274
 8005b2c:	0800727e 	.word	0x0800727e
 8005b30:	00000000 	.word	0x00000000
 8005b34:	08005885 	.word	0x08005885
 8005b38:	0800727a 	.word	0x0800727a

08005b3c <__sfputc_r>:
 8005b3c:	6893      	ldr	r3, [r2, #8]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	b410      	push	{r4}
 8005b44:	6093      	str	r3, [r2, #8]
 8005b46:	da08      	bge.n	8005b5a <__sfputc_r+0x1e>
 8005b48:	6994      	ldr	r4, [r2, #24]
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	db01      	blt.n	8005b52 <__sfputc_r+0x16>
 8005b4e:	290a      	cmp	r1, #10
 8005b50:	d103      	bne.n	8005b5a <__sfputc_r+0x1e>
 8005b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b56:	f000 bb33 	b.w	80061c0 <__swbuf_r>
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	1c58      	adds	r0, r3, #1
 8005b5e:	6010      	str	r0, [r2, #0]
 8005b60:	7019      	strb	r1, [r3, #0]
 8005b62:	4608      	mov	r0, r1
 8005b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <__sfputs_r>:
 8005b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	460f      	mov	r7, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	18d5      	adds	r5, r2, r3
 8005b74:	42ac      	cmp	r4, r5
 8005b76:	d101      	bne.n	8005b7c <__sfputs_r+0x12>
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e007      	b.n	8005b8c <__sfputs_r+0x22>
 8005b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b80:	463a      	mov	r2, r7
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7ff ffda 	bl	8005b3c <__sfputc_r>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d1f3      	bne.n	8005b74 <__sfputs_r+0xa>
 8005b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b90 <_vfiprintf_r>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	460d      	mov	r5, r1
 8005b96:	b09d      	sub	sp, #116	; 0x74
 8005b98:	4614      	mov	r4, r2
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	b118      	cbz	r0, 8005ba8 <_vfiprintf_r+0x18>
 8005ba0:	6983      	ldr	r3, [r0, #24]
 8005ba2:	b90b      	cbnz	r3, 8005ba8 <_vfiprintf_r+0x18>
 8005ba4:	f7ff fcd4 	bl	8005550 <__sinit>
 8005ba8:	4b89      	ldr	r3, [pc, #548]	; (8005dd0 <_vfiprintf_r+0x240>)
 8005baa:	429d      	cmp	r5, r3
 8005bac:	d11b      	bne.n	8005be6 <_vfiprintf_r+0x56>
 8005bae:	6875      	ldr	r5, [r6, #4]
 8005bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	d405      	bmi.n	8005bc2 <_vfiprintf_r+0x32>
 8005bb6:	89ab      	ldrh	r3, [r5, #12]
 8005bb8:	059a      	lsls	r2, r3, #22
 8005bba:	d402      	bmi.n	8005bc2 <_vfiprintf_r+0x32>
 8005bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bbe:	f7ff fd77 	bl	80056b0 <__retarget_lock_acquire_recursive>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	071b      	lsls	r3, r3, #28
 8005bc6:	d501      	bpl.n	8005bcc <_vfiprintf_r+0x3c>
 8005bc8:	692b      	ldr	r3, [r5, #16]
 8005bca:	b9eb      	cbnz	r3, 8005c08 <_vfiprintf_r+0x78>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f000 fb5a 	bl	8006288 <__swsetup_r>
 8005bd4:	b1c0      	cbz	r0, 8005c08 <_vfiprintf_r+0x78>
 8005bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd8:	07dc      	lsls	r4, r3, #31
 8005bda:	d50e      	bpl.n	8005bfa <_vfiprintf_r+0x6a>
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005be0:	b01d      	add	sp, #116	; 0x74
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	4b7b      	ldr	r3, [pc, #492]	; (8005dd4 <_vfiprintf_r+0x244>)
 8005be8:	429d      	cmp	r5, r3
 8005bea:	d101      	bne.n	8005bf0 <_vfiprintf_r+0x60>
 8005bec:	68b5      	ldr	r5, [r6, #8]
 8005bee:	e7df      	b.n	8005bb0 <_vfiprintf_r+0x20>
 8005bf0:	4b79      	ldr	r3, [pc, #484]	; (8005dd8 <_vfiprintf_r+0x248>)
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	bf08      	it	eq
 8005bf6:	68f5      	ldreq	r5, [r6, #12]
 8005bf8:	e7da      	b.n	8005bb0 <_vfiprintf_r+0x20>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	0598      	lsls	r0, r3, #22
 8005bfe:	d4ed      	bmi.n	8005bdc <_vfiprintf_r+0x4c>
 8005c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c02:	f7ff fd56 	bl	80056b2 <__retarget_lock_release_recursive>
 8005c06:	e7e9      	b.n	8005bdc <_vfiprintf_r+0x4c>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c16:	2330      	movs	r3, #48	; 0x30
 8005c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ddc <_vfiprintf_r+0x24c>
 8005c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c20:	f04f 0901 	mov.w	r9, #1
 8005c24:	4623      	mov	r3, r4
 8005c26:	469a      	mov	sl, r3
 8005c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2c:	b10a      	cbz	r2, 8005c32 <_vfiprintf_r+0xa2>
 8005c2e:	2a25      	cmp	r2, #37	; 0x25
 8005c30:	d1f9      	bne.n	8005c26 <_vfiprintf_r+0x96>
 8005c32:	ebba 0b04 	subs.w	fp, sl, r4
 8005c36:	d00b      	beq.n	8005c50 <_vfiprintf_r+0xc0>
 8005c38:	465b      	mov	r3, fp
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff ff93 	bl	8005b6a <__sfputs_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	f000 80aa 	beq.w	8005d9e <_vfiprintf_r+0x20e>
 8005c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4c:	445a      	add	r2, fp
 8005c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c50:	f89a 3000 	ldrb.w	r3, [sl]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80a2 	beq.w	8005d9e <_vfiprintf_r+0x20e>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c64:	f10a 0a01 	add.w	sl, sl, #1
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c70:	931a      	str	r3, [sp, #104]	; 0x68
 8005c72:	4654      	mov	r4, sl
 8005c74:	2205      	movs	r2, #5
 8005c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7a:	4858      	ldr	r0, [pc, #352]	; (8005ddc <_vfiprintf_r+0x24c>)
 8005c7c:	f7fa fab0 	bl	80001e0 <memchr>
 8005c80:	9a04      	ldr	r2, [sp, #16]
 8005c82:	b9d8      	cbnz	r0, 8005cbc <_vfiprintf_r+0x12c>
 8005c84:	06d1      	lsls	r1, r2, #27
 8005c86:	bf44      	itt	mi
 8005c88:	2320      	movmi	r3, #32
 8005c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8e:	0713      	lsls	r3, r2, #28
 8005c90:	bf44      	itt	mi
 8005c92:	232b      	movmi	r3, #43	; 0x2b
 8005c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c98:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9e:	d015      	beq.n	8005ccc <_vfiprintf_r+0x13c>
 8005ca0:	9a07      	ldr	r2, [sp, #28]
 8005ca2:	4654      	mov	r4, sl
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f04f 0c0a 	mov.w	ip, #10
 8005caa:	4621      	mov	r1, r4
 8005cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb0:	3b30      	subs	r3, #48	; 0x30
 8005cb2:	2b09      	cmp	r3, #9
 8005cb4:	d94e      	bls.n	8005d54 <_vfiprintf_r+0x1c4>
 8005cb6:	b1b0      	cbz	r0, 8005ce6 <_vfiprintf_r+0x156>
 8005cb8:	9207      	str	r2, [sp, #28]
 8005cba:	e014      	b.n	8005ce6 <_vfiprintf_r+0x156>
 8005cbc:	eba0 0308 	sub.w	r3, r0, r8
 8005cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	46a2      	mov	sl, r4
 8005cca:	e7d2      	b.n	8005c72 <_vfiprintf_r+0xe2>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	1d19      	adds	r1, r3, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	9103      	str	r1, [sp, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bfbb      	ittet	lt
 8005cd8:	425b      	neglt	r3, r3
 8005cda:	f042 0202 	orrlt.w	r2, r2, #2
 8005cde:	9307      	strge	r3, [sp, #28]
 8005ce0:	9307      	strlt	r3, [sp, #28]
 8005ce2:	bfb8      	it	lt
 8005ce4:	9204      	strlt	r2, [sp, #16]
 8005ce6:	7823      	ldrb	r3, [r4, #0]
 8005ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cea:	d10c      	bne.n	8005d06 <_vfiprintf_r+0x176>
 8005cec:	7863      	ldrb	r3, [r4, #1]
 8005cee:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf0:	d135      	bne.n	8005d5e <_vfiprintf_r+0x1ce>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	9203      	str	r2, [sp, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d02:	3402      	adds	r4, #2
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005dec <_vfiprintf_r+0x25c>
 8005d0a:	7821      	ldrb	r1, [r4, #0]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	4650      	mov	r0, sl
 8005d10:	f7fa fa66 	bl	80001e0 <memchr>
 8005d14:	b140      	cbz	r0, 8005d28 <_vfiprintf_r+0x198>
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	eba0 000a 	sub.w	r0, r0, sl
 8005d1c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	4303      	orrs	r3, r0
 8005d24:	3401      	adds	r4, #1
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2c:	482c      	ldr	r0, [pc, #176]	; (8005de0 <_vfiprintf_r+0x250>)
 8005d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d32:	2206      	movs	r2, #6
 8005d34:	f7fa fa54 	bl	80001e0 <memchr>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d03f      	beq.n	8005dbc <_vfiprintf_r+0x22c>
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <_vfiprintf_r+0x254>)
 8005d3e:	bb1b      	cbnz	r3, 8005d88 <_vfiprintf_r+0x1f8>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	3307      	adds	r3, #7
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	3308      	adds	r3, #8
 8005d4a:	9303      	str	r3, [sp, #12]
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	443b      	add	r3, r7
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	e767      	b.n	8005c24 <_vfiprintf_r+0x94>
 8005d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d58:	460c      	mov	r4, r1
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e7a5      	b.n	8005caa <_vfiprintf_r+0x11a>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	3401      	adds	r4, #1
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f04f 0c0a 	mov.w	ip, #10
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d70:	3a30      	subs	r2, #48	; 0x30
 8005d72:	2a09      	cmp	r2, #9
 8005d74:	d903      	bls.n	8005d7e <_vfiprintf_r+0x1ee>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0c5      	beq.n	8005d06 <_vfiprintf_r+0x176>
 8005d7a:	9105      	str	r1, [sp, #20]
 8005d7c:	e7c3      	b.n	8005d06 <_vfiprintf_r+0x176>
 8005d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d82:	4604      	mov	r4, r0
 8005d84:	2301      	movs	r3, #1
 8005d86:	e7f0      	b.n	8005d6a <_vfiprintf_r+0x1da>
 8005d88:	ab03      	add	r3, sp, #12
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <_vfiprintf_r+0x258>)
 8005d90:	a904      	add	r1, sp, #16
 8005d92:	4630      	mov	r0, r6
 8005d94:	f3af 8000 	nop.w
 8005d98:	4607      	mov	r7, r0
 8005d9a:	1c78      	adds	r0, r7, #1
 8005d9c:	d1d6      	bne.n	8005d4c <_vfiprintf_r+0x1bc>
 8005d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da0:	07d9      	lsls	r1, r3, #31
 8005da2:	d405      	bmi.n	8005db0 <_vfiprintf_r+0x220>
 8005da4:	89ab      	ldrh	r3, [r5, #12]
 8005da6:	059a      	lsls	r2, r3, #22
 8005da8:	d402      	bmi.n	8005db0 <_vfiprintf_r+0x220>
 8005daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dac:	f7ff fc81 	bl	80056b2 <__retarget_lock_release_recursive>
 8005db0:	89ab      	ldrh	r3, [r5, #12]
 8005db2:	065b      	lsls	r3, r3, #25
 8005db4:	f53f af12 	bmi.w	8005bdc <_vfiprintf_r+0x4c>
 8005db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dba:	e711      	b.n	8005be0 <_vfiprintf_r+0x50>
 8005dbc:	ab03      	add	r3, sp, #12
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <_vfiprintf_r+0x258>)
 8005dc4:	a904      	add	r1, sp, #16
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 f880 	bl	8005ecc <_printf_i>
 8005dcc:	e7e4      	b.n	8005d98 <_vfiprintf_r+0x208>
 8005dce:	bf00      	nop
 8005dd0:	08007234 	.word	0x08007234
 8005dd4:	08007254 	.word	0x08007254
 8005dd8:	08007214 	.word	0x08007214
 8005ddc:	08007274 	.word	0x08007274
 8005de0:	0800727e 	.word	0x0800727e
 8005de4:	00000000 	.word	0x00000000
 8005de8:	08005b6b 	.word	0x08005b6b
 8005dec:	0800727a 	.word	0x0800727a

08005df0 <_printf_common>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	4616      	mov	r6, r2
 8005df6:	4699      	mov	r9, r3
 8005df8:	688a      	ldr	r2, [r1, #8]
 8005dfa:	690b      	ldr	r3, [r1, #16]
 8005dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bfb8      	it	lt
 8005e04:	4613      	movlt	r3, r2
 8005e06:	6033      	str	r3, [r6, #0]
 8005e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b10a      	cbz	r2, 8005e16 <_printf_common+0x26>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	0699      	lsls	r1, r3, #26
 8005e1a:	bf42      	ittt	mi
 8005e1c:	6833      	ldrmi	r3, [r6, #0]
 8005e1e:	3302      	addmi	r3, #2
 8005e20:	6033      	strmi	r3, [r6, #0]
 8005e22:	6825      	ldr	r5, [r4, #0]
 8005e24:	f015 0506 	ands.w	r5, r5, #6
 8005e28:	d106      	bne.n	8005e38 <_printf_common+0x48>
 8005e2a:	f104 0a19 	add.w	sl, r4, #25
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	6832      	ldr	r2, [r6, #0]
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dc26      	bgt.n	8005e86 <_printf_common+0x96>
 8005e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e3c:	1e13      	subs	r3, r2, #0
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	bf18      	it	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	0692      	lsls	r2, r2, #26
 8005e46:	d42b      	bmi.n	8005ea0 <_printf_common+0xb0>
 8005e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	3001      	adds	r0, #1
 8005e54:	d01e      	beq.n	8005e94 <_printf_common+0xa4>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	68e5      	ldr	r5, [r4, #12]
 8005e5a:	6832      	ldr	r2, [r6, #0]
 8005e5c:	f003 0306 	and.w	r3, r3, #6
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	bf08      	it	eq
 8005e64:	1aad      	subeq	r5, r5, r2
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	bf0c      	ite	eq
 8005e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e70:	2500      	movne	r5, #0
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bfc4      	itt	gt
 8005e76:	1a9b      	subgt	r3, r3, r2
 8005e78:	18ed      	addgt	r5, r5, r3
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	341a      	adds	r4, #26
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	d11a      	bne.n	8005eb8 <_printf_common+0xc8>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e008      	b.n	8005e98 <_printf_common+0xa8>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4652      	mov	r2, sl
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	47c0      	blx	r8
 8005e90:	3001      	adds	r0, #1
 8005e92:	d103      	bne.n	8005e9c <_printf_common+0xac>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e7c6      	b.n	8005e2e <_printf_common+0x3e>
 8005ea0:	18e1      	adds	r1, r4, r3
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	2030      	movs	r0, #48	; 0x30
 8005ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eaa:	4422      	add	r2, r4
 8005eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	e7c7      	b.n	8005e48 <_printf_common+0x58>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4622      	mov	r2, r4
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0e6      	beq.n	8005e94 <_printf_common+0xa4>
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7d9      	b.n	8005e7e <_printf_common+0x8e>
	...

08005ecc <_printf_i>:
 8005ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	7e0f      	ldrb	r7, [r1, #24]
 8005ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ed4:	2f78      	cmp	r7, #120	; 0x78
 8005ed6:	4691      	mov	r9, r2
 8005ed8:	4680      	mov	r8, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	469a      	mov	sl, r3
 8005ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ee2:	d807      	bhi.n	8005ef4 <_printf_i+0x28>
 8005ee4:	2f62      	cmp	r7, #98	; 0x62
 8005ee6:	d80a      	bhi.n	8005efe <_printf_i+0x32>
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	f000 80d8 	beq.w	800609e <_printf_i+0x1d2>
 8005eee:	2f58      	cmp	r7, #88	; 0x58
 8005ef0:	f000 80a3 	beq.w	800603a <_printf_i+0x16e>
 8005ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005efc:	e03a      	b.n	8005f74 <_printf_i+0xa8>
 8005efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f02:	2b15      	cmp	r3, #21
 8005f04:	d8f6      	bhi.n	8005ef4 <_printf_i+0x28>
 8005f06:	a101      	add	r1, pc, #4	; (adr r1, 8005f0c <_printf_i+0x40>)
 8005f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005ef5 	.word	0x08005ef5
 8005f18:	08005ef5 	.word	0x08005ef5
 8005f1c:	08005ef5 	.word	0x08005ef5
 8005f20:	08005ef5 	.word	0x08005ef5
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005ef5 	.word	0x08005ef5
 8005f2c:	08005ef5 	.word	0x08005ef5
 8005f30:	08005ef5 	.word	0x08005ef5
 8005f34:	08005ef5 	.word	0x08005ef5
 8005f38:	08006085 	.word	0x08006085
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08006067 	.word	0x08006067
 8005f44:	08005ef5 	.word	0x08005ef5
 8005f48:	08005ef5 	.word	0x08005ef5
 8005f4c:	080060a7 	.word	0x080060a7
 8005f50:	08005ef5 	.word	0x08005ef5
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005ef5 	.word	0x08005ef5
 8005f5c:	08005ef5 	.word	0x08005ef5
 8005f60:	0800606f 	.word	0x0800606f
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	602a      	str	r2, [r5, #0]
 8005f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0a3      	b.n	80060c0 <_printf_i+0x1f4>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	6829      	ldr	r1, [r5, #0]
 8005f7c:	0606      	lsls	r6, r0, #24
 8005f7e:	f101 0304 	add.w	r3, r1, #4
 8005f82:	d50a      	bpl.n	8005f9a <_printf_i+0xce>
 8005f84:	680e      	ldr	r6, [r1, #0]
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	da03      	bge.n	8005f94 <_printf_i+0xc8>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	4276      	negs	r6, r6
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	485e      	ldr	r0, [pc, #376]	; (8006110 <_printf_i+0x244>)
 8005f96:	230a      	movs	r3, #10
 8005f98:	e019      	b.n	8005fce <_printf_i+0x102>
 8005f9a:	680e      	ldr	r6, [r1, #0]
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fa2:	bf18      	it	ne
 8005fa4:	b236      	sxthne	r6, r6
 8005fa6:	e7ef      	b.n	8005f88 <_printf_i+0xbc>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	6029      	str	r1, [r5, #0]
 8005fb0:	0601      	lsls	r1, r0, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xec>
 8005fb4:	681e      	ldr	r6, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0xf2>
 8005fb8:	0646      	lsls	r6, r0, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xe8>
 8005fbc:	881e      	ldrh	r6, [r3, #0]
 8005fbe:	4854      	ldr	r0, [pc, #336]	; (8006110 <_printf_i+0x244>)
 8005fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2308      	moveq	r3, #8
 8005fc6:	230a      	movne	r3, #10
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fce:	6865      	ldr	r5, [r4, #4]
 8005fd0:	60a5      	str	r5, [r4, #8]
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	bfa2      	ittt	ge
 8005fd6:	6821      	ldrge	r1, [r4, #0]
 8005fd8:	f021 0104 	bicge.w	r1, r1, #4
 8005fdc:	6021      	strge	r1, [r4, #0]
 8005fde:	b90e      	cbnz	r6, 8005fe4 <_printf_i+0x118>
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	d04d      	beq.n	8006080 <_printf_i+0x1b4>
 8005fe4:	4615      	mov	r5, r2
 8005fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fea:	fb03 6711 	mls	r7, r3, r1, r6
 8005fee:	5dc7      	ldrb	r7, [r0, r7]
 8005ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ff4:	4637      	mov	r7, r6
 8005ff6:	42bb      	cmp	r3, r7
 8005ff8:	460e      	mov	r6, r1
 8005ffa:	d9f4      	bls.n	8005fe6 <_printf_i+0x11a>
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d10b      	bne.n	8006018 <_printf_i+0x14c>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	07de      	lsls	r6, r3, #31
 8006004:	d508      	bpl.n	8006018 <_printf_i+0x14c>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	6861      	ldr	r1, [r4, #4]
 800600a:	4299      	cmp	r1, r3
 800600c:	bfde      	ittt	le
 800600e:	2330      	movle	r3, #48	; 0x30
 8006010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006014:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006018:	1b52      	subs	r2, r2, r5
 800601a:	6122      	str	r2, [r4, #16]
 800601c:	f8cd a000 	str.w	sl, [sp]
 8006020:	464b      	mov	r3, r9
 8006022:	aa03      	add	r2, sp, #12
 8006024:	4621      	mov	r1, r4
 8006026:	4640      	mov	r0, r8
 8006028:	f7ff fee2 	bl	8005df0 <_printf_common>
 800602c:	3001      	adds	r0, #1
 800602e:	d14c      	bne.n	80060ca <_printf_i+0x1fe>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006034:	b004      	add	sp, #16
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603a:	4835      	ldr	r0, [pc, #212]	; (8006110 <_printf_i+0x244>)
 800603c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006040:	6829      	ldr	r1, [r5, #0]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	f851 6b04 	ldr.w	r6, [r1], #4
 8006048:	6029      	str	r1, [r5, #0]
 800604a:	061d      	lsls	r5, r3, #24
 800604c:	d514      	bpl.n	8006078 <_printf_i+0x1ac>
 800604e:	07df      	lsls	r7, r3, #31
 8006050:	bf44      	itt	mi
 8006052:	f043 0320 	orrmi.w	r3, r3, #32
 8006056:	6023      	strmi	r3, [r4, #0]
 8006058:	b91e      	cbnz	r6, 8006062 <_printf_i+0x196>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f023 0320 	bic.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2310      	movs	r3, #16
 8006064:	e7b0      	b.n	8005fc8 <_printf_i+0xfc>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f043 0320 	orr.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	2378      	movs	r3, #120	; 0x78
 8006070:	4828      	ldr	r0, [pc, #160]	; (8006114 <_printf_i+0x248>)
 8006072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006076:	e7e3      	b.n	8006040 <_printf_i+0x174>
 8006078:	0659      	lsls	r1, r3, #25
 800607a:	bf48      	it	mi
 800607c:	b2b6      	uxthmi	r6, r6
 800607e:	e7e6      	b.n	800604e <_printf_i+0x182>
 8006080:	4615      	mov	r5, r2
 8006082:	e7bb      	b.n	8005ffc <_printf_i+0x130>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	6826      	ldr	r6, [r4, #0]
 8006088:	6961      	ldr	r1, [r4, #20]
 800608a:	1d18      	adds	r0, r3, #4
 800608c:	6028      	str	r0, [r5, #0]
 800608e:	0635      	lsls	r5, r6, #24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	d501      	bpl.n	8006098 <_printf_i+0x1cc>
 8006094:	6019      	str	r1, [r3, #0]
 8006096:	e002      	b.n	800609e <_printf_i+0x1d2>
 8006098:	0670      	lsls	r0, r6, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0x1c8>
 800609c:	8019      	strh	r1, [r3, #0]
 800609e:	2300      	movs	r3, #0
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	4615      	mov	r5, r2
 80060a4:	e7ba      	b.n	800601c <_printf_i+0x150>
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	602a      	str	r2, [r5, #0]
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	2100      	movs	r1, #0
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7fa f894 	bl	80001e0 <memchr>
 80060b8:	b108      	cbz	r0, 80060be <_printf_i+0x1f2>
 80060ba:	1b40      	subs	r0, r0, r5
 80060bc:	6060      	str	r0, [r4, #4]
 80060be:	6863      	ldr	r3, [r4, #4]
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	2300      	movs	r3, #0
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c8:	e7a8      	b.n	800601c <_printf_i+0x150>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	462a      	mov	r2, r5
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	47d0      	blx	sl
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0ab      	beq.n	8006030 <_printf_i+0x164>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	d413      	bmi.n	8006106 <_printf_i+0x23a>
 80060de:	68e0      	ldr	r0, [r4, #12]
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	4298      	cmp	r0, r3
 80060e4:	bfb8      	it	lt
 80060e6:	4618      	movlt	r0, r3
 80060e8:	e7a4      	b.n	8006034 <_printf_i+0x168>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4632      	mov	r2, r6
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d09b      	beq.n	8006030 <_printf_i+0x164>
 80060f8:	3501      	adds	r5, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	9903      	ldr	r1, [sp, #12]
 80060fe:	1a5b      	subs	r3, r3, r1
 8006100:	42ab      	cmp	r3, r5
 8006102:	dcf2      	bgt.n	80060ea <_printf_i+0x21e>
 8006104:	e7eb      	b.n	80060de <_printf_i+0x212>
 8006106:	2500      	movs	r5, #0
 8006108:	f104 0619 	add.w	r6, r4, #25
 800610c:	e7f5      	b.n	80060fa <_printf_i+0x22e>
 800610e:	bf00      	nop
 8006110:	08007285 	.word	0x08007285
 8006114:	08007296 	.word	0x08007296

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d06      	ldr	r5, [pc, #24]	; (8006134 <_sbrk_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fa fb88 	bl	8000838 <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20012eac 	.word	0x20012eac

08006138 <__sread>:
 8006138:	b510      	push	{r4, lr}
 800613a:	460c      	mov	r4, r1
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	f000 fab8 	bl	80066b4 <_read_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	bfab      	itete	ge
 8006148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800614a:	89a3      	ldrhlt	r3, [r4, #12]
 800614c:	181b      	addge	r3, r3, r0
 800614e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006152:	bfac      	ite	ge
 8006154:	6563      	strge	r3, [r4, #84]	; 0x54
 8006156:	81a3      	strhlt	r3, [r4, #12]
 8006158:	bd10      	pop	{r4, pc}

0800615a <__swrite>:
 800615a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	461f      	mov	r7, r3
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	05db      	lsls	r3, r3, #23
 8006164:	4605      	mov	r5, r0
 8006166:	460c      	mov	r4, r1
 8006168:	4616      	mov	r6, r2
 800616a:	d505      	bpl.n	8006178 <__swrite+0x1e>
 800616c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006170:	2302      	movs	r3, #2
 8006172:	2200      	movs	r2, #0
 8006174:	f000 f9d0 	bl	8006518 <_lseek_r>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	4628      	mov	r0, r5
 800618a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	f000 b869 	b.w	8006264 <_write_r>

08006192 <__sseek>:
 8006192:	b510      	push	{r4, lr}
 8006194:	460c      	mov	r4, r1
 8006196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619a:	f000 f9bd 	bl	8006518 <_lseek_r>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	bf15      	itete	ne
 80061a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ae:	81a3      	strheq	r3, [r4, #12]
 80061b0:	bf18      	it	ne
 80061b2:	81a3      	strhne	r3, [r4, #12]
 80061b4:	bd10      	pop	{r4, pc}

080061b6 <__sclose>:
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	f000 b8db 	b.w	8006374 <_close_r>
	...

080061c0 <__swbuf_r>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	460e      	mov	r6, r1
 80061c4:	4614      	mov	r4, r2
 80061c6:	4605      	mov	r5, r0
 80061c8:	b118      	cbz	r0, 80061d2 <__swbuf_r+0x12>
 80061ca:	6983      	ldr	r3, [r0, #24]
 80061cc:	b90b      	cbnz	r3, 80061d2 <__swbuf_r+0x12>
 80061ce:	f7ff f9bf 	bl	8005550 <__sinit>
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <__swbuf_r+0x98>)
 80061d4:	429c      	cmp	r4, r3
 80061d6:	d12b      	bne.n	8006230 <__swbuf_r+0x70>
 80061d8:	686c      	ldr	r4, [r5, #4]
 80061da:	69a3      	ldr	r3, [r4, #24]
 80061dc:	60a3      	str	r3, [r4, #8]
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	071a      	lsls	r2, r3, #28
 80061e2:	d52f      	bpl.n	8006244 <__swbuf_r+0x84>
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	b36b      	cbz	r3, 8006244 <__swbuf_r+0x84>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	1ac0      	subs	r0, r0, r3
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	b2f6      	uxtb	r6, r6
 80061f2:	4283      	cmp	r3, r0
 80061f4:	4637      	mov	r7, r6
 80061f6:	dc04      	bgt.n	8006202 <__swbuf_r+0x42>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 f950 	bl	80064a0 <_fflush_r>
 8006200:	bb30      	cbnz	r0, 8006250 <__swbuf_r+0x90>
 8006202:	68a3      	ldr	r3, [r4, #8]
 8006204:	3b01      	subs	r3, #1
 8006206:	60a3      	str	r3, [r4, #8]
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	6022      	str	r2, [r4, #0]
 800620e:	701e      	strb	r6, [r3, #0]
 8006210:	6963      	ldr	r3, [r4, #20]
 8006212:	3001      	adds	r0, #1
 8006214:	4283      	cmp	r3, r0
 8006216:	d004      	beq.n	8006222 <__swbuf_r+0x62>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	07db      	lsls	r3, r3, #31
 800621c:	d506      	bpl.n	800622c <__swbuf_r+0x6c>
 800621e:	2e0a      	cmp	r6, #10
 8006220:	d104      	bne.n	800622c <__swbuf_r+0x6c>
 8006222:	4621      	mov	r1, r4
 8006224:	4628      	mov	r0, r5
 8006226:	f000 f93b 	bl	80064a0 <_fflush_r>
 800622a:	b988      	cbnz	r0, 8006250 <__swbuf_r+0x90>
 800622c:	4638      	mov	r0, r7
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <__swbuf_r+0x9c>)
 8006232:	429c      	cmp	r4, r3
 8006234:	d101      	bne.n	800623a <__swbuf_r+0x7a>
 8006236:	68ac      	ldr	r4, [r5, #8]
 8006238:	e7cf      	b.n	80061da <__swbuf_r+0x1a>
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <__swbuf_r+0xa0>)
 800623c:	429c      	cmp	r4, r3
 800623e:	bf08      	it	eq
 8006240:	68ec      	ldreq	r4, [r5, #12]
 8006242:	e7ca      	b.n	80061da <__swbuf_r+0x1a>
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f81e 	bl	8006288 <__swsetup_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	d0cb      	beq.n	80061e8 <__swbuf_r+0x28>
 8006250:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006254:	e7ea      	b.n	800622c <__swbuf_r+0x6c>
 8006256:	bf00      	nop
 8006258:	08007234 	.word	0x08007234
 800625c:	08007254 	.word	0x08007254
 8006260:	08007214 	.word	0x08007214

08006264 <_write_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4d07      	ldr	r5, [pc, #28]	; (8006284 <_write_r+0x20>)
 8006268:	4604      	mov	r4, r0
 800626a:	4608      	mov	r0, r1
 800626c:	4611      	mov	r1, r2
 800626e:	2200      	movs	r2, #0
 8006270:	602a      	str	r2, [r5, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	f000 fb45 	bl	8006902 <_write>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_write_r+0x1e>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_write_r+0x1e>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	20012eac 	.word	0x20012eac

08006288 <__swsetup_r>:
 8006288:	4b32      	ldr	r3, [pc, #200]	; (8006354 <__swsetup_r+0xcc>)
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	4606      	mov	r6, r0
 8006290:	460c      	mov	r4, r1
 8006292:	b125      	cbz	r5, 800629e <__swsetup_r+0x16>
 8006294:	69ab      	ldr	r3, [r5, #24]
 8006296:	b913      	cbnz	r3, 800629e <__swsetup_r+0x16>
 8006298:	4628      	mov	r0, r5
 800629a:	f7ff f959 	bl	8005550 <__sinit>
 800629e:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <__swsetup_r+0xd0>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d10f      	bne.n	80062c4 <__swsetup_r+0x3c>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ac:	0719      	lsls	r1, r3, #28
 80062ae:	d42c      	bmi.n	800630a <__swsetup_r+0x82>
 80062b0:	06dd      	lsls	r5, r3, #27
 80062b2:	d411      	bmi.n	80062d8 <__swsetup_r+0x50>
 80062b4:	2309      	movs	r3, #9
 80062b6:	6033      	str	r3, [r6, #0]
 80062b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062c2:	e03e      	b.n	8006342 <__swsetup_r+0xba>
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <__swsetup_r+0xd4>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d101      	bne.n	80062ce <__swsetup_r+0x46>
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	e7eb      	b.n	80062a6 <__swsetup_r+0x1e>
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <__swsetup_r+0xd8>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	bf08      	it	eq
 80062d4:	68ec      	ldreq	r4, [r5, #12]
 80062d6:	e7e6      	b.n	80062a6 <__swsetup_r+0x1e>
 80062d8:	0758      	lsls	r0, r3, #29
 80062da:	d512      	bpl.n	8006302 <__swsetup_r+0x7a>
 80062dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062de:	b141      	cbz	r1, 80062f2 <__swsetup_r+0x6a>
 80062e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d002      	beq.n	80062ee <__swsetup_r+0x66>
 80062e8:	4630      	mov	r0, r6
 80062ea:	f7ff f9eb 	bl	80056c4 <_free_r>
 80062ee:	2300      	movs	r3, #0
 80062f0:	6363      	str	r3, [r4, #52]	; 0x34
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	2300      	movs	r3, #0
 80062fc:	6063      	str	r3, [r4, #4]
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f043 0308 	orr.w	r3, r3, #8
 8006308:	81a3      	strh	r3, [r4, #12]
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	b94b      	cbnz	r3, 8006322 <__swsetup_r+0x9a>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	d003      	beq.n	8006322 <__swsetup_r+0x9a>
 800631a:	4621      	mov	r1, r4
 800631c:	4630      	mov	r0, r6
 800631e:	f000 f933 	bl	8006588 <__smakebuf_r>
 8006322:	89a0      	ldrh	r0, [r4, #12]
 8006324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006328:	f010 0301 	ands.w	r3, r0, #1
 800632c:	d00a      	beq.n	8006344 <__swsetup_r+0xbc>
 800632e:	2300      	movs	r3, #0
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	6963      	ldr	r3, [r4, #20]
 8006334:	425b      	negs	r3, r3
 8006336:	61a3      	str	r3, [r4, #24]
 8006338:	6923      	ldr	r3, [r4, #16]
 800633a:	b943      	cbnz	r3, 800634e <__swsetup_r+0xc6>
 800633c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006340:	d1ba      	bne.n	80062b8 <__swsetup_r+0x30>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	0781      	lsls	r1, r0, #30
 8006346:	bf58      	it	pl
 8006348:	6963      	ldrpl	r3, [r4, #20]
 800634a:	60a3      	str	r3, [r4, #8]
 800634c:	e7f4      	b.n	8006338 <__swsetup_r+0xb0>
 800634e:	2000      	movs	r0, #0
 8006350:	e7f7      	b.n	8006342 <__swsetup_r+0xba>
 8006352:	bf00      	nop
 8006354:	20000014 	.word	0x20000014
 8006358:	08007234 	.word	0x08007234
 800635c:	08007254 	.word	0x08007254
 8006360:	08007214 	.word	0x08007214

08006364 <abort>:
 8006364:	b508      	push	{r3, lr}
 8006366:	2006      	movs	r0, #6
 8006368:	f000 f9de 	bl	8006728 <raise>
 800636c:	2001      	movs	r0, #1
 800636e:	f000 fcd1 	bl	8006d14 <_exit>
	...

08006374 <_close_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	; (8006390 <_close_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f000 faf0 	bl	8006964 <_close>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_close_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_close_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20012eac 	.word	0x20012eac

08006394 <__sflush_r>:
 8006394:	898a      	ldrh	r2, [r1, #12]
 8006396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	0710      	lsls	r0, r2, #28
 800639e:	460c      	mov	r4, r1
 80063a0:	d458      	bmi.n	8006454 <__sflush_r+0xc0>
 80063a2:	684b      	ldr	r3, [r1, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc05      	bgt.n	80063b4 <__sflush_r+0x20>
 80063a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dc02      	bgt.n	80063b4 <__sflush_r+0x20>
 80063ae:	2000      	movs	r0, #0
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	d0f9      	beq.n	80063ae <__sflush_r+0x1a>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063c0:	682f      	ldr	r7, [r5, #0]
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	d032      	beq.n	800642c <__sflush_r+0x98>
 80063c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	075a      	lsls	r2, r3, #29
 80063cc:	d505      	bpl.n	80063da <__sflush_r+0x46>
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	1ac0      	subs	r0, r0, r3
 80063d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063d4:	b10b      	cbz	r3, 80063da <__sflush_r+0x46>
 80063d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063d8:	1ac0      	subs	r0, r0, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	4602      	mov	r2, r0
 80063de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063e0:	6a21      	ldr	r1, [r4, #32]
 80063e2:	4628      	mov	r0, r5
 80063e4:	47b0      	blx	r6
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	d106      	bne.n	80063fa <__sflush_r+0x66>
 80063ec:	6829      	ldr	r1, [r5, #0]
 80063ee:	291d      	cmp	r1, #29
 80063f0:	d82c      	bhi.n	800644c <__sflush_r+0xb8>
 80063f2:	4a2a      	ldr	r2, [pc, #168]	; (800649c <__sflush_r+0x108>)
 80063f4:	40ca      	lsrs	r2, r1
 80063f6:	07d6      	lsls	r6, r2, #31
 80063f8:	d528      	bpl.n	800644c <__sflush_r+0xb8>
 80063fa:	2200      	movs	r2, #0
 80063fc:	6062      	str	r2, [r4, #4]
 80063fe:	04d9      	lsls	r1, r3, #19
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	6022      	str	r2, [r4, #0]
 8006404:	d504      	bpl.n	8006410 <__sflush_r+0x7c>
 8006406:	1c42      	adds	r2, r0, #1
 8006408:	d101      	bne.n	800640e <__sflush_r+0x7a>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	b903      	cbnz	r3, 8006410 <__sflush_r+0x7c>
 800640e:	6560      	str	r0, [r4, #84]	; 0x54
 8006410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006412:	602f      	str	r7, [r5, #0]
 8006414:	2900      	cmp	r1, #0
 8006416:	d0ca      	beq.n	80063ae <__sflush_r+0x1a>
 8006418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800641c:	4299      	cmp	r1, r3
 800641e:	d002      	beq.n	8006426 <__sflush_r+0x92>
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff f94f 	bl	80056c4 <_free_r>
 8006426:	2000      	movs	r0, #0
 8006428:	6360      	str	r0, [r4, #52]	; 0x34
 800642a:	e7c1      	b.n	80063b0 <__sflush_r+0x1c>
 800642c:	6a21      	ldr	r1, [r4, #32]
 800642e:	2301      	movs	r3, #1
 8006430:	4628      	mov	r0, r5
 8006432:	47b0      	blx	r6
 8006434:	1c41      	adds	r1, r0, #1
 8006436:	d1c7      	bne.n	80063c8 <__sflush_r+0x34>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0c4      	beq.n	80063c8 <__sflush_r+0x34>
 800643e:	2b1d      	cmp	r3, #29
 8006440:	d001      	beq.n	8006446 <__sflush_r+0xb2>
 8006442:	2b16      	cmp	r3, #22
 8006444:	d101      	bne.n	800644a <__sflush_r+0xb6>
 8006446:	602f      	str	r7, [r5, #0]
 8006448:	e7b1      	b.n	80063ae <__sflush_r+0x1a>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	e7ad      	b.n	80063b0 <__sflush_r+0x1c>
 8006454:	690f      	ldr	r7, [r1, #16]
 8006456:	2f00      	cmp	r7, #0
 8006458:	d0a9      	beq.n	80063ae <__sflush_r+0x1a>
 800645a:	0793      	lsls	r3, r2, #30
 800645c:	680e      	ldr	r6, [r1, #0]
 800645e:	bf08      	it	eq
 8006460:	694b      	ldreq	r3, [r1, #20]
 8006462:	600f      	str	r7, [r1, #0]
 8006464:	bf18      	it	ne
 8006466:	2300      	movne	r3, #0
 8006468:	eba6 0807 	sub.w	r8, r6, r7
 800646c:	608b      	str	r3, [r1, #8]
 800646e:	f1b8 0f00 	cmp.w	r8, #0
 8006472:	dd9c      	ble.n	80063ae <__sflush_r+0x1a>
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006478:	4643      	mov	r3, r8
 800647a:	463a      	mov	r2, r7
 800647c:	4628      	mov	r0, r5
 800647e:	47b0      	blx	r6
 8006480:	2800      	cmp	r0, #0
 8006482:	dc06      	bgt.n	8006492 <__sflush_r+0xfe>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006490:	e78e      	b.n	80063b0 <__sflush_r+0x1c>
 8006492:	4407      	add	r7, r0
 8006494:	eba8 0800 	sub.w	r8, r8, r0
 8006498:	e7e9      	b.n	800646e <__sflush_r+0xda>
 800649a:	bf00      	nop
 800649c:	20400001 	.word	0x20400001

080064a0 <_fflush_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	4605      	mov	r5, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b913      	cbnz	r3, 80064b0 <_fflush_r+0x10>
 80064aa:	2500      	movs	r5, #0
 80064ac:	4628      	mov	r0, r5
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	b118      	cbz	r0, 80064ba <_fflush_r+0x1a>
 80064b2:	6983      	ldr	r3, [r0, #24]
 80064b4:	b90b      	cbnz	r3, 80064ba <_fflush_r+0x1a>
 80064b6:	f7ff f84b 	bl	8005550 <__sinit>
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <_fflush_r+0x6c>)
 80064bc:	429c      	cmp	r4, r3
 80064be:	d11b      	bne.n	80064f8 <_fflush_r+0x58>
 80064c0:	686c      	ldr	r4, [r5, #4]
 80064c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ef      	beq.n	80064aa <_fflush_r+0xa>
 80064ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064cc:	07d0      	lsls	r0, r2, #31
 80064ce:	d404      	bmi.n	80064da <_fflush_r+0x3a>
 80064d0:	0599      	lsls	r1, r3, #22
 80064d2:	d402      	bmi.n	80064da <_fflush_r+0x3a>
 80064d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d6:	f7ff f8eb 	bl	80056b0 <__retarget_lock_acquire_recursive>
 80064da:	4628      	mov	r0, r5
 80064dc:	4621      	mov	r1, r4
 80064de:	f7ff ff59 	bl	8006394 <__sflush_r>
 80064e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e4:	07da      	lsls	r2, r3, #31
 80064e6:	4605      	mov	r5, r0
 80064e8:	d4e0      	bmi.n	80064ac <_fflush_r+0xc>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	059b      	lsls	r3, r3, #22
 80064ee:	d4dd      	bmi.n	80064ac <_fflush_r+0xc>
 80064f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f2:	f7ff f8de 	bl	80056b2 <__retarget_lock_release_recursive>
 80064f6:	e7d9      	b.n	80064ac <_fflush_r+0xc>
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <_fflush_r+0x70>)
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d101      	bne.n	8006502 <_fflush_r+0x62>
 80064fe:	68ac      	ldr	r4, [r5, #8]
 8006500:	e7df      	b.n	80064c2 <_fflush_r+0x22>
 8006502:	4b04      	ldr	r3, [pc, #16]	; (8006514 <_fflush_r+0x74>)
 8006504:	429c      	cmp	r4, r3
 8006506:	bf08      	it	eq
 8006508:	68ec      	ldreq	r4, [r5, #12]
 800650a:	e7da      	b.n	80064c2 <_fflush_r+0x22>
 800650c:	08007234 	.word	0x08007234
 8006510:	08007254 	.word	0x08007254
 8006514:	08007214 	.word	0x08007214

08006518 <_lseek_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	; (8006538 <_lseek_r+0x20>)
 800651c:	4604      	mov	r4, r0
 800651e:	4608      	mov	r0, r1
 8006520:	4611      	mov	r1, r2
 8006522:	2200      	movs	r2, #0
 8006524:	602a      	str	r2, [r5, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	f000 f9d9 	bl	80068de <_lseek>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_lseek_r+0x1e>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_lseek_r+0x1e>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	20012eac 	.word	0x20012eac

0800653c <__swhatbuf_r>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	460e      	mov	r6, r1
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	2900      	cmp	r1, #0
 8006546:	b096      	sub	sp, #88	; 0x58
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	da08      	bge.n	8006560 <__swhatbuf_r+0x24>
 800654e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	602a      	str	r2, [r5, #0]
 8006556:	061a      	lsls	r2, r3, #24
 8006558:	d410      	bmi.n	800657c <__swhatbuf_r+0x40>
 800655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655e:	e00e      	b.n	800657e <__swhatbuf_r+0x42>
 8006560:	466a      	mov	r2, sp
 8006562:	f000 f8fd 	bl	8006760 <_fstat_r>
 8006566:	2800      	cmp	r0, #0
 8006568:	dbf1      	blt.n	800654e <__swhatbuf_r+0x12>
 800656a:	9a01      	ldr	r2, [sp, #4]
 800656c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006574:	425a      	negs	r2, r3
 8006576:	415a      	adcs	r2, r3
 8006578:	602a      	str	r2, [r5, #0]
 800657a:	e7ee      	b.n	800655a <__swhatbuf_r+0x1e>
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	2000      	movs	r0, #0
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	b016      	add	sp, #88	; 0x58
 8006584:	bd70      	pop	{r4, r5, r6, pc}
	...

08006588 <__smakebuf_r>:
 8006588:	898b      	ldrh	r3, [r1, #12]
 800658a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800658c:	079d      	lsls	r5, r3, #30
 800658e:	4606      	mov	r6, r0
 8006590:	460c      	mov	r4, r1
 8006592:	d507      	bpl.n	80065a4 <__smakebuf_r+0x1c>
 8006594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	2301      	movs	r3, #1
 800659e:	6163      	str	r3, [r4, #20]
 80065a0:	b002      	add	sp, #8
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	ab01      	add	r3, sp, #4
 80065a6:	466a      	mov	r2, sp
 80065a8:	f7ff ffc8 	bl	800653c <__swhatbuf_r>
 80065ac:	9900      	ldr	r1, [sp, #0]
 80065ae:	4605      	mov	r5, r0
 80065b0:	4630      	mov	r0, r6
 80065b2:	f7ff f8f3 	bl	800579c <_malloc_r>
 80065b6:	b948      	cbnz	r0, 80065cc <__smakebuf_r+0x44>
 80065b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065bc:	059a      	lsls	r2, r3, #22
 80065be:	d4ef      	bmi.n	80065a0 <__smakebuf_r+0x18>
 80065c0:	f023 0303 	bic.w	r3, r3, #3
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	e7e3      	b.n	8006594 <__smakebuf_r+0xc>
 80065cc:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <__smakebuf_r+0x7c>)
 80065ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	6020      	str	r0, [r4, #0]
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	6120      	str	r0, [r4, #16]
 80065e2:	b15b      	cbz	r3, 80065fc <__smakebuf_r+0x74>
 80065e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065e8:	4630      	mov	r0, r6
 80065ea:	f000 f8cb 	bl	8006784 <_isatty_r>
 80065ee:	b128      	cbz	r0, 80065fc <__smakebuf_r+0x74>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	89a0      	ldrh	r0, [r4, #12]
 80065fe:	4305      	orrs	r5, r0
 8006600:	81a5      	strh	r5, [r4, #12]
 8006602:	e7cd      	b.n	80065a0 <__smakebuf_r+0x18>
 8006604:	080054e9 	.word	0x080054e9

08006608 <memmove>:
 8006608:	4288      	cmp	r0, r1
 800660a:	b510      	push	{r4, lr}
 800660c:	eb01 0402 	add.w	r4, r1, r2
 8006610:	d902      	bls.n	8006618 <memmove+0x10>
 8006612:	4284      	cmp	r4, r0
 8006614:	4623      	mov	r3, r4
 8006616:	d807      	bhi.n	8006628 <memmove+0x20>
 8006618:	1e43      	subs	r3, r0, #1
 800661a:	42a1      	cmp	r1, r4
 800661c:	d008      	beq.n	8006630 <memmove+0x28>
 800661e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006626:	e7f8      	b.n	800661a <memmove+0x12>
 8006628:	4402      	add	r2, r0
 800662a:	4601      	mov	r1, r0
 800662c:	428a      	cmp	r2, r1
 800662e:	d100      	bne.n	8006632 <memmove+0x2a>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800663a:	e7f7      	b.n	800662c <memmove+0x24>

0800663c <__malloc_lock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_lock+0x8>)
 800663e:	f7ff b837 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20012ea0 	.word	0x20012ea0

08006648 <__malloc_unlock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_unlock+0x8>)
 800664a:	f7ff b832 	b.w	80056b2 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20012ea0 	.word	0x20012ea0

08006654 <_realloc_r>:
 8006654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006658:	4680      	mov	r8, r0
 800665a:	4614      	mov	r4, r2
 800665c:	460e      	mov	r6, r1
 800665e:	b921      	cbnz	r1, 800666a <_realloc_r+0x16>
 8006660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	4611      	mov	r1, r2
 8006666:	f7ff b899 	b.w	800579c <_malloc_r>
 800666a:	b92a      	cbnz	r2, 8006678 <_realloc_r+0x24>
 800666c:	f7ff f82a 	bl	80056c4 <_free_r>
 8006670:	4625      	mov	r5, r4
 8006672:	4628      	mov	r0, r5
 8006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006678:	f000 f894 	bl	80067a4 <_malloc_usable_size_r>
 800667c:	4284      	cmp	r4, r0
 800667e:	4607      	mov	r7, r0
 8006680:	d802      	bhi.n	8006688 <_realloc_r+0x34>
 8006682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006686:	d812      	bhi.n	80066ae <_realloc_r+0x5a>
 8006688:	4621      	mov	r1, r4
 800668a:	4640      	mov	r0, r8
 800668c:	f7ff f886 	bl	800579c <_malloc_r>
 8006690:	4605      	mov	r5, r0
 8006692:	2800      	cmp	r0, #0
 8006694:	d0ed      	beq.n	8006672 <_realloc_r+0x1e>
 8006696:	42bc      	cmp	r4, r7
 8006698:	4622      	mov	r2, r4
 800669a:	4631      	mov	r1, r6
 800669c:	bf28      	it	cs
 800669e:	463a      	movcs	r2, r7
 80066a0:	f7fe fe12 	bl	80052c8 <memcpy>
 80066a4:	4631      	mov	r1, r6
 80066a6:	4640      	mov	r0, r8
 80066a8:	f7ff f80c 	bl	80056c4 <_free_r>
 80066ac:	e7e1      	b.n	8006672 <_realloc_r+0x1e>
 80066ae:	4635      	mov	r5, r6
 80066b0:	e7df      	b.n	8006672 <_realloc_r+0x1e>
	...

080066b4 <_read_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	; (80066d4 <_read_r+0x20>)
 80066b8:	4604      	mov	r4, r0
 80066ba:	4608      	mov	r0, r1
 80066bc:	4611      	mov	r1, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 f8b3 	bl	800682e <_read>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_read_r+0x1e>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_read_r+0x1e>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	20012eac 	.word	0x20012eac

080066d8 <_raise_r>:
 80066d8:	291f      	cmp	r1, #31
 80066da:	b538      	push	{r3, r4, r5, lr}
 80066dc:	4604      	mov	r4, r0
 80066de:	460d      	mov	r5, r1
 80066e0:	d904      	bls.n	80066ec <_raise_r+0x14>
 80066e2:	2316      	movs	r3, #22
 80066e4:	6003      	str	r3, [r0, #0]
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066ee:	b112      	cbz	r2, 80066f6 <_raise_r+0x1e>
 80066f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066f4:	b94b      	cbnz	r3, 800670a <_raise_r+0x32>
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f830 	bl	800675c <_getpid_r>
 80066fc:	462a      	mov	r2, r5
 80066fe:	4601      	mov	r1, r0
 8006700:	4620      	mov	r0, r4
 8006702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006706:	f000 b817 	b.w	8006738 <_kill_r>
 800670a:	2b01      	cmp	r3, #1
 800670c:	d00a      	beq.n	8006724 <_raise_r+0x4c>
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	d103      	bne.n	800671a <_raise_r+0x42>
 8006712:	2316      	movs	r3, #22
 8006714:	6003      	str	r3, [r0, #0]
 8006716:	2001      	movs	r0, #1
 8006718:	e7e7      	b.n	80066ea <_raise_r+0x12>
 800671a:	2400      	movs	r4, #0
 800671c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006720:	4628      	mov	r0, r5
 8006722:	4798      	blx	r3
 8006724:	2000      	movs	r0, #0
 8006726:	e7e0      	b.n	80066ea <_raise_r+0x12>

08006728 <raise>:
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <raise+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f7ff bfd3 	b.w	80066d8 <_raise_r>
 8006732:	bf00      	nop
 8006734:	20000014 	.word	0x20000014

08006738 <_kill_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d07      	ldr	r5, [pc, #28]	; (8006758 <_kill_r+0x20>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	f000 fb03 	bl	8006d50 <_kill>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	d102      	bne.n	8006754 <_kill_r+0x1c>
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	b103      	cbz	r3, 8006754 <_kill_r+0x1c>
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	20012eac 	.word	0x20012eac

0800675c <_getpid_r>:
 800675c:	f000 b928 	b.w	80069b0 <_getpid>

08006760 <_fstat_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	; (8006780 <_fstat_r+0x20>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	f000 f942 	bl	80069f6 <_fstat>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d102      	bne.n	800677c <_fstat_r+0x1c>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	b103      	cbz	r3, 800677c <_fstat_r+0x1c>
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	20012eac 	.word	0x20012eac

08006784 <_isatty_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d06      	ldr	r5, [pc, #24]	; (80067a0 <_isatty_r+0x1c>)
 8006788:	2300      	movs	r3, #0
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	602b      	str	r3, [r5, #0]
 8006790:	f000 faa4 	bl	8006cdc <_isatty>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d102      	bne.n	800679e <_isatty_r+0x1a>
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	b103      	cbz	r3, 800679e <_isatty_r+0x1a>
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	20012eac 	.word	0x20012eac

080067a4 <_malloc_usable_size_r>:
 80067a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a8:	1f18      	subs	r0, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfbc      	itt	lt
 80067ae:	580b      	ldrlt	r3, [r1, r0]
 80067b0:	18c0      	addlt	r0, r0, r3
 80067b2:	4770      	bx	lr

080067b4 <findslot>:
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <findslot+0x2c>)
 80067b6:	b510      	push	{r4, lr}
 80067b8:	4604      	mov	r4, r0
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	b118      	cbz	r0, 80067c6 <findslot+0x12>
 80067be:	6983      	ldr	r3, [r0, #24]
 80067c0:	b90b      	cbnz	r3, 80067c6 <findslot+0x12>
 80067c2:	f7fe fec5 	bl	8005550 <__sinit>
 80067c6:	2c13      	cmp	r4, #19
 80067c8:	d807      	bhi.n	80067da <findslot+0x26>
 80067ca:	4806      	ldr	r0, [pc, #24]	; (80067e4 <findslot+0x30>)
 80067cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80067d0:	3201      	adds	r2, #1
 80067d2:	d002      	beq.n	80067da <findslot+0x26>
 80067d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	2000      	movs	r0, #0
 80067dc:	e7fc      	b.n	80067d8 <findslot+0x24>
 80067de:	bf00      	nop
 80067e0:	20000014 	.word	0x20000014
 80067e4:	20012ebc 	.word	0x20012ebc

080067e8 <error>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	4604      	mov	r4, r0
 80067ec:	f7fe fd42 	bl	8005274 <__errno>
 80067f0:	2613      	movs	r6, #19
 80067f2:	4605      	mov	r5, r0
 80067f4:	2700      	movs	r7, #0
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	beab      	bkpt	0x00ab
 80067fc:	4606      	mov	r6, r0
 80067fe:	602e      	str	r6, [r5, #0]
 8006800:	4620      	mov	r0, r4
 8006802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006804 <checkerror>:
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d101      	bne.n	800680c <checkerror+0x8>
 8006808:	f7ff bfee 	b.w	80067e8 <error>
 800680c:	4770      	bx	lr

0800680e <_swiread>:
 800680e:	b530      	push	{r4, r5, lr}
 8006810:	b085      	sub	sp, #20
 8006812:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006816:	9203      	str	r2, [sp, #12]
 8006818:	2406      	movs	r4, #6
 800681a:	ad01      	add	r5, sp, #4
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	beab      	bkpt	0x00ab
 8006822:	4604      	mov	r4, r0
 8006824:	4620      	mov	r0, r4
 8006826:	f7ff ffed 	bl	8006804 <checkerror>
 800682a:	b005      	add	sp, #20
 800682c:	bd30      	pop	{r4, r5, pc}

0800682e <_read>:
 800682e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006830:	4615      	mov	r5, r2
 8006832:	9101      	str	r1, [sp, #4]
 8006834:	f7ff ffbe 	bl	80067b4 <findslot>
 8006838:	9901      	ldr	r1, [sp, #4]
 800683a:	4604      	mov	r4, r0
 800683c:	b938      	cbnz	r0, 800684e <_read+0x20>
 800683e:	f7fe fd19 	bl	8005274 <__errno>
 8006842:	2309      	movs	r3, #9
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800684a:	b003      	add	sp, #12
 800684c:	bd30      	pop	{r4, r5, pc}
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	462a      	mov	r2, r5
 8006852:	f7ff ffdc 	bl	800680e <_swiread>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d0f7      	beq.n	800684a <_read+0x1c>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	1a2a      	subs	r2, r5, r0
 800685e:	4413      	add	r3, r2
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	4610      	mov	r0, r2
 8006864:	e7f1      	b.n	800684a <_read+0x1c>

08006866 <_swilseek>:
 8006866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	4616      	mov	r6, r2
 800686c:	f7ff ffa2 	bl	80067b4 <findslot>
 8006870:	4605      	mov	r5, r0
 8006872:	b940      	cbnz	r0, 8006886 <_swilseek+0x20>
 8006874:	f7fe fcfe 	bl	8005274 <__errno>
 8006878:	2309      	movs	r3, #9
 800687a:	6003      	str	r3, [r0, #0]
 800687c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006880:	4620      	mov	r0, r4
 8006882:	b003      	add	sp, #12
 8006884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006886:	2e02      	cmp	r6, #2
 8006888:	d903      	bls.n	8006892 <_swilseek+0x2c>
 800688a:	f7fe fcf3 	bl	8005274 <__errno>
 800688e:	2316      	movs	r3, #22
 8006890:	e7f3      	b.n	800687a <_swilseek+0x14>
 8006892:	2e01      	cmp	r6, #1
 8006894:	d112      	bne.n	80068bc <_swilseek+0x56>
 8006896:	6843      	ldr	r3, [r0, #4]
 8006898:	18e4      	adds	r4, r4, r3
 800689a:	d4f6      	bmi.n	800688a <_swilseek+0x24>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	260a      	movs	r6, #10
 80068a0:	e9cd 3400 	strd	r3, r4, [sp]
 80068a4:	466f      	mov	r7, sp
 80068a6:	4630      	mov	r0, r6
 80068a8:	4639      	mov	r1, r7
 80068aa:	beab      	bkpt	0x00ab
 80068ac:	4606      	mov	r6, r0
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ffa8 	bl	8006804 <checkerror>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	dbe1      	blt.n	800687c <_swilseek+0x16>
 80068b8:	606c      	str	r4, [r5, #4]
 80068ba:	e7e1      	b.n	8006880 <_swilseek+0x1a>
 80068bc:	2e02      	cmp	r6, #2
 80068be:	d1ed      	bne.n	800689c <_swilseek+0x36>
 80068c0:	6803      	ldr	r3, [r0, #0]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	260c      	movs	r6, #12
 80068c6:	466f      	mov	r7, sp
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	beab      	bkpt	0x00ab
 80068ce:	4606      	mov	r6, r0
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff97 	bl	8006804 <checkerror>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d0d0      	beq.n	800687c <_swilseek+0x16>
 80068da:	4404      	add	r4, r0
 80068dc:	e7de      	b.n	800689c <_swilseek+0x36>

080068de <_lseek>:
 80068de:	f7ff bfc2 	b.w	8006866 <_swilseek>

080068e2 <_swiwrite>:
 80068e2:	b530      	push	{r4, r5, lr}
 80068e4:	b085      	sub	sp, #20
 80068e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80068ea:	9203      	str	r2, [sp, #12]
 80068ec:	2405      	movs	r4, #5
 80068ee:	ad01      	add	r5, sp, #4
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	beab      	bkpt	0x00ab
 80068f6:	4604      	mov	r4, r0
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7ff ff83 	bl	8006804 <checkerror>
 80068fe:	b005      	add	sp, #20
 8006900:	bd30      	pop	{r4, r5, pc}

08006902 <_write>:
 8006902:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006904:	4615      	mov	r5, r2
 8006906:	9101      	str	r1, [sp, #4]
 8006908:	f7ff ff54 	bl	80067b4 <findslot>
 800690c:	9901      	ldr	r1, [sp, #4]
 800690e:	4604      	mov	r4, r0
 8006910:	b930      	cbnz	r0, 8006920 <_write+0x1e>
 8006912:	f7fe fcaf 	bl	8005274 <__errno>
 8006916:	2309      	movs	r3, #9
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800691e:	e012      	b.n	8006946 <_write+0x44>
 8006920:	6800      	ldr	r0, [r0, #0]
 8006922:	462a      	mov	r2, r5
 8006924:	f7ff ffdd 	bl	80068e2 <_swiwrite>
 8006928:	2800      	cmp	r0, #0
 800692a:	dbf6      	blt.n	800691a <_write+0x18>
 800692c:	6862      	ldr	r2, [r4, #4]
 800692e:	1a2b      	subs	r3, r5, r0
 8006930:	441a      	add	r2, r3
 8006932:	42a8      	cmp	r0, r5
 8006934:	6062      	str	r2, [r4, #4]
 8006936:	d105      	bne.n	8006944 <_write+0x42>
 8006938:	2000      	movs	r0, #0
 800693a:	b003      	add	sp, #12
 800693c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006940:	f7ff bf52 	b.w	80067e8 <error>
 8006944:	4618      	mov	r0, r3
 8006946:	b003      	add	sp, #12
 8006948:	bd30      	pop	{r4, r5, pc}

0800694a <_swiclose>:
 800694a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800694c:	2402      	movs	r4, #2
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	ad01      	add	r5, sp, #4
 8006952:	4620      	mov	r0, r4
 8006954:	4629      	mov	r1, r5
 8006956:	beab      	bkpt	0x00ab
 8006958:	4604      	mov	r4, r0
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff ff52 	bl	8006804 <checkerror>
 8006960:	b003      	add	sp, #12
 8006962:	bd30      	pop	{r4, r5, pc}

08006964 <_close>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4605      	mov	r5, r0
 8006968:	f7ff ff24 	bl	80067b4 <findslot>
 800696c:	4604      	mov	r4, r0
 800696e:	b930      	cbnz	r0, 800697e <_close+0x1a>
 8006970:	f7fe fc80 	bl	8005274 <__errno>
 8006974:	2309      	movs	r3, #9
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	3d01      	subs	r5, #1
 8006980:	2d01      	cmp	r5, #1
 8006982:	d809      	bhi.n	8006998 <_close+0x34>
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <_close+0x48>)
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d104      	bne.n	8006998 <_close+0x34>
 800698e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006992:	6003      	str	r3, [r0, #0]
 8006994:	2000      	movs	r0, #0
 8006996:	e7f1      	b.n	800697c <_close+0x18>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	f7ff ffd6 	bl	800694a <_swiclose>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d1ec      	bne.n	800697c <_close+0x18>
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	e7e8      	b.n	800697c <_close+0x18>
 80069aa:	bf00      	nop
 80069ac:	20012ebc 	.word	0x20012ebc

080069b0 <_getpid>:
 80069b0:	2001      	movs	r0, #1
 80069b2:	4770      	bx	lr

080069b4 <_swistat>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	f7ff fefc 	bl	80067b4 <findslot>
 80069bc:	4605      	mov	r5, r0
 80069be:	b930      	cbnz	r0, 80069ce <_swistat+0x1a>
 80069c0:	f7fe fc58 	bl	8005274 <__errno>
 80069c4:	2309      	movs	r3, #9
 80069c6:	6003      	str	r3, [r0, #0]
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069da:	64a3      	str	r3, [r4, #72]	; 0x48
 80069dc:	260c      	movs	r6, #12
 80069de:	4630      	mov	r0, r6
 80069e0:	4629      	mov	r1, r5
 80069e2:	beab      	bkpt	0x00ab
 80069e4:	4605      	mov	r5, r0
 80069e6:	4628      	mov	r0, r5
 80069e8:	f7ff ff0c 	bl	8006804 <checkerror>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	bf1c      	itt	ne
 80069f0:	6120      	strne	r0, [r4, #16]
 80069f2:	2000      	movne	r0, #0
 80069f4:	e7ea      	b.n	80069cc <_swistat+0x18>

080069f6 <_fstat>:
 80069f6:	460b      	mov	r3, r1
 80069f8:	b510      	push	{r4, lr}
 80069fa:	2100      	movs	r1, #0
 80069fc:	4604      	mov	r4, r0
 80069fe:	2258      	movs	r2, #88	; 0x58
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fc6f 	bl	80052e4 <memset>
 8006a06:	4601      	mov	r1, r0
 8006a08:	4620      	mov	r0, r4
 8006a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a0e:	f7ff bfd1 	b.w	80069b4 <_swistat>

08006a12 <_stat>:
 8006a12:	b538      	push	{r3, r4, r5, lr}
 8006a14:	460d      	mov	r5, r1
 8006a16:	4604      	mov	r4, r0
 8006a18:	2258      	movs	r2, #88	; 0x58
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f7fe fc61 	bl	80052e4 <memset>
 8006a22:	4620      	mov	r0, r4
 8006a24:	2100      	movs	r1, #0
 8006a26:	f000 f811 	bl	8006a4c <_swiopen>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	d00b      	beq.n	8006a48 <_stat+0x36>
 8006a30:	686b      	ldr	r3, [r5, #4]
 8006a32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a36:	606b      	str	r3, [r5, #4]
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7ff ffbb 	bl	80069b4 <_swistat>
 8006a3e:	4605      	mov	r5, r0
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7ff ff8f 	bl	8006964 <_close>
 8006a46:	462c      	mov	r4, r5
 8006a48:	4620      	mov	r0, r4
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}

08006a4c <_swiopen>:
 8006a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a50:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006afc <_swiopen+0xb0>
 8006a54:	b097      	sub	sp, #92	; 0x5c
 8006a56:	4607      	mov	r7, r0
 8006a58:	460e      	mov	r6, r1
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8006a60:	1c61      	adds	r1, r4, #1
 8006a62:	d037      	beq.n	8006ad4 <_swiopen+0x88>
 8006a64:	3501      	adds	r5, #1
 8006a66:	2d14      	cmp	r5, #20
 8006a68:	d1f8      	bne.n	8006a5c <_swiopen+0x10>
 8006a6a:	f7fe fc03 	bl	8005274 <__errno>
 8006a6e:	2318      	movs	r3, #24
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a76:	e03d      	b.n	8006af4 <_swiopen+0xa8>
 8006a78:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8006a7c:	f240 6301 	movw	r3, #1537	; 0x601
 8006a80:	07b2      	lsls	r2, r6, #30
 8006a82:	bf48      	it	mi
 8006a84:	f044 0402 	orrmi.w	r4, r4, #2
 8006a88:	421e      	tst	r6, r3
 8006a8a:	bf18      	it	ne
 8006a8c:	f044 0404 	orrne.w	r4, r4, #4
 8006a90:	0733      	lsls	r3, r6, #28
 8006a92:	bf48      	it	mi
 8006a94:	f024 0404 	bicmi.w	r4, r4, #4
 8006a98:	4638      	mov	r0, r7
 8006a9a:	bf48      	it	mi
 8006a9c:	f044 0408 	orrmi.w	r4, r4, #8
 8006aa0:	9700      	str	r7, [sp, #0]
 8006aa2:	f7f9 fbed 	bl	8000280 <strlen>
 8006aa6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006aaa:	2401      	movs	r4, #1
 8006aac:	4620      	mov	r0, r4
 8006aae:	4649      	mov	r1, r9
 8006ab0:	beab      	bkpt	0x00ab
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	2c00      	cmp	r4, #0
 8006ab6:	db08      	blt.n	8006aca <_swiopen+0x7e>
 8006ab8:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8006abc:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ac6:	462c      	mov	r4, r5
 8006ac8:	e014      	b.n	8006af4 <_swiopen+0xa8>
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7ff fe8c 	bl	80067e8 <error>
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	e00f      	b.n	8006af4 <_swiopen+0xa8>
 8006ad4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8006ad8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006adc:	46e9      	mov	r9, sp
 8006ade:	d1cb      	bne.n	8006a78 <_swiopen+0x2c>
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f7ff ff95 	bl	8006a12 <_stat>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d0c5      	beq.n	8006a78 <_swiopen+0x2c>
 8006aec:	f7fe fbc2 	bl	8005274 <__errno>
 8006af0:	2311      	movs	r3, #17
 8006af2:	6003      	str	r3, [r0, #0]
 8006af4:	4620      	mov	r0, r4
 8006af6:	b017      	add	sp, #92	; 0x5c
 8006af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006afc:	20012ebc 	.word	0x20012ebc

08006b00 <_get_semihosting_exts>:
 8006b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	482a      	ldr	r0, [pc, #168]	; (8006bb4 <_get_semihosting_exts+0xb4>)
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	f7ff ff9d 	bl	8006a4c <_swiopen>
 8006b12:	462a      	mov	r2, r5
 8006b14:	4604      	mov	r4, r0
 8006b16:	2100      	movs	r1, #0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7fe fbe3 	bl	80052e4 <memset>
 8006b1e:	1c63      	adds	r3, r4, #1
 8006b20:	d016      	beq.n	8006b50 <_get_semihosting_exts+0x50>
 8006b22:	4620      	mov	r0, r4
 8006b24:	f7ff fe46 	bl	80067b4 <findslot>
 8006b28:	f04f 090c 	mov.w	r9, #12
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	4648      	mov	r0, r9
 8006b30:	4641      	mov	r1, r8
 8006b32:	beab      	bkpt	0x00ab
 8006b34:	4680      	mov	r8, r0
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff fe64 	bl	8006804 <checkerror>
 8006b3c:	2803      	cmp	r0, #3
 8006b3e:	dd02      	ble.n	8006b46 <_get_semihosting_exts+0x46>
 8006b40:	1ec3      	subs	r3, r0, #3
 8006b42:	42ab      	cmp	r3, r5
 8006b44:	dc08      	bgt.n	8006b58 <_get_semihosting_exts+0x58>
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7ff ff0c 	bl	8006964 <_close>
 8006b4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b50:	4620      	mov	r0, r4
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b58:	2204      	movs	r2, #4
 8006b5a:	eb0d 0102 	add.w	r1, sp, r2
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff fe65 	bl	800682e <_read>
 8006b64:	2803      	cmp	r0, #3
 8006b66:	ddee      	ble.n	8006b46 <_get_semihosting_exts+0x46>
 8006b68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b6c:	2b53      	cmp	r3, #83	; 0x53
 8006b6e:	d1ea      	bne.n	8006b46 <_get_semihosting_exts+0x46>
 8006b70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006b74:	2b48      	cmp	r3, #72	; 0x48
 8006b76:	d1e6      	bne.n	8006b46 <_get_semihosting_exts+0x46>
 8006b78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006b7c:	2b46      	cmp	r3, #70	; 0x46
 8006b7e:	d1e2      	bne.n	8006b46 <_get_semihosting_exts+0x46>
 8006b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b84:	2b42      	cmp	r3, #66	; 0x42
 8006b86:	d1de      	bne.n	8006b46 <_get_semihosting_exts+0x46>
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fe6a 	bl	8006866 <_swilseek>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	dbd7      	blt.n	8006b46 <_get_semihosting_exts+0x46>
 8006b96:	462a      	mov	r2, r5
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7ff fe47 	bl	800682e <_read>
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f7ff fede 	bl	8006964 <_close>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7ff fe2b 	bl	8006804 <checkerror>
 8006bae:	4604      	mov	r4, r0
 8006bb0:	e7ce      	b.n	8006b50 <_get_semihosting_exts+0x50>
 8006bb2:	bf00      	nop
 8006bb4:	080072a7 	.word	0x080072a7

08006bb8 <initialise_semihosting_exts>:
 8006bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bba:	4d0a      	ldr	r5, [pc, #40]	; (8006be4 <initialise_semihosting_exts+0x2c>)
 8006bbc:	4c0a      	ldr	r4, [pc, #40]	; (8006be8 <initialise_semihosting_exts+0x30>)
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	a801      	add	r0, sp, #4
 8006bc4:	6029      	str	r1, [r5, #0]
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	f7ff ff9a 	bl	8006b00 <_get_semihosting_exts>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	dd07      	ble.n	8006be0 <initialise_semihosting_exts+0x28>
 8006bd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006bd4:	f003 0201 	and.w	r2, r3, #1
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	20000078 	.word	0x20000078
 8006be8:	2000007c 	.word	0x2000007c

08006bec <_has_ext_exit_extended>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4c04      	ldr	r4, [pc, #16]	; (8006c00 <_has_ext_exit_extended+0x14>)
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da01      	bge.n	8006bfa <_has_ext_exit_extended+0xe>
 8006bf6:	f7ff ffdf 	bl	8006bb8 <initialise_semihosting_exts>
 8006bfa:	6820      	ldr	r0, [r4, #0]
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000078 	.word	0x20000078

08006c04 <_has_ext_stdout_stderr>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4c04      	ldr	r4, [pc, #16]	; (8006c18 <_has_ext_stdout_stderr+0x14>)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da01      	bge.n	8006c12 <_has_ext_stdout_stderr+0xe>
 8006c0e:	f7ff ffd3 	bl	8006bb8 <initialise_semihosting_exts>
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop
 8006c18:	2000007c 	.word	0x2000007c

08006c1c <initialise_monitor_handles>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	b085      	sub	sp, #20
 8006c22:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8006cd4 <initialise_monitor_handles+0xb8>
 8006c26:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	2400      	movs	r4, #0
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	af01      	add	r7, sp, #4
 8006c32:	9402      	str	r4, [sp, #8]
 8006c34:	2501      	movs	r5, #1
 8006c36:	4628      	mov	r0, r5
 8006c38:	4639      	mov	r1, r7
 8006c3a:	beab      	bkpt	0x00ab
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006cd8 <initialise_monitor_handles+0xbc>
 8006c42:	4623      	mov	r3, r4
 8006c44:	4c20      	ldr	r4, [pc, #128]	; (8006cc8 <initialise_monitor_handles+0xac>)
 8006c46:	f8c8 5000 	str.w	r5, [r8]
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006c52:	3301      	adds	r3, #1
 8006c54:	2b14      	cmp	r3, #20
 8006c56:	d1fa      	bne.n	8006c4e <initialise_monitor_handles+0x32>
 8006c58:	f7ff ffd4 	bl	8006c04 <_has_ext_stdout_stderr>
 8006c5c:	4d1b      	ldr	r5, [pc, #108]	; (8006ccc <initialise_monitor_handles+0xb0>)
 8006c5e:	b1d0      	cbz	r0, 8006c96 <initialise_monitor_handles+0x7a>
 8006c60:	f04f 0a03 	mov.w	sl, #3
 8006c64:	2304      	movs	r3, #4
 8006c66:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c6a:	2601      	movs	r6, #1
 8006c6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	beab      	bkpt	0x00ab
 8006c78:	4683      	mov	fp, r0
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <initialise_monitor_handles+0xb4>)
 8006c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c80:	f8c3 b000 	str.w	fp, [r3]
 8006c84:	2308      	movs	r3, #8
 8006c86:	f8cd a00c 	str.w	sl, [sp, #12]
 8006c8a:	9302      	str	r3, [sp, #8]
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	beab      	bkpt	0x00ab
 8006c92:	4606      	mov	r6, r0
 8006c94:	602e      	str	r6, [r5, #0]
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	bf02      	ittt	eq
 8006c9c:	4b0c      	ldreq	r3, [pc, #48]	; (8006cd0 <initialise_monitor_handles+0xb4>)
 8006c9e:	681b      	ldreq	r3, [r3, #0]
 8006ca0:	602b      	streq	r3, [r5, #0]
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	6066      	str	r6, [r4, #4]
 8006cac:	f7ff ffaa 	bl	8006c04 <_has_ext_stdout_stderr>
 8006cb0:	b130      	cbz	r0, 8006cc0 <initialise_monitor_handles+0xa4>
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <initialise_monitor_handles+0xb4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006cc0:	b005      	add	sp, #20
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20012ebc 	.word	0x20012ebc
 8006ccc:	20012eb0 	.word	0x20012eb0
 8006cd0:	20012eb8 	.word	0x20012eb8
 8006cd4:	080072bd 	.word	0x080072bd
 8006cd8:	20012eb4 	.word	0x20012eb4

08006cdc <_isatty>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	f7ff fd69 	bl	80067b4 <findslot>
 8006ce2:	2509      	movs	r5, #9
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	b920      	cbnz	r0, 8006cf2 <_isatty+0x16>
 8006ce8:	f7fe fac4 	bl	8005274 <__errno>
 8006cec:	6005      	str	r5, [r0, #0]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	beab      	bkpt	0x00ab
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	2c01      	cmp	r4, #1
 8006cfc:	d0f7      	beq.n	8006cee <_isatty+0x12>
 8006cfe:	f7fe fab9 	bl	8005274 <__errno>
 8006d02:	2400      	movs	r4, #0
 8006d04:	4605      	mov	r5, r0
 8006d06:	2613      	movs	r6, #19
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	beab      	bkpt	0x00ab
 8006d0e:	4606      	mov	r6, r0
 8006d10:	602e      	str	r6, [r5, #0]
 8006d12:	e7ec      	b.n	8006cee <_isatty+0x12>

08006d14 <_exit>:
 8006d14:	4601      	mov	r1, r0
 8006d16:	b508      	push	{r3, lr}
 8006d18:	4a02      	ldr	r2, [pc, #8]	; (8006d24 <_exit+0x10>)
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d1e:	f000 f803 	bl	8006d28 <_kill_shared>
 8006d22:	bf00      	nop
 8006d24:	00020026 	.word	0x00020026

08006d28 <_kill_shared>:
 8006d28:	b507      	push	{r0, r1, r2, lr}
 8006d2a:	e9cd 2100 	strd	r2, r1, [sp]
 8006d2e:	f7ff ff5d 	bl	8006bec <_has_ext_exit_extended>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2420      	movne	r4, #32
 8006d38:	2418      	moveq	r4, #24
 8006d3a:	f7ff ff57 	bl	8006bec <_has_ext_exit_extended>
 8006d3e:	b120      	cbz	r0, 8006d4a <_kill_shared+0x22>
 8006d40:	466d      	mov	r5, sp
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	beab      	bkpt	0x00ab
 8006d48:	4604      	mov	r4, r0
 8006d4a:	9d00      	ldr	r5, [sp, #0]
 8006d4c:	e7f9      	b.n	8006d42 <_kill_shared+0x1a>
	...

08006d50 <_kill>:
 8006d50:	2906      	cmp	r1, #6
 8006d52:	b508      	push	{r3, lr}
 8006d54:	bf0c      	ite	eq
 8006d56:	4a02      	ldreq	r2, [pc, #8]	; (8006d60 <_kill+0x10>)
 8006d58:	4a02      	ldrne	r2, [pc, #8]	; (8006d64 <_kill+0x14>)
 8006d5a:	f7ff ffe5 	bl	8006d28 <_kill_shared>
 8006d5e:	bf00      	nop
 8006d60:	00020023 	.word	0x00020023
 8006d64:	00020026 	.word	0x00020026

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
